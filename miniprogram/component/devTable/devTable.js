"use strict";
Component({
    properties: {
        result: {
            type: null,
            observer(newval, old) {
                if (newval.result) {
                    const successData = [];
                    const dangerData = [];
                    newval.result.forEach(el => {
                        if (!el.issimulate)
                            el.parseValue = el.parseValue + el.unit;
                        if (el.alarm)
                            dangerData.push(el);
                        else
                            successData.push(el);
                    });
                    this.setData({
                        successData,
                        dangerData
                    });
                }
            }
        }
    },
    data: {
        filter: '',
        successData: [],
        dangerData: []
    },
    methods: {
        onSearch() {
            this.triggerEvent('filter', { filter: this.data.filter });
        },
        onLine(event) {
            if (event.currentTarget.dataset.item.unit) {
                this.triggerEvent('line', { name: event.target.id });
            }
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2VGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZXZUYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsU0FBUyxDQUFDO0lBSVIsVUFBVSxFQUFFO1FBQ1YsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLElBQUk7WUFDVixRQUFRLENBQUMsTUFBd0IsRUFBRSxHQUFxQjtnQkFFdEQsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO29CQUNqQixNQUFNLFdBQVcsR0FBRyxFQUFnQyxDQUFBO29CQUNwRCxNQUFNLFVBQVUsR0FBRyxFQUFnQyxDQUFBO29CQUNuRCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTt3QkFDekIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVOzRCQUFFLEVBQUUsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFBO3dCQUMzRCxJQUFJLEVBQUUsQ0FBQyxLQUFLOzRCQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7OzRCQUM1QixXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO29CQUMzQixDQUFDLENBQUMsQ0FBQTtvQkFlRixJQUFJLENBQUMsT0FBTyxDQUFDO3dCQUNYLFdBQVc7d0JBQ1gsVUFBVTtxQkFDWCxDQUFDLENBQUE7aUJBQ0g7WUFDSCxDQUFDO1NBQ0Y7S0FDRjtJQUNELElBQUksRUFBRTtRQUNKLE1BQU0sRUFBRSxFQUFFO1FBQ1YsV0FBVyxFQUFFLEVBQWdDO1FBQzdDLFVBQVUsRUFBRSxFQUFnQztLQUM3QztJQUtELE9BQU8sRUFBRTtRQUNQLFFBQVE7WUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDM0QsQ0FBQztRQUVELE1BQU0sQ0FBQyxLQUEwQztZQUMvQyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ3pDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTthQUNyRDtRQUNILENBQUM7S0FDRjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlxuXG4vLyBjb21wb25lbnQvZGV2VGFibGUvZGV2VGFibGUuanNcbkNvbXBvbmVudCh7XG4gIC8qKlxuICAgKiDnu4Tku7bnmoTlsZ7mgKfliJfooahcbiAgICovXG4gIHByb3BlcnRpZXM6IHtcbiAgICByZXN1bHQ6IHtcbiAgICAgIHR5cGU6IG51bGwsXG4gICAgICBvYnNlcnZlcihuZXd2YWw6IFVhcnQucXVlcnlSZXN1bHQsIG9sZDogVWFydC5xdWVyeVJlc3VsdCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyh7IG5ld3ZhbCwgb2xkIH0pO1xuICAgICAgICBpZiAobmV3dmFsLnJlc3VsdCkge1xuICAgICAgICAgIGNvbnN0IHN1Y2Nlc3NEYXRhID0gW10gYXMgVWFydC5xdWVyeVJlc3VsdEFyZ3VtZW50W11cbiAgICAgICAgICBjb25zdCBkYW5nZXJEYXRhID0gW10gYXMgVWFydC5xdWVyeVJlc3VsdEFyZ3VtZW50W11cbiAgICAgICAgICBuZXd2YWwucmVzdWx0LmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgICAgaWYgKCFlbC5pc3NpbXVsYXRlKSBlbC5wYXJzZVZhbHVlID0gZWwucGFyc2VWYWx1ZSArIGVsLnVuaXRcbiAgICAgICAgICAgIGlmIChlbC5hbGFybSkgZGFuZ2VyRGF0YS5wdXNoKGVsKVxuICAgICAgICAgICAgZWxzZSBzdWNjZXNzRGF0YS5wdXNoKGVsKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLyogaWYgKG9sZD8ucmVzdWx0ICYmIG9sZC51cGRhdGVkQXQgIT09IG5ld3ZhbC51cGRhdGVkQXQgJiYgb2xkLnJlc3VsdC5sZW5ndGggPT09IG5ld3ZhbC5yZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyDlo7DmmI7kuKTkuKrkuI3lkIznmoTmlbDnu4TlrZjmlL7lkYrorablkozmraPluLjmlbDmja5cbiAgICAgICAgICAgIFsuLi5zdWNjZXNzRGF0YSwgLi4uZGFuZ2VyRGF0YV0uZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIC8vIOavlOi+g+aWsOiAgeaVsOaNru+8jOa3u+WKoOS4iuS4i+eureWktFxuICAgICAgICAgICAgICBjb25zdCBvbGRpID0gb2xkLnJlc3VsdFtpbmRleF1cbiAgICAgICAgICAgICAgaWYgKGVsLnVuaXQgJiYgZWwubmFtZSA9PT0gb2xkaS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3YgPSBwYXJzZUZsb2F0KG9sZGkudmFsdWUpXG4gICAgICAgICAgICAgICAgY29uc3QgbnYgPSBwYXJzZUZsb2F0KGVsLnZhbHVlKVxuICAgICAgICAgICAgICAgIGlmIChudiA+IG92KSBlbC5zdGVwID0gJ+KGkSdcbiAgICAgICAgICAgICAgICBlbHNlIGVsLnN0ZXAgPSBudiA9PT0gb3YgPyAnficgOiAn4oaTJ1xuICAgICAgICAgICAgICB9IGVsc2UgZWwuc3RlcCA9ICcnXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgfSAqL1xuICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgICBzdWNjZXNzRGF0YSxcbiAgICAgICAgICAgIGRhbmdlckRhdGFcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBkYXRhOiB7XG4gICAgZmlsdGVyOiAnJyxcbiAgICBzdWNjZXNzRGF0YTogW10gYXMgVWFydC5xdWVyeVJlc3VsdEFyZ3VtZW50W10sXG4gICAgZGFuZ2VyRGF0YTogW10gYXMgVWFydC5xdWVyeVJlc3VsdEFyZ3VtZW50W11cbiAgfSxcblxuICAvKipcbiAgICog57uE5Lu255qE5pa55rOV5YiX6KGoXG4gICAqL1xuICBtZXRob2RzOiB7XG4gICAgb25TZWFyY2goKSB7XG4gICAgICB0aGlzLnRyaWdnZXJFdmVudCgnZmlsdGVyJywgeyBmaWx0ZXI6IHRoaXMuZGF0YS5maWx0ZXIgfSlcbiAgICB9LFxuICAgIC8vIOi/m+WFpeWPguaVsOeKtuaAgVxuICAgIG9uTGluZShldmVudDogdmFudEV2ZW50PFVhcnQucXVlcnlSZXN1bHRBcmd1bWVudD4pIHtcbiAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaXRlbS51bml0KSB7XG4gICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KCdsaW5lJywgeyBuYW1lOiBldmVudC50YXJnZXQuaWQgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pXG4iXX0=
"use strict";
Component({
    properties: {
        result: {
            type: null,
            observer(newval, old) {
                if (newval.result) {
                    const successData = [];
                    const dangerData = [];
                    newval.result.forEach(el => {
                        if (el.alarm)
                            dangerData.push(el);
                        else
                            successData.push(el);
                    });
                    if (old?.result && old.updatedAt !== newval.updatedAt && old.result.length === newval.result.length) {
                        [...successData, ...dangerData].forEach((el, index) => {
                            const oldi = old.result[index];
                            if (el.unit && el.name === oldi.name) {
                                const ov = parseFloat(oldi.value);
                                const nv = parseFloat(el.value);
                                if (nv > ov)
                                    el.step = '↑';
                                else
                                    el.step = nv === ov ? '~' : '↓';
                            }
                            else
                                el.step = '';
                        });
                    }
                    this.setData({
                        successData,
                        dangerData
                    });
                }
            }
        }
    },
    data: {
        filter: '',
        successData: [],
        dangerData: []
    },
    methods: {
        onSearch() {
            this.triggerEvent('filter', { filter: this.data.filter });
        },
        onLine(event) {
            if (event.currentTarget.dataset.item.unit) {
                this.triggerEvent('line', { name: event.target.id });
            }
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2VGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZXZUYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsU0FBUyxDQUFDO0lBSVIsVUFBVSxFQUFFO1FBQ1YsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLElBQUk7WUFDVixRQUFRLENBQUMsTUFBbUIsRUFBRSxHQUFnQjtnQkFFNUMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO29CQUNqQixNQUFNLFdBQVcsR0FBRyxFQUEyQixDQUFBO29CQUMvQyxNQUFNLFVBQVUsR0FBRyxFQUEyQixDQUFBO29CQUM5QyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTt3QkFDekIsSUFBSSxFQUFFLENBQUMsS0FBSzs0QkFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBOzs0QkFDNUIsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtvQkFDM0IsQ0FBQyxDQUFDLENBQUE7b0JBQ0YsSUFBSSxHQUFHLEVBQUUsTUFBTSxJQUFJLEdBQUcsQ0FBQyxTQUFTLEtBQUssTUFBTSxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTt3QkFFbkcsQ0FBQyxHQUFHLFdBQVcsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRTs0QkFFcEQsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTs0QkFDOUIsSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRTtnQ0FDcEMsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtnQ0FDakMsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtnQ0FDL0IsSUFBSSxFQUFFLEdBQUcsRUFBRTtvQ0FBRSxFQUFFLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQTs7b0NBQ3JCLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7NkJBQ3JDOztnQ0FBTSxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQTt3QkFDckIsQ0FBQyxDQUFDLENBQUE7cUJBRUg7b0JBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQzt3QkFDWCxXQUFXO3dCQUNYLFVBQVU7cUJBQ1gsQ0FBQyxDQUFBO2lCQUNIO1lBQ0gsQ0FBQztTQUNGO0tBQ0Y7SUFDRCxJQUFJLEVBQUU7UUFDSixNQUFNLEVBQUUsRUFBRTtRQUNWLFdBQVcsRUFBRSxFQUEyQjtRQUN4QyxVQUFVLEVBQUUsRUFBMkI7S0FDeEM7SUFLRCxPQUFPLEVBQUU7UUFDUCxRQUFRO1lBQ04sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO1FBQzNELENBQUM7UUFFRCxNQUFNLENBQUMsS0FBcUM7WUFDMUMsSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7YUFDckQ7UUFDSCxDQUFDO0tBQ0Y7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuLy8gY29tcG9uZW50L2RldlRhYmxlL2RldlRhYmxlLmpzXG5Db21wb25lbnQoe1xuICAvKipcbiAgICog57uE5Lu255qE5bGe5oCn5YiX6KGoXG4gICAqL1xuICBwcm9wZXJ0aWVzOiB7XG4gICAgcmVzdWx0OiB7XG4gICAgICB0eXBlOiBudWxsLFxuICAgICAgb2JzZXJ2ZXIobmV3dmFsOiBxdWVyeVJlc3VsdCwgb2xkOiBxdWVyeVJlc3VsdCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyh7IG5ld3ZhbCwgb2xkIH0pO1xuICAgICAgICBpZiAobmV3dmFsLnJlc3VsdCkge1xuICAgICAgICAgIGNvbnN0IHN1Y2Nlc3NEYXRhID0gW10gYXMgcXVlcnlSZXN1bHRBcmd1bWVudFtdXG4gICAgICAgICAgY29uc3QgZGFuZ2VyRGF0YSA9IFtdIGFzIHF1ZXJ5UmVzdWx0QXJndW1lbnRbXVxuICAgICAgICAgIG5ld3ZhbC5yZXN1bHQuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgICAgICBpZiAoZWwuYWxhcm0pIGRhbmdlckRhdGEucHVzaChlbClcbiAgICAgICAgICAgIGVsc2Ugc3VjY2Vzc0RhdGEucHVzaChlbClcbiAgICAgICAgICB9KVxuICAgICAgICAgIGlmIChvbGQ/LnJlc3VsdCAmJiBvbGQudXBkYXRlZEF0ICE9PSBuZXd2YWwudXBkYXRlZEF0ICYmIG9sZC5yZXN1bHQubGVuZ3RoID09PSBuZXd2YWwucmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgLy8g5aOw5piO5Lik5Liq5LiN5ZCM55qE5pWw57uE5a2Y5pS+5ZGK6K2m5ZKM5q2j5bi45pWw5o2uXG4gICAgICAgICAgICBbLi4uc3VjY2Vzc0RhdGEsIC4uLmRhbmdlckRhdGFdLmZvckVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAvLyDmr5TovoPmlrDogIHmlbDmja7vvIzmt7vliqDkuIrkuIvnrq3lpLRcbiAgICAgICAgICAgICAgY29uc3Qgb2xkaSA9IG9sZC5yZXN1bHRbaW5kZXhdXG4gICAgICAgICAgICAgIGlmIChlbC51bml0ICYmIGVsLm5hbWUgPT09IG9sZGkubmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG92ID0gcGFyc2VGbG9hdChvbGRpLnZhbHVlKVxuICAgICAgICAgICAgICAgIGNvbnN0IG52ID0gcGFyc2VGbG9hdChlbC52YWx1ZSlcbiAgICAgICAgICAgICAgICBpZiAobnYgPiBvdikgZWwuc3RlcCA9ICfihpEnXG4gICAgICAgICAgICAgICAgZWxzZSBlbC5zdGVwID0gbnYgPT09IG92ID8gJ34nIDogJ+KGkydcbiAgICAgICAgICAgICAgfSBlbHNlIGVsLnN0ZXAgPSAnJ1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgICAgc3VjY2Vzc0RhdGEsXG4gICAgICAgICAgICBkYW5nZXJEYXRhXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZGF0YToge1xuICAgIGZpbHRlcjogJycsXG4gICAgc3VjY2Vzc0RhdGE6IFtdIGFzIHF1ZXJ5UmVzdWx0QXJndW1lbnRbXSxcbiAgICBkYW5nZXJEYXRhOiBbXSBhcyBxdWVyeVJlc3VsdEFyZ3VtZW50W11cbiAgfSxcblxuICAvKipcbiAgICog57uE5Lu255qE5pa55rOV5YiX6KGoXG4gICAqL1xuICBtZXRob2RzOiB7XG4gICAgb25TZWFyY2goKSB7XG4gICAgICB0aGlzLnRyaWdnZXJFdmVudCgnZmlsdGVyJywgeyBmaWx0ZXI6IHRoaXMuZGF0YS5maWx0ZXIgfSlcbiAgICB9LFxuICAgIC8vIOi/m+WFpeWPguaVsOeKtuaAgVxuICAgIG9uTGluZShldmVudDogdmFudEV2ZW50PHF1ZXJ5UmVzdWx0QXJndW1lbnQ+KSB7XG4gICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0Lml0ZW0udW5pdCkge1xuICAgICAgICB0aGlzLnRyaWdnZXJFdmVudCgnbGluZScsIHsgbmFtZTogZXZlbnQudGFyZ2V0LmlkIH0pXG4gICAgICB9XG4gICAgfVxuICB9XG59KVxuIl19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
Component({
    properties: {
        canvasId: {
            type: String
        },
        id: {
            type: String
        },
        opt: {
            type: Object,
            value: {},
            observer: function (newval) {
                this.setData({
                    "option.dataset": newval
                });
            }
        }
    },
    data: {
        option: {
            color: ["#67E0E3", "#9FE6B8"],
            legend: {
                top: 30,
            },
            grid: {
                show: true,
                containLabel: true
            },
            tooltip: {
                show: true,
                trigger: 'axis'
            },
            xAxis: { type: 'category' },
            yAxis: {},
            series: [
                { type: 'line', sampling: 'min' }
            ],
            dataset: {
                dimensions: [],
                source: []
            },
        }
    },
    lifetimes: {}
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxTQUFTLENBQUM7SUFDUixVQUFVLEVBQUU7UUFDVixRQUFRLEVBQUU7WUFDUixJQUFJLEVBQUUsTUFBTTtTQUNiO1FBQ0QsRUFBRSxFQUFFO1lBQ0YsSUFBSSxFQUFFLE1BQU07U0FDYjtRQUNELEdBQUcsRUFBRTtZQUNILElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLEVBQUU7WUFDVCxRQUFRLEVBQUUsVUFBVSxNQUFvQztnQkFDdEQsSUFBSSxDQUFDLE9BQU8sQ0FBQztvQkFDWCxnQkFBZ0IsRUFBRSxNQUFNO2lCQUN6QixDQUFDLENBQUE7WUFDSixDQUFDO1NBQ0Y7S0FDRjtJQUNELElBQUksRUFBRTtRQUNKLE1BQU0sRUFBRTtZQUNOLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUM7WUFDN0IsTUFBTSxFQUFFO2dCQUNOLEdBQUcsRUFBRSxFQUFFO2FBQ1I7WUFRRCxJQUFJLEVBQUU7Z0JBQ0osSUFBSSxFQUFFLElBQUk7Z0JBQ1YsWUFBWSxFQUFFLElBQUk7YUFDbkI7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsT0FBTyxFQUFFLE1BQU07YUFDaEI7WUFDRCxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQzNCLEtBQUssRUFBRSxFQUFFO1lBQ1QsTUFBTSxFQUFFO2dCQUNOLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBQyxRQUFRLEVBQUMsS0FBSyxFQUFFO2FBQ2hDO1lBQ0QsT0FBTyxFQUFFO2dCQUNQLFVBQVUsRUFBRSxFQUFFO2dCQUNkLE1BQU0sRUFBRSxFQUFFO2FBQ1g7U0FDK0I7S0FDbkM7SUFDRCxTQUFTLEVBQUUsRUF1QlY7Q0FDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBlY2hhcnRzIGZyb20gJy4uLy4uL2VjLWNhbnZhcy9lY2hhcnRzJztcblxuQ29tcG9uZW50KHtcbiAgcHJvcGVydGllczoge1xuICAgIGNhbnZhc0lkOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuICAgIGlkOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuICAgIG9wdDoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgdmFsdWU6IHt9LFxuICAgICAgb2JzZXJ2ZXI6IGZ1bmN0aW9uIChuZXd2YWw6IGVjaGFydHMuRUNoYXJ0T3B0aW9uLkRhdGFzZXQpIHtcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICBcIm9wdGlvbi5kYXRhc2V0XCI6IG5ld3ZhbFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZGF0YToge1xuICAgIG9wdGlvbjoge1xuICAgICAgY29sb3I6IFtcIiM2N0UwRTNcIiwgXCIjOUZFNkI4XCJdLFxuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIHRvcDogMzAsXG4gICAgICB9LFxuICAgICAgLyogZGF0YVpvb206IFtcbiAgICAgICAge1xuICAgICAgICAgIHN0YXJ0VmFsdWU6ICcwMDowMDowMCdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHR5cGU6ICdpbnNpZGUnXG4gICAgICAgIH1cbiAgICAgIF0sICovXG4gICAgICBncmlkOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIGNvbnRhaW5MYWJlbDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgdHJpZ2dlcjogJ2F4aXMnXG4gICAgICB9LFxuICAgICAgeEF4aXM6IHsgdHlwZTogJ2NhdGVnb3J5JyB9LFxuICAgICAgeUF4aXM6IHt9LFxuICAgICAgc2VyaWVzOiBbXG4gICAgICAgIHsgdHlwZTogJ2xpbmUnLHNhbXBsaW5nOidtaW4nIH1cbiAgICAgIF0sXG4gICAgICBkYXRhc2V0OiB7XG4gICAgICAgIGRpbWVuc2lvbnM6IFtdLFxuICAgICAgICBzb3VyY2U6IFtdXG4gICAgICB9LFxuICAgIH0gYXMgUGFydGlhbDxlY2hhcnRzLkVDaGFydE9wdGlvbj5cbiAgfSxcbiAgbGlmZXRpbWVzOiB7XG4gICAgLyogcmVhZHkoKSB7XG4gICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHtcbiAgICAgICAgICBkYXRhc2V0OiB7XG4gICAgICAgICAgICAvLyDnlKggZGltZW5zaW9ucyDmjIflrprkuobnu7TluqbnmoTpobrluo/jgILnm7Top5LlnZDmoIfns7vkuK3vvIxcbiAgICAgICAgICAgIC8vIOm7mOiupOaKiuesrOS4gOS4que7tOW6puaYoOWwhOWIsCBYIOi9tOS4iu+8jOesrOS6jOS4que7tOW6puaYoOWwhOWIsCBZIOi9tOS4iuOAglxuICAgICAgICAgICAgLy8g5aaC5p6c5LiN5oyH5a6aIGRpbWVuc2lvbnPvvIzkuZ/lj6/ku6XpgJrov4fmjIflrpogc2VyaWVzLmVuY29kZVxuICAgICAgICAgICAgLy8g5a6M5oiQ5pig5bCE77yM5Y+C6KeB5ZCO5paH44CCXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBbJ3Byb2R1Y3QnLCAnMjAxNScsICcyMDE2JywgJzIwMTcnXSxcbiAgICAgICAgICAgIHNvdXJjZTogW1xuICAgICAgICAgICAgICB7IHByb2R1Y3Q6ICdNYXRjaGEgTGF0dGUnLCAnMjAxNSc6IDQzLjMsICcyMDE2JzogODUuOCwgJzIwMTcnOiA5My43IH0sXG4gICAgICAgICAgICAgIHsgcHJvZHVjdDogJ01pbGsgVGVhJywgJzIwMTUnOiA4My4xLCAnMjAxNic6IDczLjQsICcyMDE3JzogNTUuMSB9LFxuICAgICAgICAgICAgICB7IHByb2R1Y3Q6ICdDaGVlc2UgQ29jb2EnLCAnMjAxNSc6IDg2LjQsICcyMDE2JzogNjUuMiwgJzIwMTcnOiA4Mi41IH0sXG4gICAgICAgICAgICAgIHsgcHJvZHVjdDogJ1dhbG51dCBCcm93bmllJywgJzIwMTUnOiA3Mi40LCAnMjAxNic6IDUzLjksICcyMDE3JzogMzkuMSB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgIG9wdGlvblxuICAgICAgICB9KVxuICAgICAgfSwgMTAwMClcbiAgICB9ICovXG4gIH1cbn0pO1xuIl19
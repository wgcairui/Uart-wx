"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../../utils/util");
const api_1 = require("../../../utils/api");
Page({
    data: {
        mac: '',
        pid: '',
        mountDev: "",
        result: {},
        filter: '',
        interval: 0,
        protocol: '',
        Type: ''
    },
    onLoad: function (options) {
        wx.setNavigationBarTitle({ title: options.mountDev || options.mac || '' });
        this.setData({
            mac: options.DevMac,
            pid: options.pid,
            protocol: options.protocol,
            mountDev: options.mountDev,
            Type: options.Type
        });
    },
    async onReady() {
        wx.showLoading({ title: '获取运行数据' });
        await this.GetDevsRunInfo();
        wx.hideLoading();
    },
    onShow: function () {
    },
    onPullDownRefresh: async function () {
        await this.GetDevsRunInfo();
        wx.stopPullDownRefresh();
    },
    async GetDevsRunInfo() {
        const { mac, pid, filter } = this.data;
        const { code, data, msg } = await api_1.default.getTerminalData(mac, pid);
        if (code && data.result) {
            const regStr = new RegExp(filter);
            data.result = data.result.filter(el => !filter || regStr.test(el.name));
            data.time = (0, util_1.parseTime)(data.time);
            this.setData({
                result: data
            });
        }
        else {
            wx.showModal({
                title: 'Error',
                content: msg
            });
        }
    },
    filter(e) {
        const filter = e.detail.filter;
        const regStr = new RegExp(filter);
        const result = this.data.result.result?.filter(el => regStr.test(el.name));
        this.setData({
            filter,
            "result.result": result
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRldnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw4Q0FBK0M7QUFDL0MsNENBQW9DO0FBQ3BDLElBQUksQ0FBQztJQU1ILElBQUksRUFBRTtRQUNKLEdBQUcsRUFBRSxFQUFFO1FBQ1AsR0FBRyxFQUFFLEVBQUU7UUFDUCxRQUFRLEVBQUUsRUFBRTtRQUNaLE1BQU0sRUFBRSxFQUEwQjtRQUNsQyxNQUFNLEVBQUUsRUFBRTtRQUNWLFFBQVEsRUFBRSxDQUFRO1FBQ2xCLFFBQVEsRUFBRSxFQUFFO1FBQ1osSUFBSSxFQUFFLEVBQUU7S0FDVDtJQUtELE1BQU0sRUFBRSxVQUFVLE9BQXFGO1FBQ3JHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUMxRSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNO1lBQ25CLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztZQUNoQixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7WUFDMUIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1lBQzFCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtTQUNuQixDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0QsS0FBSyxDQUFDLE9BQU87UUFDWCxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFDbkMsTUFBTSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDM0IsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ2xCLENBQUM7SUFJRCxNQUFNLEVBQUU7SUFJUixDQUFDO0lBTUQsaUJBQWlCLEVBQUUsS0FBSztRQUN0QixNQUFNLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUMzQixFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQTtJQUMxQixDQUFDO0lBR0QsS0FBSyxDQUFDLGNBQWM7UUFDbEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQTtRQUN0QyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLGFBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQy9ELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDdkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7WUFDdkUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFBLGdCQUFTLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsTUFBTSxFQUFFLElBQUk7YUFDYixDQUFDLENBQUE7U0FHSDthQUFNO1lBQ0wsRUFBRSxDQUFDLFNBQVMsQ0FBQztnQkFDWCxLQUFLLEVBQUUsT0FBTztnQkFDZCxPQUFPLEVBQUUsR0FBRzthQUNiLENBQUMsQ0FBQTtTQUNIO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxDQUFZO1FBQ2pCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFBO1FBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQzFFLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxNQUFNO1lBQ04sZUFBZSxFQUFFLE1BQU07U0FDeEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIG1pbmlwcm9ncmFtL3BhZ2VzL2luZGV4L2RldnMvZGV2cy5qc1xuaW1wb3J0IHsgcGFyc2VUaW1lIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxcIlxuaW1wb3J0IGFwaSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvYXBpXCJcblBhZ2Uoe1xuXG4gIC8qKlxuICAgKiDpobXpnaLnmoTliJ3lp4vmlbDmja5cbiAgICovXG5cbiAgZGF0YToge1xuICAgIG1hYzogJycsXG4gICAgcGlkOiAnJyxcbiAgICBtb3VudERldjogXCJcIixcbiAgICByZXN1bHQ6IHt9IGFzIFVhcnQucXVlcnlSZXN1bHRTYXZlLFxuICAgIGZpbHRlcjogJycsXG4gICAgaW50ZXJ2YWw6IDAgYXMgYW55LFxuICAgIHByb3RvY29sOiAnJyxcbiAgICBUeXBlOiAnJ1xuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWKoOi9vVxuICAgKi9cbiAgb25Mb2FkOiBmdW5jdGlvbiAob3B0aW9uczogeyBtb3VudERldjogYW55OyBtYWM6IGFueTsgRGV2TWFjOiBhbnk7IHBpZDogYW55OyBwcm90b2NvbDogYW55OyBUeXBlOiBhbnkgfSkge1xuICAgIHd4LnNldE5hdmlnYXRpb25CYXJUaXRsZSh7IHRpdGxlOiBvcHRpb25zLm1vdW50RGV2IHx8IG9wdGlvbnMubWFjIHx8ICcnIH0pXG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIG1hYzogb3B0aW9ucy5EZXZNYWMsXG4gICAgICBwaWQ6IG9wdGlvbnMucGlkLFxuICAgICAgcHJvdG9jb2w6IG9wdGlvbnMucHJvdG9jb2wsXG4gICAgICBtb3VudERldjogb3B0aW9ucy5tb3VudERldixcbiAgICAgIFR5cGU6IG9wdGlvbnMuVHlwZVxuICAgIH0pXG4gIH0sXG4gIGFzeW5jIG9uUmVhZHkoKSB7XG4gICAgd3guc2hvd0xvYWRpbmcoeyB0aXRsZTogJ+iOt+WPlui/kOihjOaVsOaNricgfSlcbiAgICBhd2FpdCB0aGlzLkdldERldnNSdW5JbmZvKClcbiAgICB3eC5oaWRlTG9hZGluZygpXG4gIH0sXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouaYvuekulxuICAgKi9cbiAgb25TaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgLyogdGhpcy5zZXREYXRhKHtcbiAgICAgIGludGVydmFsOiBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLkdldERldnNSdW5JbmZvKCksIDUwMDApXG4gICAgfSkgKi9cbiAgfSxcblxuXG4gIC8qKlxuICAgKiDpobXpnaLnm7jlhbPkuovku7blpITnkIblh73mlbAtLeebkeWQrOeUqOaIt+S4i+aLieWKqOS9nFxuICAgKi9cbiAgb25QdWxsRG93blJlZnJlc2g6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCB0aGlzLkdldERldnNSdW5JbmZvKClcbiAgICB3eC5zdG9wUHVsbERvd25SZWZyZXNoKClcbiAgfSxcblxuXG4gIGFzeW5jIEdldERldnNSdW5JbmZvKCkge1xuICAgIGNvbnN0IHsgbWFjLCBwaWQsIGZpbHRlciB9ID0gdGhpcy5kYXRhXG4gICAgY29uc3QgeyBjb2RlLCBkYXRhLCBtc2cgfSA9IGF3YWl0IGFwaS5nZXRUZXJtaW5hbERhdGEobWFjLCBwaWQpXG4gICAgaWYgKGNvZGUgJiYgZGF0YS5yZXN1bHQpIHtcbiAgICAgIGNvbnN0IHJlZ1N0ciA9IG5ldyBSZWdFeHAoZmlsdGVyKVxuICAgICAgZGF0YS5yZXN1bHQgPSBkYXRhLnJlc3VsdC5maWx0ZXIoZWwgPT4gIWZpbHRlciB8fCByZWdTdHIudGVzdChlbC5uYW1lKSlcbiAgICAgIGRhdGEudGltZSA9IHBhcnNlVGltZShkYXRhLnRpbWUpXG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICByZXN1bHQ6IGRhdGFcbiAgICAgIH0pXG4gICAgICAvL1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHd4LnNob3dNb2RhbCh7XG4gICAgICAgIHRpdGxlOiAnRXJyb3InLFxuICAgICAgICBjb250ZW50OiBtc2dcbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICAvLyDliLfpgInlj4LmlbBcbiAgZmlsdGVyKGU6IHZhbnRFdmVudCkge1xuICAgIGNvbnN0IGZpbHRlciA9IGUuZGV0YWlsLmZpbHRlclxuICAgIGNvbnN0IHJlZ1N0ciA9IG5ldyBSZWdFeHAoZmlsdGVyKVxuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZGF0YS5yZXN1bHQucmVzdWx0Py5maWx0ZXIoZWwgPT4gcmVnU3RyLnRlc3QoZWwubmFtZSkpXG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIGZpbHRlcixcbiAgICAgIFwicmVzdWx0LnJlc3VsdFwiOiByZXN1bHRcbiAgICB9KVxuICB9XG59KSJdfQ==
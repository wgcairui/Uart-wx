"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../../utils/util");
const api_1 = require("../../../utils/api");
Page({
    data: {
        mac: '',
        pid: '',
        mountDev: "",
        result: {},
        filter: '',
        interval: 0,
        protocol: '',
        Type: ''
    },
    onLoad: function (options) {
        wx.setNavigationBarTitle({ title: options.mountDev || options.mac || '' });
        this.setData({
            mac: options.DevMac,
            pid: options.pid,
            protocol: options.protocol,
            mountDev: options.mountDev,
            Type: options.Type
        });
        api_1.default.onMessage(options.DevMac + options.pid, () => {
            console.log('获取运行数据:' + options.DevMac + options.pid);
            this.GetDevsRunInfo();
        });
    },
    async onReady() {
        wx.showLoading({ title: '获取运行数据' });
        await this.GetDevsRunInfo();
        wx.hideLoading();
    },
    onShow: function () {
    },
    onPullDownRefresh: async function () {
        await this.GetDevsRunInfo();
        wx.stopPullDownRefresh();
    },
    async GetDevsRunInfo() {
        const { mac, pid, filter } = this.data;
        const { code, data, msg } = await api_1.default.getTerminalData(mac, pid);
        if (code && data.result) {
            const regStr = new RegExp(filter);
            data.result = data.result.filter(el => !filter || regStr.test(el.name));
            data.time = (0, util_1.parseTime)(data.time);
            this.setData({
                result: data
            });
        }
        else {
            wx.showModal({
                title: 'Error',
                content: msg
            });
        }
    },
    filter(e) {
        const filter = e.detail.filter;
        const regStr = new RegExp(filter);
        const result = this.data.result.result?.filter(el => regStr.test(el.name));
        this.setData({
            filter,
            "result.result": result
        });
    },
    toline(e) {
        const url = '/pages/index/line/line' + (0, util_1.ObjectToStrquery)({ name: e.detail.name, mac: this.data.mac, pid: this.data.pid, protocol: this.data.protocol, type: 'wx' });
        console.log(url);
        wx.navigateTo({
            url
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRldnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw4Q0FBaUU7QUFDakUsNENBQW9DO0FBQ3BDLElBQUksQ0FBQztJQU1ILElBQUksRUFBRTtRQUNKLEdBQUcsRUFBRSxFQUFFO1FBQ1AsR0FBRyxFQUFFLEVBQUU7UUFDUCxRQUFRLEVBQUUsRUFBRTtRQUNaLE1BQU0sRUFBRSxFQUEwQjtRQUNsQyxNQUFNLEVBQUUsRUFBRTtRQUNWLFFBQVEsRUFBRSxDQUFRO1FBQ2xCLFFBQVEsRUFBRSxFQUFFO1FBQ1osSUFBSSxFQUFFLEVBQUU7S0FDVDtJQUtELE1BQU0sRUFBRSxVQUFVLE9BQXFGO1FBQ3JHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUMxRSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNO1lBQ25CLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztZQUNoQixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7WUFDMUIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1lBQzFCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtTQUNuQixDQUFDLENBQUE7UUFFRixhQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7WUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQ3ZCLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELEtBQUssQ0FBQyxPQUFPO1FBQ1gsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ25DLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQzNCLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUVsQixDQUFDO0lBSUQsTUFBTSxFQUFFO0lBSVIsQ0FBQztJQU1ELGlCQUFpQixFQUFFLEtBQUs7UUFDdEIsTUFBTSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDM0IsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUE7SUFDMUIsQ0FBQztJQUdELEtBQUssQ0FBQyxjQUFjO1FBQ2xCLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7UUFDdEMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxhQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUMvRCxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ2pDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBQ3ZFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBQSxnQkFBUyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLE1BQU0sRUFBRSxJQUFJO2FBQ2IsQ0FBQyxDQUFBO1NBR0g7YUFBTTtZQUNMLEVBQUUsQ0FBQyxTQUFTLENBQUM7Z0JBQ1gsS0FBSyxFQUFFLE9BQU87Z0JBQ2QsT0FBTyxFQUFFLEdBQUc7YUFDYixDQUFDLENBQUE7U0FDSDtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsQ0FBWTtRQUNqQixNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQTtRQUM5QixNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNqQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUMxRSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsTUFBTTtZQUNOLGVBQWUsRUFBRSxNQUFNO1NBQ3hCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFHRCxNQUFNLENBQUMsQ0FBWTtRQUNqQixNQUFNLEdBQUcsR0FBRyx3QkFBd0IsR0FBRyxJQUFBLHVCQUFnQixFQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBQ2xLLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakIsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUc7U0FDSixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbWluaXByb2dyYW0vcGFnZXMvaW5kZXgvZGV2cy9kZXZzLmpzXG5pbXBvcnQgeyBPYmplY3RUb1N0cnF1ZXJ5LCBwYXJzZVRpbWUgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbFwiXG5pbXBvcnQgYXBpIGZyb20gXCIuLi8uLi8uLi91dGlscy9hcGlcIlxuUGFnZSh7XG5cbiAgLyoqXG4gICAqIOmhtemdoueahOWIneWni+aVsOaNrlxuICAgKi9cblxuICBkYXRhOiB7XG4gICAgbWFjOiAnJyxcbiAgICBwaWQ6ICcnLFxuICAgIG1vdW50RGV2OiBcIlwiLFxuICAgIHJlc3VsdDoge30gYXMgVWFydC5xdWVyeVJlc3VsdFNhdmUsXG4gICAgZmlsdGVyOiAnJyxcbiAgICBpbnRlcnZhbDogMCBhcyBhbnksXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIFR5cGU6ICcnXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yqg6L29XG4gICAqL1xuICBvbkxvYWQ6IGZ1bmN0aW9uIChvcHRpb25zOiB7IG1vdW50RGV2OiBhbnk7IG1hYzogYW55OyBEZXZNYWM6IGFueTsgcGlkOiBhbnk7IHByb3RvY29sOiBhbnk7IFR5cGU6IGFueSB9KSB7XG4gICAgd3guc2V0TmF2aWdhdGlvbkJhclRpdGxlKHsgdGl0bGU6IG9wdGlvbnMubW91bnREZXYgfHwgb3B0aW9ucy5tYWMgfHwgJycgfSlcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgbWFjOiBvcHRpb25zLkRldk1hYyxcbiAgICAgIHBpZDogb3B0aW9ucy5waWQsXG4gICAgICBwcm90b2NvbDogb3B0aW9ucy5wcm90b2NvbCxcbiAgICAgIG1vdW50RGV2OiBvcHRpb25zLm1vdW50RGV2LFxuICAgICAgVHlwZTogb3B0aW9ucy5UeXBlXG4gICAgfSlcblxuICAgIGFwaS5vbk1lc3NhZ2Uob3B0aW9ucy5EZXZNYWMgKyBvcHRpb25zLnBpZCwgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ+iOt+WPlui/kOihjOaVsOaNrjonK29wdGlvbnMuRGV2TWFjICsgb3B0aW9ucy5waWQpO1xuICAgICAgdGhpcy5HZXREZXZzUnVuSW5mbygpXG4gICAgfSlcbiAgfSxcbiAgYXN5bmMgb25SZWFkeSgpIHtcbiAgICB3eC5zaG93TG9hZGluZyh7IHRpdGxlOiAn6I635Y+W6L+Q6KGM5pWw5o2uJyB9KVxuICAgIGF3YWl0IHRoaXMuR2V0RGV2c1J1bkluZm8oKVxuICAgIHd4LmhpZGVMb2FkaW5nKClcbiAgICBcbiAgfSxcbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5pi+56S6XG4gICAqL1xuICBvblNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAvKiB0aGlzLnNldERhdGEoe1xuICAgICAgaW50ZXJ2YWw6IHNldEludGVydmFsKCgpID0+IHRoaXMuR2V0RGV2c1J1bkluZm8oKSwgNTAwMClcbiAgICB9KSAqL1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIOmhtemdouebuOWFs+S6i+S7tuWkhOeQhuWHveaVsC0t55uR5ZCs55So5oi35LiL5ouJ5Yqo5L2cXG4gICAqL1xuICBvblB1bGxEb3duUmVmcmVzaDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IHRoaXMuR2V0RGV2c1J1bkluZm8oKVxuICAgIHd4LnN0b3BQdWxsRG93blJlZnJlc2goKVxuICB9LFxuXG5cbiAgYXN5bmMgR2V0RGV2c1J1bkluZm8oKSB7XG4gICAgY29uc3QgeyBtYWMsIHBpZCwgZmlsdGVyIH0gPSB0aGlzLmRhdGFcbiAgICBjb25zdCB7IGNvZGUsIGRhdGEsIG1zZyB9ID0gYXdhaXQgYXBpLmdldFRlcm1pbmFsRGF0YShtYWMsIHBpZClcbiAgICBpZiAoY29kZSAmJiBkYXRhLnJlc3VsdCkge1xuICAgICAgY29uc3QgcmVnU3RyID0gbmV3IFJlZ0V4cChmaWx0ZXIpXG4gICAgICBkYXRhLnJlc3VsdCA9IGRhdGEucmVzdWx0LmZpbHRlcihlbCA9PiAhZmlsdGVyIHx8IHJlZ1N0ci50ZXN0KGVsLm5hbWUpKVxuICAgICAgZGF0YS50aW1lID0gcGFyc2VUaW1lKGRhdGEudGltZSlcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIHJlc3VsdDogZGF0YVxuICAgICAgfSlcbiAgICAgIC8vXG5cbiAgICB9IGVsc2Uge1xuICAgICAgd3guc2hvd01vZGFsKHtcbiAgICAgICAgdGl0bGU6ICdFcnJvcicsXG4gICAgICAgIGNvbnRlbnQ6IG1zZ1xuICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIC8vIOWIt+mAieWPguaVsFxuICBmaWx0ZXIoZTogdmFudEV2ZW50KSB7XG4gICAgY29uc3QgZmlsdGVyID0gZS5kZXRhaWwuZmlsdGVyXG4gICAgY29uc3QgcmVnU3RyID0gbmV3IFJlZ0V4cChmaWx0ZXIpXG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5kYXRhLnJlc3VsdC5yZXN1bHQ/LmZpbHRlcihlbCA9PiByZWdTdHIudGVzdChlbC5uYW1lKSlcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgZmlsdGVyLFxuICAgICAgXCJyZXN1bHQucmVzdWx0XCI6IHJlc3VsdFxuICAgIH0pXG4gIH0sXG5cbiAgLy8g5a+86Iiq5Yiw5Zu+6KGoXG4gIHRvbGluZShlOiB2YW50RXZlbnQpIHtcbiAgICBjb25zdCB1cmwgPSAnL3BhZ2VzL2luZGV4L2xpbmUvbGluZScgKyBPYmplY3RUb1N0cnF1ZXJ5KHsgbmFtZTogZS5kZXRhaWwubmFtZSwgbWFjOiB0aGlzLmRhdGEubWFjLCBwaWQ6IHRoaXMuZGF0YS5waWQsIHByb3RvY29sOiB0aGlzLmRhdGEucHJvdG9jb2wsIHR5cGU6ICd3eCcgfSlcbiAgICBjb25zb2xlLmxvZyh1cmwpO1xuXG4gICAgd3gubmF2aWdhdGVUbyh7XG4gICAgICB1cmxcbiAgICB9KVxuICB9LFxufSkiXX0=
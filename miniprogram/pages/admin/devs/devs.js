"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../../utils/util");
const api_1 = require("../../../utils/api");
Page({
    data: {
        mac: '',
        pid: '',
        mountDev: "",
        result: {},
        filter: '',
        interval: 0,
        protocol: '',
        Type: ''
    },
    onLoad: function (options) {
        wx.setNavigationBarTitle({ title: options.mountDev || options.mac || '' });
        this.setData({
            mac: options.DevMac,
            pid: options.pid,
            protocol: options.protocol,
            mountDev: options.mountDev,
            Type: options.Type
        });
        api_1.default.onMessage(options.DevMac + options.pid, () => {
            console.log('获取运行数据:' + options.DevMac + options.pid);
            this.GetDevsRunInfo();
        });
    },
    async onReady() {
        wx.showLoading({ title: '获取运行数据' });
        await this.GetDevsRunInfo();
        wx.hideLoading();
    },
    onShow: function () {
    },
    onPullDownRefresh: async function () {
        await this.GetDevsRunInfo();
        wx.stopPullDownRefresh();
    },
    async GetDevsRunInfo() {
        const { mac, pid, filter } = this.data;
        const { code, data, msg } = await api_1.default.getTerminalData(mac, pid);
        if (code && data.result) {
            const regStr = new RegExp(filter);
            data.result = data.result.filter(el => !filter || regStr.test(el.name));
            data.time = (0, util_1.parseTime)(data.time);
            this.setData({
                result: data
            });
        }
        else {
            wx.showModal({
                title: 'Error',
                content: msg
            });
        }
    },
    filter(e) {
        const filter = e.detail.filter;
        const regStr = new RegExp(filter);
        const result = this.data.result.result?.filter(el => regStr.test(el.name));
        this.setData({
            filter,
            "result.result": result
        });
    },
    toline(e) {
        const url = '/pages/index/line/line' + (0, util_1.ObjectToStrquery)({ name: e.detail.name, mac: this.data.mac, pid: this.data.pid, protocol: this.data.protocol, type: 'wx' });
        console.log(url);
        wx.navigateTo({
            url
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRldnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw4Q0FBaUU7QUFDakUsNENBQW9DO0FBQ3BDLElBQUksQ0FBQztJQU1ILElBQUksRUFBRTtRQUNKLEdBQUcsRUFBRSxFQUFFO1FBQ1AsR0FBRyxFQUFFLEVBQUU7UUFDUCxRQUFRLEVBQUUsRUFBRTtRQUNaLE1BQU0sRUFBRSxFQUEwQjtRQUNsQyxNQUFNLEVBQUUsRUFBRTtRQUNWLFFBQVEsRUFBRSxDQUFRO1FBQ2xCLFFBQVEsRUFBRSxFQUFFO1FBQ1osSUFBSSxFQUFFLEVBQUU7S0FDVDtJQUtELE1BQU0sRUFBRSxVQUFVLE9BQXFGO1FBQ3JHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUMxRSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNO1lBQ25CLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztZQUNoQixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7WUFDMUIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1lBQzFCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtTQUNuQixDQUFDLENBQUE7UUFFRixhQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7WUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQ3ZCLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELEtBQUssQ0FBQyxPQUFPO1FBQ1gsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ25DLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQzNCLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUVsQixDQUFDO0lBSUQsTUFBTSxFQUFFO0lBSVIsQ0FBQztJQU1ELGlCQUFpQixFQUFFLEtBQUs7UUFDdEIsTUFBTSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDM0IsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUE7SUFDMUIsQ0FBQztJQUdELEtBQUssQ0FBQyxjQUFjO1FBQ2xCLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7UUFDdEMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxhQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUMvRCxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDeEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7WUFDdkUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFBLGdCQUFTLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsTUFBTSxFQUFFLElBQUk7YUFDYixDQUFDLENBQUE7UUFHSixDQUFDO2FBQU0sQ0FBQztZQUNOLEVBQUUsQ0FBQyxTQUFTLENBQUM7Z0JBQ1gsS0FBSyxFQUFFLE9BQU87Z0JBQ2QsT0FBTyxFQUFFLEdBQUc7YUFDYixDQUFDLENBQUE7UUFDSixDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxDQUFZO1FBQ2pCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFBO1FBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQzFFLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxNQUFNO1lBQ04sZUFBZSxFQUFFLE1BQU07U0FDeEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUdELE1BQU0sQ0FBQyxDQUFZO1FBQ2pCLE1BQU0sR0FBRyxHQUFHLHdCQUF3QixHQUFHLElBQUEsdUJBQWdCLEVBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7UUFDbEssT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVqQixFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osR0FBRztTQUNKLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtaW5pcHJvZ3JhbS9wYWdlcy9pbmRleC9kZXZzL2RldnMuanNcbmltcG9ydCB7IE9iamVjdFRvU3RycXVlcnksIHBhcnNlVGltZSB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsXCJcbmltcG9ydCBhcGkgZnJvbSBcIi4uLy4uLy4uL3V0aWxzL2FwaVwiXG5QYWdlKHtcblxuICAvKipcbiAgICog6aG16Z2i55qE5Yid5aeL5pWw5o2uXG4gICAqL1xuXG4gIGRhdGE6IHtcbiAgICBtYWM6ICcnLFxuICAgIHBpZDogJycsXG4gICAgbW91bnREZXY6IFwiXCIsXG4gICAgcmVzdWx0OiB7fSBhcyBVYXJ0LnF1ZXJ5UmVzdWx0U2F2ZSxcbiAgICBmaWx0ZXI6ICcnLFxuICAgIGludGVydmFsOiAwIGFzIGFueSxcbiAgICBwcm90b2NvbDogJycsXG4gICAgVHlwZTogJydcbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliqDovb1cbiAgICovXG4gIG9uTG9hZDogZnVuY3Rpb24gKG9wdGlvbnM6IHsgbW91bnREZXY6IGFueTsgbWFjOiBhbnk7IERldk1hYzogYW55OyBwaWQ6IGFueTsgcHJvdG9jb2w6IGFueTsgVHlwZTogYW55IH0pIHtcbiAgICB3eC5zZXROYXZpZ2F0aW9uQmFyVGl0bGUoeyB0aXRsZTogb3B0aW9ucy5tb3VudERldiB8fCBvcHRpb25zLm1hYyB8fCAnJyB9KVxuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBtYWM6IG9wdGlvbnMuRGV2TWFjLFxuICAgICAgcGlkOiBvcHRpb25zLnBpZCxcbiAgICAgIHByb3RvY29sOiBvcHRpb25zLnByb3RvY29sLFxuICAgICAgbW91bnREZXY6IG9wdGlvbnMubW91bnREZXYsXG4gICAgICBUeXBlOiBvcHRpb25zLlR5cGVcbiAgICB9KVxuXG4gICAgYXBpLm9uTWVzc2FnZShvcHRpb25zLkRldk1hYyArIG9wdGlvbnMucGlkLCAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygn6I635Y+W6L+Q6KGM5pWw5o2uOicrb3B0aW9ucy5EZXZNYWMgKyBvcHRpb25zLnBpZCk7XG4gICAgICB0aGlzLkdldERldnNSdW5JbmZvKClcbiAgICB9KVxuICB9LFxuICBhc3luYyBvblJlYWR5KCkge1xuICAgIHd4LnNob3dMb2FkaW5nKHsgdGl0bGU6ICfojrflj5bov5DooYzmlbDmja4nIH0pXG4gICAgYXdhaXQgdGhpcy5HZXREZXZzUnVuSW5mbygpXG4gICAgd3guaGlkZUxvYWRpbmcoKVxuICAgIFxuICB9LFxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLmmL7npLpcbiAgICovXG4gIG9uU2hvdzogZnVuY3Rpb24gKCkge1xuICAgIC8qIHRoaXMuc2V0RGF0YSh7XG4gICAgICBpbnRlcnZhbDogc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5HZXREZXZzUnVuSW5mbygpLCA1MDAwKVxuICAgIH0pICovXG4gIH0sXG5cblxuICAvKipcbiAgICog6aG16Z2i55u45YWz5LqL5Lu25aSE55CG5Ye95pWwLS3nm5HlkKznlKjmiLfkuIvmi4nliqjkvZxcbiAgICovXG4gIG9uUHVsbERvd25SZWZyZXNoOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgYXdhaXQgdGhpcy5HZXREZXZzUnVuSW5mbygpXG4gICAgd3guc3RvcFB1bGxEb3duUmVmcmVzaCgpXG4gIH0sXG5cblxuICBhc3luYyBHZXREZXZzUnVuSW5mbygpIHtcbiAgICBjb25zdCB7IG1hYywgcGlkLCBmaWx0ZXIgfSA9IHRoaXMuZGF0YVxuICAgIGNvbnN0IHsgY29kZSwgZGF0YSwgbXNnIH0gPSBhd2FpdCBhcGkuZ2V0VGVybWluYWxEYXRhKG1hYywgcGlkKVxuICAgIGlmIChjb2RlICYmIGRhdGEucmVzdWx0KSB7XG4gICAgICBjb25zdCByZWdTdHIgPSBuZXcgUmVnRXhwKGZpbHRlcilcbiAgICAgIGRhdGEucmVzdWx0ID0gZGF0YS5yZXN1bHQuZmlsdGVyKGVsID0+ICFmaWx0ZXIgfHwgcmVnU3RyLnRlc3QoZWwubmFtZSkpXG4gICAgICBkYXRhLnRpbWUgPSBwYXJzZVRpbWUoZGF0YS50aW1lKVxuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgcmVzdWx0OiBkYXRhXG4gICAgICB9KVxuICAgICAgLy9cblxuICAgIH0gZWxzZSB7XG4gICAgICB3eC5zaG93TW9kYWwoe1xuICAgICAgICB0aXRsZTogJ0Vycm9yJyxcbiAgICAgICAgY29udGVudDogbXNnXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbiAgLy8g5Yi36YCJ5Y+C5pWwXG4gIGZpbHRlcihlOiB2YW50RXZlbnQpIHtcbiAgICBjb25zdCBmaWx0ZXIgPSBlLmRldGFpbC5maWx0ZXJcbiAgICBjb25zdCByZWdTdHIgPSBuZXcgUmVnRXhwKGZpbHRlcilcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmRhdGEucmVzdWx0LnJlc3VsdD8uZmlsdGVyKGVsID0+IHJlZ1N0ci50ZXN0KGVsLm5hbWUpKVxuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBmaWx0ZXIsXG4gICAgICBcInJlc3VsdC5yZXN1bHRcIjogcmVzdWx0XG4gICAgfSlcbiAgfSxcblxuICAvLyDlr7zoiKrliLDlm77ooahcbiAgdG9saW5lKGU6IHZhbnRFdmVudCkge1xuICAgIGNvbnN0IHVybCA9ICcvcGFnZXMvaW5kZXgvbGluZS9saW5lJyArIE9iamVjdFRvU3RycXVlcnkoeyBuYW1lOiBlLmRldGFpbC5uYW1lLCBtYWM6IHRoaXMuZGF0YS5tYWMsIHBpZDogdGhpcy5kYXRhLnBpZCwgcHJvdG9jb2w6IHRoaXMuZGF0YS5wcm90b2NvbCwgdHlwZTogJ3d4JyB9KVxuICAgIGNvbnNvbGUubG9nKHVybCk7XG5cbiAgICB3eC5uYXZpZ2F0ZVRvKHtcbiAgICAgIHVybFxuICAgIH0pXG4gIH0sXG59KSJdfQ==
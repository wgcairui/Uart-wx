"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../../utils/api");
Page({
    data: {
        id: '',
        ids: [],
        devType: 'UPS',
        devTypes: [{ text: 'UPS', value: 'UPS' }, { text: '空调', value: '空调' }, { text: '电量仪', value: '电量仪' }, { text: '温湿度', value: '温湿度' }],
        devModal: '',
        devModals: [],
        devModesMap: new Map(),
        devProtocol: '',
        devProtocols: [],
        pid: 1
    },
    onLoad: function () {
        this.devTypeChange();
    },
    async devTypeChange() {
        const { data } = await api_1.default.getDevTypes(this.data.devType);
        const devModals = data.map(el => ({ text: el.DevModel, value: el.DevModel }));
        this.setData({
            devModals,
            devProtocols: [],
            devModesMap: new Map(data.map(el => [el.DevModel, el]))
        });
    },
    async devModalChange() {
        const { devModesMap, devModal } = this.data;
        const devProtocols = devModesMap.get(devModal)?.Protocols.map(el => ({ text: el.Protocol, value: el.Protocol }));
        this.setData({
            devProtocols
        });
    },
    async scanMac() {
        const scanResult = await wx.scanCode({});
        this.setData({
            id: scanResult.result
        });
        this.scanRequst();
    },
    async scanRequst() {
        wx.showLoading({ title: '查询中' });
        const r = await api_1.default.getRegisterDev(this.data.id);
        wx.hideLoading();
        if (r.code && r.data) {
            wx.showModal({
                title: '重复注册',
                content: `设备${r.data.id}/${r.data.mountDev}已被注册`
            });
        }
        else
            this.setData({
                ids: [...new Set([...this.data.ids, this.data.id])]
            });
    },
    rmid(event) {
        const mac = event.currentTarget.dataset.key;
        wx.showModal({
            title: '删除Id',
            content: `确定删除Id:${mac} ??`,
            success: (res) => {
                if (res.confirm) {
                    this.setData({
                        ids: this.data.ids.filter(el => el !== mac)
                    });
                }
            }
        });
    },
    async submit() {
        const { ids, pid, devModal, devProtocol, devType } = this.data;
        if (ids.length === 0 || !pid || !devProtocol || !devModal || !devType) {
            wx.showModal({
                title: '校验错误',
                content: "缺少参数"
            });
            return;
        }
        const mountDev = {
            Type: devType,
            mountDev: devModal,
            pid,
            protocol: devProtocol
        };
        const res = await wx.showModal({
            title: '登记设备',
            content: `确认参数[${mountDev.mountDev}]/[${mountDev.protocol}]/[${mountDev.pid}] !!!`
        });
        if (res.confirm) {
            wx.showLoading({ title: '正在登记' });
            const r = await api_1.default.addRegisterDev(ids, mountDev);
            wx.hideLoading();
            if (r.code) {
                wx.showModal({
                    title: 'success',
                    content: `成功注册设备${r.data.length}个`
                });
                this.setData({
                    id: '',
                    ids: []
                });
            }
        }
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,
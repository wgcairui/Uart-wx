"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../../utils/api");
Page({
    data: {
        mac: '',
        bind: '',
        dtus: [],
        nodes: [],
        radio: ''
    },
    onLoad: function () {
        this.getNodes();
    },
    async scanMac() {
        const scanResult = await wx.scanCode({});
        this.setData({
            mac: scanResult.result
        });
        this.addDtus();
    },
    scanRequst() {
        this.addDtus();
    },
    async addDtus() {
        const { mac, bind, radio } = this.data;
        if (this.data.dtus.findIndex(el => el.DevMac === mac) !== -1) {
            console.log('重复扫描');
        }
        else {
            this.setData({
                mac,
                dtus: [...this.data.dtus, { DevMac: mac, bindDev: bind, mountNode: radio }]
            });
            const dtulen = this.data.dtus.length;
            for (let node of this.data.nodes) {
                if (node.MaxConnections - (node.count || 0) > dtulen) {
                    this.setData({
                        radio: node.Name
                    });
                    break;
                }
            }
        }
    },
    onChange_Node(event) {
        console.log(event);
    },
    rmDtu(event) {
        const mac = event.currentTarget.dataset.key;
        wx.showModal({
            title: '删除dtu',
            content: `确定删除dtu:${mac} ??`,
            success: (res) => {
                if (res.confirm) {
                    this.setData({
                        dtus: this.data.dtus.filter(el => el.DevMac !== mac)
                    });
                }
            }
        });
    },
    async getNodes() {
        const { data } = await api_1.default.Nodes();
        this.setData({
            nodes: data,
            radio: data[0].Name
        });
    },
    changeNode(event) {
        this.setData({
            radio: event.detail,
        });
    },
    selectNode(event) {
        const item = event.currentTarget.dataset.item;
        this.setData({
            radio: item.Name
        });
    },
    submit() {
        const { dtus, radio } = this.data;
        wx.showModal({
            title: '提交核对',
            content: `本次提交的dtu数目:${dtus.length},挂载的节点为:${radio},`,
            success: async () => {
                const all = await Promise.all(dtus.map(el => api_1.default.addRegisterTerminal(el.DevMac, el.mountNode)));
                if (all.length === dtus.length) {
                    wx.showModal({
                        title: '提交成功',
                        content: `成功提交[${all.length}] 个设备`
                    });
                    this.getNodes();
                    this.setData({
                        dtus: [],
                        mac: ''
                    });
                }
                else {
                    wx.showModal({
                        title: '提交错误',
                        content: '提交错误'
                    });
                }
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWdpc3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRDQUFxQztBQUdyQyxJQUFJLENBQUM7SUFLSCxJQUFJLEVBQUU7UUFDSixHQUFHLEVBQUUsRUFBRTtRQUNQLElBQUksRUFBRSxFQUFFO1FBQ1IsSUFBSSxFQUFFLEVBQTZCO1FBQ25DLEtBQUssRUFBRSxFQUF1QjtRQUM5QixLQUFLLEVBQUUsRUFBRTtLQUNWO0lBS0QsTUFBTSxFQUFFO1FBQ04sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQ2pCLENBQUM7SUFHRCxLQUFLLENBQUMsT0FBTztRQUNYLE1BQU0sVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUV4QyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsR0FBRyxFQUFFLFVBQVUsQ0FBQyxNQUFNO1NBQ3ZCLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNoQixDQUFDO0lBV0QsVUFBVTtRQVVSLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNoQixDQUFDO0lBR0QsS0FBSyxDQUFDLE9BQU87UUFDWCxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFBO1FBQ3RDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUM1RCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3JCO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLEdBQUc7Z0JBQ0gsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElB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Q1gsS0FBSyxFQUFFLE1BQU07d0JBQ2IsT0FBTyxFQUFFLFFBQVEsR0FBRyxDQUFDLE1BQU0sT0FBTztxQkFDbkMsQ0FBQyxDQUFBO29CQUNGLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtvQkFDZixJQUFJLENBQUMsT0FBTyxDQUFDO3dCQUNYLElBQUksRUFBRSxFQUFFO3dCQUNSLEdBQUcsRUFBRSxFQUFFO3FCQUNSLENBQUMsQ0FBQTtpQkFDSDtxQkFBTTtvQkFDTCxFQUFFLENBQUMsU0FBUyxDQUFDO3dCQUNYLEtBQUssRUFBRSxNQUFNO3dCQUNiLE9BQU8sRUFBRSxNQUFNO3FCQUNoQixDQUFDLENBQUE7aUJBQ0g7WUFDSCxDQUFDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgZnJvbSBcIi4uLy4uLy4uL3V0aWxzL2FwaVwiO1xuXG4vLyBtaW5pcHJvZ3JhbS9wYWdlcy9hZG1pbi9yZWdpc3Rlci9yZWdpc3Rlci5qc1xuUGFnZSh7XG5cbiAgLyoqXG4gICAqIOmhtemdoueahOWIneWni+aVsOaNrlxuICAgKi9cbiAgZGF0YToge1xuICAgIG1hYzogJycsXG4gICAgYmluZDogJycsXG4gICAgZHR1czogW10gYXMgVWFydC5SZWdpc3RlclRlcm1pbmFsW10sXG4gICAgbm9kZXM6IFtdIGFzIFVhcnQuTm9kZUNsaWVudFtdLFxuICAgIHJhZGlvOiAnJ1xuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWKoOi9vVxuICAgKi9cbiAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5nZXROb2RlcygpXG4gIH0sXG5cbiAgLy8g6LCD55So5b6u5L+hYXBp77yM5omr5o+PRFRV5p2h5b2i56CBXG4gIGFzeW5jIHNjYW5NYWMoKSB7XG4gICAgY29uc3Qgc2NhblJlc3VsdCA9IGF3YWl0IHd4LnNjYW5Db2RlKHt9KVxuICAgIC8vY29uc3QgeyBjb2RlLCBkYXRhIH0gPSBhd2FpdCBhcGkuZ2V0VGVybWluYWwoc2NhblJlc3VsdC5yZXN1bHQpXG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIG1hYzogc2NhblJlc3VsdC5yZXN1bHRcbiAgICB9KVxuICAgIHRoaXMuYWRkRHR1cygpXG4gIH0sXG5cbiAgLyogYXN5bmMgc2NhbkJpbmQoKSB7XG4gICAgY29uc3Qgc2NhblJlc3VsdCA9IGF3YWl0IHd4LnNjYW5Db2RlKHt9KVxuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBiaW5kOiBzY2FuUmVzdWx0LnJlc3VsdFxuICAgIH0pXG4gICAgaWYgKHRoaXMuZGF0YS5tYWMgJiYgdGhpcy5kYXRhLmJpbmQpIHRoaXMuYWRkRHR1cygpXG4gIH0sICovXG5cbiAgLy8g5Yqg5YWlZHR1c1xuICBzY2FuUmVxdXN0KCkge1xuICAgIC8qIGlmICghdGhpcy5kYXRhLmJpbmQpIHtcbiAgICAgIHd4LnNob3dNb2RhbCh7XG4gICAgICAgIHRpdGxlOiAn5Y+C5pWw5LiN5a6M5pW0JyxcbiAgICAgICAgY29udGVudDogJ+iuvuWkh0lE6L+Y5pyq5aGr5YaZLOaYr+WQpua3u+WKoD8/JyxcbiAgICAgICAgc3VjY2VzczogKGUpID0+IHtcbiAgICAgICAgICBpZiAoZS5jb25maXJtKSB0aGlzLmFkZER0dXMoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSAqL1xuICAgIHRoaXMuYWRkRHR1cygpXG4gIH0sXG5cbiAgLy8gYWRkXG4gIGFzeW5jIGFkZER0dXMoKSB7XG4gICAgY29uc3QgeyBtYWMsIGJpbmQsIHJhZGlvIH0gPSB0aGlzLmRhdGFcbiAgICBpZiAodGhpcy5kYXRhLmR0dXMuZmluZEluZGV4KGVsID0+IGVsLkRldk1hYyA9PT0gbWFjKSAhPT0gLTEpIHtcbiAgICAgIGNvbnNvbGUubG9nKCfph43lpI3miavmj48nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgbWFjLFxuICAgICAgICBkdHVzOiBbLi4udGhpcy5kYXRhLmR0dXMsIHsgRGV2TWFjOiBtYWMsIGJpbmREZXY6IGJpbmQsIG1vdW50Tm9kZTogcmFkaW8gfV1cbiAgICAgIH0pXG4gICAgICBjb25zdCBkdHVsZW4gPSB0aGlzLmRhdGEuZHR1cy5sZW5ndGhcbiAgICAgIGZvciAobGV0IG5vZGUgb2YgdGhpcy5kYXRhLm5vZGVzKSB7XG4gICAgICAgIGlmIChub2RlLk1heENvbm5lY3Rpb25zIC0gKG5vZGUuY291bnQgfHwgMCkgPiBkdHVsZW4pIHtcbiAgICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgICAgcmFkaW86IG5vZGUuTmFtZVxuICAgICAgICAgIH0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvLyDpgInmi6noioLngrlcbiAgb25DaGFuZ2VfTm9kZShldmVudDogdmFudEV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQpO1xuXG4gIH0sXG5cbiAgLy8g5Yig6Zmk6YCJ5oup55qERFRVXG4gIHJtRHR1KGV2ZW50OiB2YW50RXZlbnQpIHtcbiAgICBjb25zdCBtYWMgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQua2V5XG4gICAgd3guc2hvd01vZGFsKHtcbiAgICAgIHRpdGxlOiAn5Yig6ZmkZHR1JyxcbiAgICAgIGNvbnRlbnQ6IGDnoa7lrprliKDpmaRkdHU6JHttYWN9ID8/YCxcbiAgICAgIHN1Y2Nlc3M6IChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5jb25maXJtKSB7XG4gICAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICAgIGR0dXM6IHRoaXMuZGF0YS5kdHVzLmZpbHRlcihlbCA9PiBlbC5EZXZNYWMgIT09IG1hYylcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfSxcblxuICAvLyDojrflj5boioLngrnliJfooahcbiAgYXN5bmMgZ2V0Tm9kZXMoKSB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBhcGkuTm9kZXMoKVxuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBub2RlczogZGF0YSxcbiAgICAgIHJhZGlvOiBkYXRhWzBdLk5hbWVcbiAgICB9KVxuICB9LFxuICAvLyDlj5jmm7TpgInmi6noioLngrlcbiAgY2hhbmdlTm9kZShldmVudDogdmFudEV2ZW50KSB7XG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIHJhZGlvOiBldmVudC5kZXRhaWwsXG4gICAgfSk7XG4gIH0sXG5cbiAgLy8g6YCJ5oup6IqC54K5XG4gIHNlbGVjdE5vZGUoZXZlbnQ6IHZhbnRFdmVudCkge1xuICAgIGNvbnN0IGl0ZW06IFVhcnQuTm9kZUNsaWVudCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pdGVtXG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIHJhZGlvOiBpdGVtLk5hbWVcbiAgICB9KTtcbiAgfSxcbiAgLy8g5o+Q5LqkXG4gIHN1Ym1pdCgpIHtcbiAgICBjb25zdCB7IGR0dXMsIHJhZGlvIH0gPSB0aGlzLmRhdGFcbiAgICB3eC5zaG93TW9kYWwoe1xuICAgICAgdGl0bGU6ICfmj5DkuqTmoLjlr7knLFxuICAgICAgY29udGVudDogYOacrOasoeaPkOS6pOeahGR0deaVsOebrjoke2R0dXMubGVuZ3RofSzmjILovb3nmoToioLngrnkuLo6JHtyYWRpb30sYCxcbiAgICAgIHN1Y2Nlc3M6IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgYWxsID0gYXdhaXQgUHJvbWlzZS5hbGwoZHR1cy5tYXAoZWwgPT4gYXBpLmFkZFJlZ2lzdGVyVGVybWluYWwoZWwuRGV2TWFjLCBlbC5tb3VudE5vZGUpKSlcbiAgICAgICAgaWYgKGFsbC5sZW5ndGggPT09IGR0dXMubGVuZ3RoKSB7XG4gICAgICAgICAgd3guc2hvd01vZGFsKHtcbiAgICAgICAgICAgIHRpdGxlOiAn5o+Q5Lqk5oiQ5YqfJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGDmiJDlip/mj5DkuqRbJHthbGwubGVuZ3RofV0g5Liq6K6+5aSHYFxuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5nZXROb2RlcygpXG4gICAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICAgIGR0dXM6IFtdLFxuICAgICAgICAgICAgbWFjOiAnJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd3guc2hvd01vZGFsKHtcbiAgICAgICAgICAgIHRpdGxlOiAn5o+Q5Lqk6ZSZ6K+vJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICfmj5DkuqTplJnor68nXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn0pIl19
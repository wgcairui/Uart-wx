"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../../utils/api");
Page({
    data: {
        mac: '',
        bind: '',
        dtus: [],
        nodes: [],
        radio: ''
    },
    onLoad: function () {
        this.getNodes();
    },
    async scanMac() {
        const scanResult = await wx.scanCode({});
        this.setData({
            mac: scanResult.result
        });
        this.addDtus();
    },
    scanRequst() {
        this.addDtus();
    },
    async addDtus() {
        const { mac, bind, radio } = this.data;
        if (mac.length !== 12) {
            wx.showModal({
                content: `${mac}长度异常,请核对是否正确??`
            });
        }
        if (this.data.dtus.findIndex(el => el.DevMac === mac) !== -1) {
            console.log('重复扫描');
            return;
        }
        this.setData({
            mac,
            dtus: [{ DevMac: mac, bindDev: bind, mountNode: radio }, ...this.data.dtus]
        });
        const dtulen = this.data.dtus.length;
        for (let node of this.data.nodes) {
            if (node.MaxConnections - (node.count || 0) > dtulen) {
                this.setData({
                    radio: node.Name
                });
                break;
            }
        }
    },
    onChange_Node(event) {
        console.log(event);
    },
    rmDtu(event) {
        const mac = event.currentTarget.dataset.key;
        wx.showModal({
            title: '删除dtu',
            content: `确定删除dtu:${mac} ??`,
            success: (res) => {
                if (res.confirm) {
                    this.setData({
                        dtus: this.data.dtus.filter(el => el.DevMac !== mac)
                    });
                }
            }
        });
    },
    async getNodes() {
        const { data } = await api_1.default.Nodes();
        this.setData({
            nodes: data,
            radio: data[0].Name
        });
    },
    changeNode(event) {
        this.setData({
            radio: event.detail,
        });
    },
    selectNode(event) {
        const item = event.currentTarget.dataset.item;
        this.setData({
            radio: item.Name
        });
    },
    submit() {
        const { dtus, radio } = this.data;
        wx.showModal({
            title: '提交核对',
            content: `本次提交的dtu数目:${dtus.length},挂载的节点为:${radio},`,
            success: async () => {
                const all = await Promise.all(dtus.map(el => api_1.default.addRegisterTerminal(el.DevMac, el.mountNode)));
                if (all.length === dtus.length) {
                    wx.showModal({
                        title: '提交成功',
                        content: `成功提交[${all.length}] 个设备`
                    });
                    this.getNodes();
                    this.setData({
                        dtus: [],
                        mac: ''
                    });
                }
                else {
                    wx.showModal({
                        title: '提交错误',
                        content: '提交错误'
                    });
                }
            }
        });
    },
    copy() {
        const mac = this.data.dtus.map(el => '866' + el.DevMac).join("\n");
        wx.setClipboardData({
            data: mac,
            success() {
                wx.showToast({
                    title: 'success'
                });
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,
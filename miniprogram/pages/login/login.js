"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../utils/api");
Page({
    data: {
        active: 0,
        userInfo: {
            avatarUrl: "https://www.ladishb.com/upload/11122020__LADS108.png",
        },
        tel: '',
        registerloading: false,
        loginloading: false,
        openid: '',
        unionid: '',
        accontUser: '',
        accontPasswd: ''
    },
    onLoad(opt) {
        this.setData({
            openid: opt.openid,
            unionid: opt.unionid
        });
    },
    async getUserInfo() {
        const s = await wx.getUserProfile({
            desc: '用于注册小程序'
        });
        if (s.userInfo) {
            this.setData({
                userInfo: s.userInfo
            });
        }
    },
    tabclick(event) {
        wx.setNavigationBarTitle({ title: event.detail.title });
    },
    async getphonenumber(e) {
        if (!e.detail.encryptedData)
            return;
        wx.showLoading({ title: '获取手机号' });
        const { data } = await api_1.default.getphonenumber({ openid: this.data.openid, encryptedData: e.detail.encryptedData, iv: e.detail.iv });
        const tel = data.phoneNumber;
        this.setData({
            tel,
            "userInfo.nickName": this.data.userInfo.nickName || 'user' + tel.slice(-4)
        });
        wx.hideLoading();
    },
    async register() {
        const tel = this.data.tel;
        if (!tel || !/^(0|86|17951)?(13[0-9]|15[012356789]|166|17[3678]|18[0-9]|14[57])[0-9]{8}$/.test(tel.toString())) {
            wx.showToast({ title: "需要手机号码", icon: "error" });
            return;
        }
        this.setData({ registerloading: true });
        const { userInfo: { nickName, avatarUrl }, unionid, openid } = this.data;
        const { code, msg } = await api_1.default.registerUser({ user: unionid, openid, name: nickName, avanter: avatarUrl || 'http://www.ladishb.com/upload/11122020__LADS108.png', tel });
        this.setData({ registerloading: false });
        if (!code) {
            wx.showModal({ title: msg, icon: "none", duration: 5000 });
        }
        else {
            wx.reLaunch({ url: '/pages/index/index' });
        }
    },
    async login() {
        const { accontUser, accontPasswd, openid, unionid } = this.data;
        this.setData({ loginloading: true });
        const { code, msg } = await api_1.default.userlogin({ avanter: this.data.userInfo.avatarUrl, openid, unionid, user: accontUser, passwd: accontPasswd });
        this.setData({ loginloading: false });
        if (code) {
            wx.reLaunch({ url: '/pages/index/index' });
        }
        else {
            wx.showModal({
                title: '登录错误',
                content: msg,
                success: () => {
                    this.setData({
                        active: 0
                    });
                }
            });
        }
    },
    trial() {
        this.setData({
            accontPasswd: '123456',
            accontUser: 'test'
        });
        this.login();
    }
});
//# sourceMappingURL=data:application/json;base64,
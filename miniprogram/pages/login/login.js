"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../utils/util");
const api_1 = require("../../utils/api");
Page({
    data: {
        userInfo: {
            avatarUrl: "https://www.ladishb.com/upload/5y2wYWklE0usgYG0VwLTdRnc.png",
        },
        tel: '',
        registerloading: false,
        loginloading: false,
        openid: '',
        accontUser: '',
        accontPasswd: ''
    },
    onLoad(opt) {
        this.setData({
            openid: opt.openid
        });
    },
    getUserInfo() {
        wx.getUserProfile({
            desc: '用于注册小程序',
            success: (info) => {
                this.setData({
                    userInfo: info.userInfo
                });
            }
        });
    },
    tabclick(event) {
        wx.setNavigationBarTitle({ title: event.detail.title });
    },
    async getphonenumber(e) {
        if (!e.detail.encryptedData)
            return;
        wx.showLoading({ title: '获取手机号' });
        const telObj = await api_1.default.getphonenumber({ openid: this.data.openid, encryptedData: e.detail.encryptedData, iv: e.detail.iv });
        const tel = telObj.arg.phoneNumber;
        this.setData({
            tel,
            "userInfo.nickName": this.data.userInfo.nickName || 'user' + tel.slice(-4)
        });
        wx.hideLoading();
    },
    async register() {
        await util_1.SubscribeMessage(['注册成功提醒', '设备告警提醒']);
        this.setData({ registerloading: true });
        const { userInfo: { nickName, avatarUrl }, tel } = this.data;
        const { ok, msg } = await api_1.default.registerUser({ user: this.data.openid, name: nickName, avanter: avatarUrl, tel });
        this.setData({ registerloading: false });
        if (!ok) {
            wx.showModal({ title: msg, icon: "none", duration: 5000 });
        }
        else {
            wx.reLaunch({ url: '/pages/index/index' });
        }
    },
    async login() {
        await util_1.SubscribeMessage(['设备告警提醒']);
        const { accontUser, accontPasswd, openid } = this.data;
        this.setData({ loginloading: true });
        const { ok, msg } = await api_1.default.userlogin({ avanter: this.data.userInfo.avatarUrl, openid, user: accontUser, passwd: accontPasswd });
        this.setData({ loginloading: false });
        if (ok) {
            wx.reLaunch({ url: '/pages/index/index' });
        }
        else {
            wx.showModal({
                title: '登录错误',
                content: msg
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUFvRDtBQUVwRCx5Q0FBa0M7QUFDbEMsSUFBSSxDQUFDO0lBSUgsSUFBSSxFQUFFO1FBRUosUUFBUSxFQUFFO1lBQ1IsU0FBUyxFQUFFLDZEQUE2RDtTQUMzQztRQUMvQixHQUFHLEVBQUUsRUFBRTtRQUNQLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLFlBQVksRUFBRSxLQUFLO1FBQ25CLE1BQU0sRUFBRSxFQUFFO1FBQ1YsVUFBVSxFQUFFLEVBQUU7UUFDZCxZQUFZLEVBQUUsRUFBRTtLQUNqQjtJQUNELE1BQU0sQ0FBQyxHQUF3QjtRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO1NBQ25CLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFNRCxXQUFXO1FBQ1QsRUFBRSxDQUFDLGNBQWMsQ0FBQztZQUNoQixJQUFJLEVBQUUsU0FBUztZQUNmLE9BQU8sRUFBRSxDQUFDLElBQThDLEVBQUUsRUFBRTtnQkFDMUQsSUFBSSxDQUFDLE9BQU8sQ0FBQztvQkFDWCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7aUJBQ3hCLENBQUMsQ0FBQTtZQUNKLENBQUM7U0FDRixDQUFDLENBQUE7SUFJSixDQUFDO0lBQ0QsUUFBUSxDQUFDLEtBQWdCO1FBQ3ZCLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7SUFDekQsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBWTtRQUMvQixJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhO1lBQUUsT0FBTTtRQUNuQyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDbEMsTUFBTSxNQUFN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cy91dGlsXCI7XG4vLyBtaW5pcHJvZ3JhbS9wYWdlcy9sb2dpbi9sb2dpbi5qc1xuaW1wb3J0IGFwaSBmcm9tIFwiLi4vLi4vdXRpbHMvYXBpXCI7XG5QYWdlKHtcbiAgLyoqXG4gICAqIOmhtemdoueahOWIneWni+aVsOaNrlxuICAgKi9cbiAgZGF0YToge1xuICAgIC8vIGltZzpcImh0dHBzOi8vd3d3LmxhZGlzaGIuY29tL3VwbG9hZC81eTJ3WVdrbEUwdXNnWUcwVndMVGRSbmMucG5nXCIsXG4gICAgdXNlckluZm86IHtcbiAgICAgIGF2YXRhclVybDogXCJodHRwczovL3d3dy5sYWRpc2hiLmNvbS91cGxvYWQvNXkyd1lXa2xFMHVzZ1lHMFZ3TFRkUm5jLnBuZ1wiLFxuICAgIH0gYXMgV2VjaGF0TWluaXByb2dyYW0uVXNlckluZm8sXG4gICAgdGVsOiAnJyxcbiAgICByZWdpc3RlcmxvYWRpbmc6IGZhbHNlLFxuICAgIGxvZ2lubG9hZGluZzogZmFsc2UsXG4gICAgb3BlbmlkOiAnJyxcbiAgICBhY2NvbnRVc2VyOiAnJyxcbiAgICBhY2NvbnRQYXNzd2Q6ICcnXG4gIH0sXG4gIG9uTG9hZChvcHQ6IHsgb3BlbmlkOiBzdHJpbmc7IH0pIHtcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgb3BlbmlkOiBvcHQub3BlbmlkXG4gICAgfSlcbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliqDovb1cbiAgICovXG4gIC8vIOiOt+WPlueUqOaIt+S/oeaBr1xuICBnZXRVc2VySW5mbygpIHtcbiAgICB3eC5nZXRVc2VyUHJvZmlsZSh7XG4gICAgICBkZXNjOiAn55So5LqO5rOo5YaM5bCP56iL5bqPJyxcbiAgICAgIHN1Y2Nlc3M6IChpbmZvOiB7IHVzZXJJbmZvOiBXZWNoYXRNaW5pcHJvZ3JhbS5Vc2VySW5mbyB9KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgdXNlckluZm86IGluZm8udXNlckluZm9cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICAgIC8qIHRoaXMuc2V0RGF0YSh7XG4gICAgICB1c2VySW5mbzogZS5kZXRhaWwudXNlckluZm9cbiAgICB9KSAqL1xuICB9LFxuICB0YWJjbGljayhldmVudDogdmFudEV2ZW50KSB7XG4gICAgd3guc2V0TmF2aWdhdGlvbkJhclRpdGxlKHsgdGl0bGU6IGV2ZW50LmRldGFpbC50aXRsZSB9KVxuICB9LFxuICAvLyDojrflj5bnlKjmiLfmiYvmnLrlj7fnoIFcbiAgYXN5bmMgZ2V0cGhvbmVudW1iZXIoZTogdmFudEV2ZW50KSB7XG4gICAgaWYgKCFlLmRldGFpbC5lbmNyeXB0ZWREYXRhKSByZXR1cm5cbiAgICB3eC5zaG93TG9hZGluZyh7IHRpdGxlOiAn6I635Y+W5omL5py65Y+3JyB9KVxuICAgIGNvbnN0IHRlbE9iaiA9IGF3YWl0IGFwaS5nZXRwaG9uZW51bWJlcjxhbnk+KHsgb3BlbmlkOiB0aGlzLmRhdGEub3BlbmlkLCBlbmNyeXB0ZWREYXRhOiBlLmRldGFpbC5lbmNyeXB0ZWREYXRhLCBpdjogZS5kZXRhaWwuaXYgfSlcbiAgICBjb25zdCB0ZWwgPSB0ZWxPYmouYXJnLnBob25lTnVtYmVyXG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIHRlbCxcbiAgICAgIFwidXNlckluZm8ubmlja05hbWVcIjogdGhpcy5kYXRhLnVzZXJJbmZvLm5pY2tOYW1lIHx8ICd1c2VyJyArIHRlbC5zbGljZSgtNClcbiAgICB9KVxuICAgIHd4LmhpZGVMb2FkaW5nKClcbiAgfSxcbiAgLy8g5rOo5YaM55So5oi3XG4gIGFzeW5jIHJlZ2lzdGVyKCkge1xuICAgIGF3YWl0IFN1YnNjcmliZU1lc3NhZ2UoWyfms6jlhozmiJDlip/mj5DphpInLCAn6K6+5aSH5ZGK6K2m5o+Q6YaSJ10pXG4gICAgdGhpcy5zZXREYXRhKHsgcmVnaXN0ZXJsb2FkaW5nOiB0cnVlIH0pXG4gICAgY29uc3QgeyB1c2VySW5mbzogeyBuaWNrTmFtZSwgYXZhdGFyVXJsIH0sIHRlbCB9ID0gdGhpcy5kYXRhXG4gICAgY29uc3QgeyBvaywgbXNnIH0gPSBhd2FpdCBhcGkucmVnaXN0ZXJVc2VyKHsgdXNlcjogdGhpcy5kYXRhLm9wZW5pZCwgbmFtZTogbmlja05hbWUsIGF2YW50ZXI6IGF2YXRhclVybCwgdGVsIH0pXG4gICAgdGhpcy5zZXREYXRhKHsgcmVnaXN0ZXJsb2FkaW5nOiBmYWxzZSB9KVxuICAgIGlmICghb2spIHtcbiAgICAgIHd4LnNob3dNb2RhbCh7IHRpdGxlOiBtc2csIGljb246IFwibm9uZVwiLCBkdXJhdGlvbjogNTAwMCB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB3eC5yZUxhdW5jaCh7IHVybDogJy9wYWdlcy9pbmRleC9pbmRleCcgfSlcbiAgICB9XG5cbiAgfSxcbiAgLy8g55m75b2VXG4gIGFzeW5jIGxvZ2luKCkge1xuICAgIGF3YWl0IFN1YnNjcmliZU1lc3NhZ2UoWyforr7lpIflkYrorabmj5DphpInXSlcbiAgICBjb25zdCB7IGFjY29udFVzZXIsIGFjY29udFBhc3N3ZCwgb3BlbmlkIH0gPSB0aGlzLmRhdGFcbiAgICB0aGlzLnNldERhdGEoeyBsb2dpbmxvYWRpbmc6IHRydWUgfSlcbiAgICBjb25zdCB7IG9rLCBtc2cgfSA9IGF3YWl0IGFwaS51c2VybG9naW4oeyBhdmFudGVyOiB0aGlzLmRhdGEudXNlckluZm8uYXZhdGFyVXJsLCBvcGVuaWQsIHVzZXI6IGFjY29udFVzZXIsIHBhc3N3ZDogYWNjb250UGFzc3dkIH0pXG4gICAgdGhpcy5zZXREYXRhKHsgbG9naW5sb2FkaW5nOiBmYWxzZSB9KVxuICAgIGlmIChvaykge1xuICAgICAgd3gucmVMYXVuY2goeyB1cmw6ICcvcGFnZXMvaW5kZXgvaW5kZXgnIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHd4LnNob3dNb2RhbCh7XG4gICAgICAgIHRpdGxlOiAn55m75b2V6ZSZ6K+vJyxcbiAgICAgICAgY29udGVudDogbXNnXG4gICAgICB9KVxuICAgIH1cbiAgfVxufSlcbiJdfQ==
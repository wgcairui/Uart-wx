"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../utils/api");
Page({
    data: {
        img: "https://www.ladishb.com/upload/5y2wYWklE0usgYG0VwLTdRnc.png",
        userInfo: {},
        tel: '',
        registerloading: false,
        loginloading: false,
        openid: '',
        accontUser: '',
        accontPasswd: ''
    },
    onLoad(opt) {
        this.setData({
            openid: opt.openid
        });
    },
    getUserInfo(_e) {
        wx.getUserProfile({
            desc: '用于注册小程序',
            success: (info) => {
                this.setData({
                    userInfo: info.userInfo
                });
            }
        });
    },
    tabclick(event) {
        wx.setNavigationBarTitle({ title: event.detail.title });
    },
    async getphonenumber(e) {
        wx.showLoading({ title: '获取手机号' });
        const telObj = await api_1.default.getphonenumber({ openid: this.data.openid, encryptedData: e.detail.encryptedData, iv: e.detail.iv });
        this.setData({
            tel: telObj.arg.phoneNumber
        });
        wx.hideLoading();
    },
    async register() {
        wx.requestSubscribeMessage({
            tmplIds: ['XPN75P-0F3so8dE__e5bxS9xznCyNGx4TKX0Fl-i_b4', '8NX6ji8ABlNAOEMcU7v2jtD4sgCB7NMHguWzxZn3HO4'],
            success: async (_res) => {
                this.setData({ registerloading: true });
                const { userInfo: { nickName, avatarUrl }, tel } = this.data;
                const { ok, msg } = await api_1.default.registerUser({ user: this.data.openid, name: nickName, avanter: avatarUrl, tel });
                this.setData({ registerloading: false });
                if (!ok) {
                    wx.showToast({ title: msg, icon: "none", duration: 5000 });
                }
                else {
                    wx.reLaunch({ url: '/pages/index/index' });
                }
            }
        });
    },
    async login() {
        const { accontUser, accontPasswd, openid } = this.data;
        this.setData({ loginloading: true });
        const { ok, msg } = await api_1.default.userlogin({ avanter: this.data.userInfo.avatarUrl, openid, user: accontUser, passwd: accontPasswd });
        this.setData({ loginloading: false });
        if (ok) {
            wx.reLaunch({ url: '/pages/index/index' });
        }
        else {
            wx.showModal({
                title: '登录错误',
                content: msg
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHlDQUFrQztBQUNsQyxJQUFJLENBQUM7SUFJSCxJQUFJLEVBQUU7UUFDSixHQUFHLEVBQUMsNkRBQTZEO1FBQ2pFLFFBQVEsRUFBRSxFQUFnQztRQUMxQyxHQUFHLEVBQUUsRUFBRTtRQUNQLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLFlBQVksRUFBRSxLQUFLO1FBQ25CLE1BQU0sRUFBRSxFQUFFO1FBQ1YsVUFBVSxFQUFFLEVBQUU7UUFDZCxZQUFZLEVBQUUsRUFBRTtLQUNqQjtJQUNELE1BQU0sQ0FBQyxHQUF3QjtRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO1NBQ25CLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFNRCxXQUFXLENBQUMsRUFBYTtRQUN0QixFQUFVLENBQUMsY0FBYyxDQUFDO1lBQ3pCLElBQUksRUFBQyxTQUFTO1lBQ2QsT0FBTyxFQUFDLENBQUMsSUFBMEMsRUFBQyxFQUFFO2dCQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDO29CQUNYLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtpQkFDeEIsQ0FBQyxDQUFBO1lBQ0osQ0FBQztTQUNGLENBQUMsQ0FBQTtJQUlKLENBQUM7SUFDRCxRQUFRLENBQUMsS0FBZ0I7UUFDdkIsRUFBRSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUN6RCxDQUFDO0lBRUQsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFZO1FBQy9CLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUNsQyxNQUFNLE1BQU0sR0FBRyxNQUFNLGFBQUcsQ0FBQyxjQUFjLENBQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDbEksSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVc7U0FDNUIsQ0FBQyxDQUFBO1FBQ0YsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ2xCLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUTtRQUNaLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztZQUV6QixPQUFPLEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSw2Q0FBNkMsQ0FBQztZQUN2RyxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7Z0JBQ3ZDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQTtnQkFDNUQsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLGFBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7Z0JBQy9HLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtnQkFDeEMsSUFBSSxDQUFDLEVBQUUsRUFBRTtvQkFDUCxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO2lCQUUzRDtxQkFBTTtvQkFDTCxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQTtpQkFDM0M7WUFDSCxDQUFDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1QsTUFBTSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQTtRQUN0RCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7UUFDcEMsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLGFBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFBO1FBQ2xJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtRQUNyQyxJQUFJLEVBQUUsRUFBRTtZQUNOLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFBO1NBQzNDO2FBQU07WUFDTCxFQUFFLENBQUMsU0FBUyxDQUFDO2dCQUNYLEtBQUssRUFBRSxNQUFNO2dCQUNiLE9BQU8sRUFBRSxHQUFHO2FBQ2IsQ0FBQyxDQUFBO1NBQ0g7SUFDSCxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbWluaXByb2dyYW0vcGFnZXMvbG9naW4vbG9naW4uanNcbmltcG9ydCBhcGkgZnJvbSBcIi4uLy4uL3V0aWxzL2FwaVwiO1xuUGFnZSh7XG4gIC8qKlxuICAgKiDpobXpnaLnmoTliJ3lp4vmlbDmja5cbiAgICovXG4gIGRhdGE6IHtcbiAgICBpbWc6XCJodHRwczovL3d3dy5sYWRpc2hiLmNvbS91cGxvYWQvNXkyd1lXa2xFMHVzZ1lHMFZ3TFRkUm5jLnBuZ1wiLFxuICAgIHVzZXJJbmZvOiB7fSBhcyBXZWNoYXRNaW5pcHJvZ3JhbS5Vc2VySW5mbyxcbiAgICB0ZWw6ICcnLFxuICAgIHJlZ2lzdGVybG9hZGluZzogZmFsc2UsXG4gICAgbG9naW5sb2FkaW5nOiBmYWxzZSxcbiAgICBvcGVuaWQ6ICcnLFxuICAgIGFjY29udFVzZXI6ICcnLFxuICAgIGFjY29udFBhc3N3ZDogJydcbiAgfSxcbiAgb25Mb2FkKG9wdDogeyBvcGVuaWQ6IHN0cmluZzsgfSkge1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBvcGVuaWQ6IG9wdC5vcGVuaWRcbiAgICB9KVxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWKoOi9vVxuICAgKi9cbiAgLy8g6I635Y+W55So5oi35L+h5oGvXG4gIGdldFVzZXJJbmZvKF9lOiB2YW50RXZlbnQpIHtcbiAgICAod3ggYXMgYW55KS5nZXRVc2VyUHJvZmlsZSh7XG4gICAgICBkZXNjOifnlKjkuo7ms6jlhozlsI/nqIvluo8nLFxuICAgICAgc3VjY2VzczooaW5mbzp7dXNlckluZm86V2VjaGF0TWluaXByb2dyYW0uVXNlckluZm99KT0+e1xuICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgIHVzZXJJbmZvOiBpbmZvLnVzZXJJbmZvXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgICAvKiB0aGlzLnNldERhdGEoe1xuICAgICAgdXNlckluZm86IGUuZGV0YWlsLnVzZXJJbmZvXG4gICAgfSkgKi9cbiAgfSxcbiAgdGFiY2xpY2soZXZlbnQ6IHZhbnRFdmVudCkge1xuICAgIHd4LnNldE5hdmlnYXRpb25CYXJUaXRsZSh7IHRpdGxlOiBldmVudC5kZXRhaWwudGl0bGUgfSlcbiAgfSxcbiAgLy8g6I635Y+W55So5oi35omL5py65Y+356CBXG4gIGFzeW5jIGdldHBob25lbnVtYmVyKGU6IHZhbnRFdmVudCkge1xuICAgIHd4LnNob3dMb2FkaW5nKHsgdGl0bGU6ICfojrflj5bmiYvmnLrlj7cnIH0pXG4gICAgY29uc3QgdGVsT2JqID0gYXdhaXQgYXBpLmdldHBob25lbnVtYmVyPGFueT4oeyBvcGVuaWQ6IHRoaXMuZGF0YS5vcGVuaWQsIGVuY3J5cHRlZERhdGE6IGUuZGV0YWlsLmVuY3J5cHRlZERhdGEsIGl2OiBlLmRldGFpbC5pdiB9KVxuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICB0ZWw6IHRlbE9iai5hcmcucGhvbmVOdW1iZXIvL3Jlcy5hcmcuY291bnRyeUNvZGUgKyByZXMuYXJnLnBob25lTnVtYmVyXG4gICAgfSlcbiAgICB3eC5oaWRlTG9hZGluZygpXG4gIH0sXG4gIC8vIOazqOWGjOeUqOaIt1xuICBhc3luYyByZWdpc3RlcigpIHtcbiAgICB3eC5yZXF1ZXN0U3Vic2NyaWJlTWVzc2FnZSh7XG4gICAgICAvLyDorqLpmIXmtojmga9pZFxuICAgICAgdG1wbElkczogWydYUE43NVAtMEYzc284ZEVfX2U1YnhTOXh6bkN5Tkd4NFRLWDBGbC1pX2I0JywgJzhOWDZqaThBQmxOQU9FTWNVN3YyanRENHNnQ0I3Tk1IZ3VXenhabjNITzQnXSxcbiAgICAgIHN1Y2Nlc3M6IGFzeW5jIChfcmVzKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0RGF0YSh7IHJlZ2lzdGVybG9hZGluZzogdHJ1ZSB9KVxuICAgICAgICBjb25zdCB7IHVzZXJJbmZvOiB7IG5pY2tOYW1lLCBhdmF0YXJVcmwgfSwgdGVsIH0gPSB0aGlzLmRhdGFcbiAgICAgICAgY29uc3QgeyBvaywgbXNnIH0gPSBhd2FpdCBhcGkucmVnaXN0ZXJVc2VyKHsgdXNlcjogdGhpcy5kYXRhLm9wZW5pZCwgbmFtZTogbmlja05hbWUsIGF2YW50ZXI6IGF2YXRhclVybCwgdGVsIH0pXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7IHJlZ2lzdGVybG9hZGluZzogZmFsc2UgfSlcbiAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgIHd4LnNob3dUb2FzdCh7IHRpdGxlOiBtc2csIGljb246IFwibm9uZVwiLCBkdXJhdGlvbjogNTAwMCB9KVxuICAgICAgICAgIC8vIHd4LnJlZGlyZWN0VG8oeyB1cmw6IFwiL1wiIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd3gucmVMYXVuY2goeyB1cmw6ICcvcGFnZXMvaW5kZXgvaW5kZXgnIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9LFxuICAvLyDnmbvlvZVcbiAgYXN5bmMgbG9naW4oKSB7XG4gICAgY29uc3QgeyBhY2NvbnRVc2VyLCBhY2NvbnRQYXNzd2QsIG9wZW5pZCB9ID0gdGhpcy5kYXRhXG4gICAgdGhpcy5zZXREYXRhKHsgbG9naW5sb2FkaW5nOiB0cnVlIH0pXG4gICAgY29uc3QgeyBvaywgbXNnIH0gPSBhd2FpdCBhcGkudXNlcmxvZ2luKHsgYXZhbnRlcjogdGhpcy5kYXRhLnVzZXJJbmZvLmF2YXRhclVybCwgb3BlbmlkLCB1c2VyOiBhY2NvbnRVc2VyLCBwYXNzd2Q6IGFjY29udFBhc3N3ZCB9KVxuICAgIHRoaXMuc2V0RGF0YSh7IGxvZ2lubG9hZGluZzogZmFsc2UgfSlcbiAgICBpZiAob2spIHtcbiAgICAgIHd4LnJlTGF1bmNoKHsgdXJsOiAnL3BhZ2VzL2luZGV4L2luZGV4JyB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB3eC5zaG93TW9kYWwoe1xuICAgICAgICB0aXRsZTogJ+eZu+W9lemUmeivrycsXG4gICAgICAgIGNvbnRlbnQ6IG1zZ1xuICAgICAgfSlcbiAgICB9XG4gIH1cbn0pXG4iXX0=
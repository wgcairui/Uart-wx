"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const unitCache_1 = require("../../../utils/unitCache");
const api_1 = require("../../../utils/api");
const util_1 = require("../../../utils/util");
Page({
    data: {
        active: 0,
        protocol: '',
        usersetup: {},
        syssetup: {},
        Protocols: {},
        showTag: [],
        alarmStat: [],
        Threshold: []
    },
    onLoad: async function (options) {
        const protocol = options.protocol;
        if (!protocol) {
            wx.navigateTo({
                url: '/pages/index/alarmSetting/index'
            });
            return;
        }
        const active = Number(options.type) || 0;
        this.setData({
            active: active,
            protocol
        });
        await this.getUserProtocolSetup();
        if (active === 1)
            this.updateThre();
        if (active === 2)
            this.updateAlarm();
    },
    async getUserProtocolSetup() {
        wx.showLoading({ title: '获取协议配置' });
        const userSetup = await api_1.default.getUserAlarmProtocol(this.data.protocol);
        const sysSetup = await api_1.default.getAlarmProtocol(this.data.protocol);
        const Protocols = await api_1.default.getProtocol(this.data.protocol);
        wx.hideLoading();
        if (userSetup && sysSetup) {
            this.setData({
                usersetup: userSetup.data,
                syssetup: sysSetup.data,
                Protocols: Protocols.data,
                showTag: userSetup.data.ShowTag
            });
        }
        else {
            wx.showModal({
                title: "Error",
                content: '设备协议b不支持配置'
            });
        }
    },
    parseProtocol() {
        const protocolArray = this.data.Protocols.instruct.map(instruct => {
            return instruct.formResize.map(el => ({ [el.name]: el.isState ? unitCache_1.default.getunitObject(1, el.unit) : {} }));
        }).reduce((pre, cur) => {
            return [...pre, ...cur];
        });
        return Object.assign({}, ...protocolArray);
    },
    tabclick(event) {
        wx.setNavigationBarTitle({ title: '协议配置-' + event.detail.title });
        switch (event.detail.title) {
            case "参数限值":
                this.updateThre();
                break;
            case "参数状态":
                this.updateAlarm();
                break;
        }
    },
    updateThre() {
        const { usersetup, syssetup } = this.data;
        const sys_ThresholdMap = new Map(syssetup.Threshold.map(el => [el.name, el]));
        if (usersetup?.Threshold) {
            [...this.data.Threshold, ...usersetup.Threshold].forEach((val) => {
                sys_ThresholdMap.set(val.name, val);
            });
        }
        this.setData({
            Threshold: Array.from(sys_ThresholdMap.values())
        });
    },
    updateAlarm() {
        const { usersetup, syssetup } = this.data;
        const sys_alarmStatMap = new Map(syssetup.AlarmStat.map(el => [el.name, el]));
        if (usersetup?.AlarmStat) {
            [...usersetup.AlarmStat, ...this.data.alarmStat].forEach(val => {
                sys_alarmStatMap.set(val.name, val);
            });
        }
        const parse = this.parseProtocol();
        sys_alarmStatMap.forEach((el, key) => {
            el.parse = parse[key];
        });
        this.setData({
            alarmStat: Array.from(sys_alarmStatMap.values())
        });
    },
    async ShowTagonChange(event) {
        console.log({ event });
        const tags = event.detail;
        this.setData({
            showTag: tags
        });
        await api_1.default.setUserSetupProtocol(this.data.protocol, 'ShowTag', tags || [])
            .then(res => {
            wx.showToast({
                title: res.code === 200 ? '显示参数修改成功' : '修改失败',
                icon: res.code === 200 ? 'success' : 'error',
            });
        });
    },
    ShowTagtoggle(_event) {
    },
    async AlarmStatonChange(event) {
        const item = event.currentTarget.dataset.item;
        const value = event.detail;
        const index = this.data.alarmStat.findIndex(el => el.name === item.name);
        this.setData({
            ["alarmStat[" + index + "].alarmStat"]: value
        });
        const data = this.data.alarmStat[index];
        await api_1.default.setUserSetupProtocol(this.data.protocol, 'AlarmStat', data)
            .then(res => {
            wx.showToast({
                title: res.code === 200 ? '状态参数修改成功' : '修改失败',
                icon: res.code === 200 ? 'success' : 'error',
            });
        });
    },
    ThresholdClick(event) {
        const item = event.currentTarget.dataset.item;
        const index = event.currentTarget.dataset.index;
        wx.navigateTo({
            url: '/pages/index/alarmSetting/threshold/threshold' + (0, util_1.ObjectToStrquery)({ ...item }),
            events: {
                modifyThreshold: async (data) => {
                    await api_1.default.setUserSetupProtocol(this.data.protocol, "Threshold", { type: 'add', data })
                        .then(res => {
                        wx.showToast({
                            title: res.code === 200 ? '约束参数修改成功' : '修改失败',
                            icon: res.code === 200 ? 'success' : 'error',
                        });
                    });
                    this.setData({
                        [`Threshold[${index}]`]: { ...data, icon: "star" }
                    });
                }
            }
        });
    },
    addThreshold() {
        const ua = this.data.usersetup?.AlarmStat || [];
        const keys = new Set([...this.data.alarmStat.map(el => el.name), ...ua.map(el => el.name)]);
        wx.navigateTo({
            url: '/pages/index/alarmSetting/addThreshold/addThreshold' + (0, util_1.ObjectToStrquery)({ protocol: this.data.protocol, keys: Array.from(keys) }),
            events: {
                addThreshold: async (data) => {
                    await api_1.default.setUserSetupProtocol(this.data.protocol, "Threshold", { type: 'add', data });
                    const newThre = this.data.Threshold.concat(data);
                    this.setData({
                        Threshold: newThre
                    });
                }
            }
        });
    },
    async saveSetup() {
        const { usersetup, alarmStat, Threshold, protocol } = this.data;
        {
            const userShowtags = usersetup.ShowTag || [];
            const showtag = this.data.showTag || [];
            if (userShowtags.sort().join("") !== showtag.sort().join('')) {
                await api_1.default.setUserSetupProtocol(protocol, 'ShowTag', showtag || []);
            }
        }
        {
            const userAlarm = usersetup.AlarmStat || [];
            const alarm = alarmStat || [];
            const b1 = userAlarm.map(el => el.name).sort().join('') !== alarm.map(el => el.name).sort().join('');
            if (b1) {
                await api_1.default.setUserSetupProtocol(protocol, 'AlarmStat', alarmStat);
            }
            else if (alarm.length !== 0) {
                const ua = userAlarm.sort();
                const ka = alarm.sort();
                const compare = ua.every((el, index) => el.alarmStat.sort().join('') !== ka[index].alarmStat.sort().join(''));
                if (compare) {
                    await api_1.default.setUserSetupProtocol(protocol, 'AlarmStat', alarmStat);
                }
            }
        }
        {
            const userThre = usersetup.Threshold || [];
            const thre = Threshold || [];
            const b1 = userThre.map(el => el.name).sort().join('') !== thre.map(el => el.name).sort().join('');
            const data = thre.map(el => ({ name: el.name, min: el.min, max: el.max }));
            if (b1) {
                await api_1.default.setUserSetupProtocol(protocol, "Threshold", data);
            }
            else if (thre.length !== 0) {
                const ua = userThre.sort();
                const ka = thre.sort();
                const compare = ua.every((el, index) => el.min !== ka[index].min || el.max !== ka[index].max);
                if (compare) {
                    await api_1.default.setUserSetupProtocol(protocol, "Threshold", data);
                }
            }
        }
    },
    onUnload: function () {
    },
    onPullDownRefresh: async function () {
        await this.getUserProtocolSetup();
        wx.stopPullDownRefresh();
    }
});
//# sourceMappingURL=data:application/json;base64,
"use strict";
Page({
    data: {
        name: '',
        cache: new Map(),
        unit: '',
        min: 0,
        max: 0,
        icon: 'star',
        columns: [],
    },
    onLoad: function (options) {
        wx.getStorage({
            key: 'protocolSetup' + options.protocol,
            success: ({ data }) => {
                const setups = data.instruct.map(el => el.formResize.filter(el2 => !el2.isState))
                    .reduce((pre, cur) => [...pre, ...cur]);
                const cache = new Map(setups.map(el => [el.name, el]));
                const keysSet = new Set(options.keys.split(","));
                this.setData({
                    columns: Array.from(cache.keys()).filter(el => !keysSet.has(el)),
                    cache
                });
            },
            fail() {
                wx.navigateBack();
            }
        });
    },
    minonChange(event) {
        const max = this.data.max;
        const min = event.detail;
        this.setData({
            min,
            max: min >= max ? Number(min) + 1 : max
        });
    },
    maxonChange(event) {
        this.setData({
            max: event.detail
        });
    },
    onChange(event) {
        const name = event.detail.value;
        this.setData({
            name,
            unit: this.data.cache.get(name)?.unit || ''
        });
    },
    submit() {
        const events = this.getOpenerEventChannel();
        events.emit("addThreshold", this.data);
        wx.navigateBack();
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkVGhyZXNob2xkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWRkVGhyZXNob2xkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFJLENBQUM7SUFLSCxJQUFJLEVBQUU7UUFDSixJQUFJLEVBQUUsRUFBRTtRQUNSLEtBQUssRUFBRSxJQUFJLEdBQUcsRUFBRTtRQUNoQixJQUFJLEVBQUUsRUFBRTtRQUNSLEdBQUcsRUFBRSxDQUFDO1FBQ04sR0FBRyxFQUFFLENBQUM7UUFDTixJQUFJLEVBQUMsTUFBTTtRQUNYLE9BQU8sRUFBRSxFQUFjO0tBQ3hCO0lBS0QsTUFBTSxFQUFFLFVBQVUsT0FBTztRQUN2QixFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osR0FBRyxFQUFFLGVBQWUsR0FBRyxPQUFPLENBQUMsUUFBUTtZQUN2QyxPQUFPLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBc0IsRUFBRSxFQUFFO2dCQUN4QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7cUJBQzlFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO2dCQUN6QyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDdEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQVUsT0FBTyxDQUFDLElBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtnQkFDMUQsSUFBSSxDQUFDLE9BQU8sQ0FBQztvQkFDWCxPQUFPLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLEVBQUUsQ0FBQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQzlELEtBQUs7aUJBQ04sQ0FBQyxDQUFBO1lBQ0osQ0FBQztZQUNELElBQUk7Z0JBQ0YsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFBO1lBQ25CLENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0QsV0FBVyxDQUFDLEtBQWdCO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFBO1FBQ3pCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFnQixDQUFBO1FBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxHQUFHO1lBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc7U0FDeEMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELFdBQVcsQ0FBQyxLQUFnQjtRQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsR0FBRyxFQUFFLEtBQUssQ0FBQyxNQUFNO1NBQ2xCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxRQUFRLENBQUMsS0FBZ0I7UUFDdkIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUE7UUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLElBQUk7WUFDSixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFO1NBQzVDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxNQUFNO1FBQ0osTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUE7UUFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3RDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtJQUNuQixDQUFDO0lBS0QsT0FBTyxFQUFFO0lBRVQsQ0FBQztJQUtELE1BQU0sRUFBRTtJQUVSLENBQUM7SUFLRCxNQUFNLEVBQUU7SUFFUixDQUFDO0lBS0QsUUFBUSxFQUFFO0lBRVYsQ0FBQztJQUtELGlCQUFpQixFQUFFO0lBRW5CLENBQUM7SUFLRCxhQUFhLEVBQUU7SUFFZixDQUFDO0lBS0QsaUJBQWlCLEVBQUU7SUFFbkIsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIG1pbmlwcm9ncmFtL3BhZ2VzL2luZGV4L2FsYXJtU2V0dGluZy9hZGRUaHJlc2hvbGQvYWRkVGhyZXNob2xkLmpzXG5QYWdlKHtcblxuICAvKipcbiAgICog6aG16Z2i55qE5Yid5aeL5pWw5o2uXG4gICAqL1xuICBkYXRhOiB7XG4gICAgbmFtZTogJycsXG4gICAgY2FjaGU6IG5ldyBNYXAoKSxcbiAgICB1bml0OiAnJyxcbiAgICBtaW46IDAsXG4gICAgbWF4OiAwLFxuICAgIGljb246J3N0YXInLFxuICAgIGNvbHVtbnM6IFtdIGFzIHN0cmluZ1tdLFxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWKoOi9vVxuICAgKi9cbiAgb25Mb2FkOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHd4LmdldFN0b3JhZ2Uoe1xuICAgICAga2V5OiAncHJvdG9jb2xTZXR1cCcgKyBvcHRpb25zLnByb3RvY29sLFxuICAgICAgc3VjY2VzczogKHsgZGF0YSB9OiB7IGRhdGE6IHByb3RvY29sIH0pID0+IHtcbiAgICAgICAgY29uc3Qgc2V0dXBzID0gZGF0YS5pbnN0cnVjdC5tYXAoZWwgPT4gZWwuZm9ybVJlc2l6ZS5maWx0ZXIoZWwyID0+ICFlbDIuaXNTdGF0ZSkpXG4gICAgICAgICAgLnJlZHVjZSgocHJlLCBjdXIpID0+IFsuLi5wcmUsIC4uLmN1cl0pXG4gICAgICAgIGNvbnN0IGNhY2hlID0gbmV3IE1hcChzZXR1cHMubWFwKGVsID0+IFtlbC5uYW1lLCBlbF0pKVxuICAgICAgICBjb25zdCBrZXlzU2V0ID0gbmV3IFNldCgoPHN0cmluZz5vcHRpb25zLmtleXMpLnNwbGl0KFwiLFwiKSlcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICBjb2x1bW5zOiBBcnJheS5mcm9tKGNhY2hlLmtleXMoKSkuZmlsdGVyKGVsPT4ha2V5c1NldC5oYXMoZWwpKSxcbiAgICAgICAgICBjYWNoZVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIGZhaWwoKSB7XG4gICAgICAgIHd4Lm5hdmlnYXRlQmFjaygpXG4gICAgICB9XG4gICAgfSlcbiAgfSxcbiAgbWlub25DaGFuZ2UoZXZlbnQ6IHZhbnRFdmVudCkge1xuICAgIGNvbnN0IG1heCA9IHRoaXMuZGF0YS5tYXhcbiAgICBjb25zdCBtaW4gPSBldmVudC5kZXRhaWwgYXMgbnVtYmVyXG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIG1pbixcbiAgICAgIG1heDogbWluID49IG1heCA/IE51bWJlcihtaW4pICsgMSA6IG1heFxuICAgIH0pXG4gIH0sXG4gIG1heG9uQ2hhbmdlKGV2ZW50OiB2YW50RXZlbnQpIHtcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgbWF4OiBldmVudC5kZXRhaWxcbiAgICB9KVxuICB9LFxuICBvbkNoYW5nZShldmVudDogdmFudEV2ZW50KSB7XG4gICAgY29uc3QgbmFtZSA9IGV2ZW50LmRldGFpbC52YWx1ZVxuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBuYW1lLFxuICAgICAgdW5pdDogdGhpcy5kYXRhLmNhY2hlLmdldChuYW1lKT8udW5pdCB8fCAnJ1xuICAgIH0pXG4gIH0sXG4gIHN1Ym1pdCgpIHtcbiAgICBjb25zdCBldmVudHMgPSB0aGlzLmdldE9wZW5lckV2ZW50Q2hhbm5lbCgpXG4gICAgZXZlbnRzLmVtaXQoXCJhZGRUaHJlc2hvbGRcIiwgdGhpcy5kYXRhKVxuICAgIHd4Lm5hdmlnYXRlQmFjaygpXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yid5qyh5riy5p+T5a6M5oiQXG4gICAqL1xuICBvblJlYWR5OiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLmmL7npLpcbiAgICovXG4gIG9uU2hvdzogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i6ZqQ6JePXG4gICAqL1xuICBvbkhpZGU6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWNuOi9vVxuICAgKi9cbiAgb25VbmxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDpobXpnaLnm7jlhbPkuovku7blpITnkIblh73mlbAtLeebkeWQrOeUqOaIt+S4i+aLieWKqOS9nFxuICAgKi9cbiAgb25QdWxsRG93blJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDpobXpnaLkuIrmi4nop6blupXkuovku7bnmoTlpITnkIblh73mlbBcbiAgICovXG4gIG9uUmVhY2hCb3R0b206IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlKjmiLfngrnlh7vlj7PkuIrop5LliIbkuqtcbiAgICovXG4gIG9uU2hhcmVBcHBNZXNzYWdlOiBmdW5jdGlvbiAoKSB7XG5cbiAgfVxufSkiXX0=
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../../../utils/api");
Page({
    data: {
        name: '',
        cache: new Map(),
        unit: '',
        min: 0,
        max: 0,
        icon: 'star',
        columns: [],
    },
    onLoad: async function (options) {
        console.log(options);
        const protocol = options.protocol;
        const setup = await api_1.default.getAlarmProtocol(protocol);
        const showSet = new Set(setup.data.ShowTag);
        api_1.default.getProtocol(protocol).then(({ code, data }) => {
            const setups = data.instruct
                .map(el => el.formResize.filter(el2 => !el2.isState))
                .reduce((pre, cur) => [...pre, ...cur]);
            const cache = new Map(setups.map(el => [el.name, el]));
            const keysSet = new Set(options.keys.split(","));
            this.setData({
                columns: Array.from(cache.keys()).filter(el => showSet.has(el) && !keysSet.has(el)),
                cache
            });
        });
    },
    minonChange(event) {
        const max = this.data.max;
        const min = event.detail;
        this.setData({
            min,
            max: min >= max ? Number(min) + 1 : max
        });
    },
    maxonChange(event) {
        this.setData({
            max: event.detail
        });
    },
    onChange(event) {
        const name = event.detail.value;
        this.setData({
            name,
            unit: this.data.cache.get(name)?.unit || ''
        });
    },
    submit() {
        const events = this.getOpenerEventChannel();
        events.emit("addThreshold", this.data);
        wx.navigateBack();
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkVGhyZXNob2xkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWRkVGhyZXNob2xkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0NBQXVDO0FBR3ZDLElBQUksQ0FBQztJQUtILElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxFQUFFO1FBQ1IsS0FBSyxFQUFFLElBQUksR0FBRyxFQUFFO1FBQ2hCLElBQUksRUFBRSxFQUFFO1FBQ1IsR0FBRyxFQUFFLENBQUM7UUFDTixHQUFHLEVBQUUsQ0FBQztRQUNOLElBQUksRUFBRSxNQUFNO1FBQ1osT0FBTyxFQUFFLEVBQWM7S0FDeEI7SUFLRCxNQUFNLEVBQUUsS0FBSyxXQUFXLE9BQU87UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUyxDQUFBO1FBQ2xDLE1BQU0sS0FBSyxHQUFHLE1BQU0sYUFBRyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2xELE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDM0MsYUFBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1lBQ2hELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRO2lCQUN6QixHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNwRCxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUN6QyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUN0RCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBVSxPQUFPLENBQUMsSUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQzFELElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ25GLEtBQUs7YUFDTixDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxXQUFXLENBQUMsS0FBZ0I7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUE7UUFDekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQWdCLENBQUE7UUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLEdBQUc7WUFDSCxHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRztTQUN4QyxDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0QsV0FBVyxDQUFDLEtBQWdCO1FBQzFCLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxHQUFHLEVBQUUsS0FBSyxDQUFDLE1BQU07U0FDbEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELFFBQVEsQ0FBQyxLQUFnQjtRQUN2QixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsSUFBSTtZQUNKLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUU7U0FDNUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELE1BQU07UUFDSixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQTtRQUMzQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdEMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFBO0lBQ25CLENBQUM7SUFLRCxPQUFPLEVBQUU7SUFFVCxDQUFDO0lBS0QsTUFBTSxFQUFFO0lBRVIsQ0FBQztJQUtELE1BQU0sRUFBRTtJQUVSLENBQUM7SUFLRCxRQUFRLEVBQUU7SUFFVixDQUFDO0lBS0QsaUJBQWlCLEVBQUU7SUFFbkIsQ0FBQztJQUtELGFBQWEsRUFBRTtJQUVmLENBQUM7SUFLRCxpQkFBaUIsRUFBRTtJQUVuQixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tIFwiLi4vLi4vLi4vLi4vdXRpbHMvYXBpXCJcblxuLy8gbWluaXByb2dyYW0vcGFnZXMvaW5kZXgvYWxhcm1TZXR0aW5nL2FkZFRocmVzaG9sZC9hZGRUaHJlc2hvbGQuanNcblBhZ2Uoe1xuXG4gIC8qKlxuICAgKiDpobXpnaLnmoTliJ3lp4vmlbDmja5cbiAgICovXG4gIGRhdGE6IHtcbiAgICBuYW1lOiAnJyxcbiAgICBjYWNoZTogbmV3IE1hcCgpLFxuICAgIHVuaXQ6ICcnLFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDAsXG4gICAgaWNvbjogJ3N0YXInLFxuICAgIGNvbHVtbnM6IFtdIGFzIHN0cmluZ1tdLFxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWKoOi9vVxuICAgKi9cbiAgb25Mb2FkOiBhc3luYyBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xuICAgIGNvbnN0IHByb3RvY29sID0gb3B0aW9ucy5wcm90b2NvbCFcbiAgICBjb25zdCBzZXR1cCA9IGF3YWl0IGFwaS5nZXRBbGFybVByb3RvY29sKHByb3RvY29sKVxuICAgIGNvbnN0IHNob3dTZXQgPSBuZXcgU2V0KHNldHVwLmRhdGEuU2hvd1RhZylcbiAgICBhcGkuZ2V0UHJvdG9jb2wocHJvdG9jb2wpLnRoZW4oKHsgY29kZSwgZGF0YSB9KSA9PiB7XG4gICAgICBjb25zdCBzZXR1cHMgPSBkYXRhLmluc3RydWN0XG4gICAgICAgIC5tYXAoZWwgPT4gZWwuZm9ybVJlc2l6ZS5maWx0ZXIoZWwyID0+ICFlbDIuaXNTdGF0ZSkpXG4gICAgICAgIC5yZWR1Y2UoKHByZSwgY3VyKSA9PiBbLi4ucHJlLCAuLi5jdXJdKVxuICAgICAgY29uc3QgY2FjaGUgPSBuZXcgTWFwKHNldHVwcy5tYXAoZWwgPT4gW2VsLm5hbWUsIGVsXSkpXG4gICAgICBjb25zdCBrZXlzU2V0ID0gbmV3IFNldCgoPHN0cmluZz5vcHRpb25zLmtleXMpLnNwbGl0KFwiLFwiKSlcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIGNvbHVtbnM6IEFycmF5LmZyb20oY2FjaGUua2V5cygpKS5maWx0ZXIoZWwgPT4gc2hvd1NldC5oYXMoZWwpICYmICFrZXlzU2V0LmhhcyhlbCkpLFxuICAgICAgICBjYWNoZVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuICBtaW5vbkNoYW5nZShldmVudDogdmFudEV2ZW50KSB7XG4gICAgY29uc3QgbWF4ID0gdGhpcy5kYXRhLm1heFxuICAgIGNvbnN0IG1pbiA9IGV2ZW50LmRldGFpbCBhcyBudW1iZXJcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgbWluLFxuICAgICAgbWF4OiBtaW4gPj0gbWF4ID8gTnVtYmVyKG1pbikgKyAxIDogbWF4XG4gICAgfSlcbiAgfSxcbiAgbWF4b25DaGFuZ2UoZXZlbnQ6IHZhbnRFdmVudCkge1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBtYXg6IGV2ZW50LmRldGFpbFxuICAgIH0pXG4gIH0sXG4gIG9uQ2hhbmdlKGV2ZW50OiB2YW50RXZlbnQpIHtcbiAgICBjb25zdCBuYW1lID0gZXZlbnQuZGV0YWlsLnZhbHVlXG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIG5hbWUsXG4gICAgICB1bml0OiB0aGlzLmRhdGEuY2FjaGUuZ2V0KG5hbWUpPy51bml0IHx8ICcnXG4gICAgfSlcbiAgfSxcbiAgc3VibWl0KCkge1xuICAgIGNvbnN0IGV2ZW50cyA9IHRoaXMuZ2V0T3BlbmVyRXZlbnRDaGFubmVsKClcbiAgICBldmVudHMuZW1pdChcImFkZFRocmVzaG9sZFwiLCB0aGlzLmRhdGEpXG4gICAgd3gubmF2aWdhdGVCYWNrKClcbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliJ3mrKHmuLLmn5PlrozmiJBcbiAgICovXG4gIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouaYvuekulxuICAgKi9cbiAgb25TaG93OiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLpmpDol49cbiAgICovXG4gIG9uSGlkZTogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Y246L29XG4gICAqL1xuICBvblVubG9hZDogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOmhtemdouebuOWFs+S6i+S7tuWkhOeQhuWHveaVsC0t55uR5ZCs55So5oi35LiL5ouJ5Yqo5L2cXG4gICAqL1xuICBvblB1bGxEb3duUmVmcmVzaDogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOmhtemdouS4iuaLieinpuW6leS6i+S7tueahOWkhOeQhuWHveaVsFxuICAgKi9cbiAgb25SZWFjaEJvdHRvbTogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUqOaIt+eCueWHu+WPs+S4iuinkuWIhuS6q1xuICAgKi9cbiAgb25TaGFyZUFwcE1lc3NhZ2U6IGZ1bmN0aW9uICgpIHtcblxuICB9XG59KSJdfQ==
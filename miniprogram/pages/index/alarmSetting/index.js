"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../../utils/api");
Page({
    data: {
        devs: [],
        tels: '',
        mails: ''
    },
    onLoad: function () {
        this.sortDevslist();
        this.getuserTels();
    },
    sortDevslist() {
        api_1.default.BindDev().then(el => {
            if (el.code) {
                this.setData({
                    devs: el.data.UTs
                });
            }
        });
    },
    async getuserTels() {
        const el = await api_1.default.getUserAlarmSetup();
        this.setData({
            tels: el.data.tels.join('\n'),
            mails: el.data.mails.join('\n')
        });
    },
    modifyTell(event) {
        const [tel, mail] = event.currentTarget.dataset.item;
        wx.navigateTo({
            url: "/pages/index/alarmSetting/modifyTel/modifyTel",
            events: {
                modifyOk: ({ tel, mail }) => {
                    this.pushuserTels(tel, mail);
                }
            },
            success(res) {
                res.eventChannel.emit('alarm', { tel: tel.split("\n"), mail: mail.split("\n") });
            }
        });
    },
    pushuserTels(tels, mails) {
        this.setData({
            tels: tels.join('\n'),
            mails: mails.join('\n')
        });
        api_1.default.modifyUserAlarmSetupTel([...new Set(tels)], [...new Set(mails)]).then(() => {
            wx.startPullDownRefresh();
        });
    },
    async subMessage() {
        const url = encodeURIComponent('http://mp.weixin.qq.com/s?__biz=MjM5MjA1MTgxOQ==&mid=304819939&idx=1&sn=d0bcd922033075afa2b5219fc95ebb1e&chksm=3173a9e7060420f1a98d0040d964a2f82af25289a731d1400c5224ca9bb3d225d737700700a8#rd');
        wx.navigateTo({ url: '/pages/index/web/web?url=' + url });
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: async function () {
        await this.getuserTels();
        wx.stopPullDownRefresh();
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,
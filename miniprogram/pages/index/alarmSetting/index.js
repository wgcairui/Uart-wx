"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../../utils/api");
Page({
    data: {
        devs: [],
        tels: '',
        mails: ''
    },
    onLoad: function () {
        this.sortDevslist();
        this.getuserTels();
    },
    sortDevslist() {
        api_1.default.BindDev().then(el => {
            if (el.code) {
                this.setData({
                    devs: el.data.UTs
                });
            }
        });
    },
    async getuserTels() {
        const el = await api_1.default.getUserAlarmSetup();
        this.setData({
            tels: el.data.tels.join('\n'),
            mails: el.data.mails.join('\n')
        });
    },
    modifyTell(event) {
        const [tel, mail] = event.currentTarget.dataset.item;
        wx.navigateTo({
            url: "/pages/index/alarmSetting/modifyTel/modifyTel",
            events: {
                modifyOk: ({ tel, mail }) => {
                    this.pushuserTels(tel, mail);
                }
            },
            success(res) {
                res.eventChannel.emit('alarm', { tel: tel.split("\n"), mail: mail.split("\n") });
            }
        });
    },
    pushuserTels(tels, mails) {
        this.setData({
            tels: tels.join('\n'),
            mails: mails.join('\n')
        });
        wx.startPullDownRefresh();
    },
    async subMessage() {
        const url = encodeURIComponent('http://mp.weixin.qq.com/s?__biz=MjM5MjA1MTgxOQ==&mid=304819939&idx=1&sn=d0bcd922033075afa2b5219fc95ebb1e&chksm=3173a9e7060420f1a98d0040d964a2f82af25289a731d1400c5224ca9bb3d225d737700700a8#rd');
        wx.navigateTo({ url: '/pages/index/web/web?url=' + url });
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: async function () {
        await this.getuserTels();
        wx.stopPullDownRefresh();
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRDQUFvQztBQUdwQyxJQUFJLENBQUM7SUFLSCxJQUFJLEVBQUU7UUFDSixJQUFJLEVBQUUsRUFBcUI7UUFDM0IsSUFBSSxFQUFFLEVBQUU7UUFDUixLQUFLLEVBQUUsRUFBRTtLQUNWO0lBS0QsTUFBTSxFQUFFO1FBQ04sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQ25CLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUNwQixDQUFDO0lBRUQsWUFBWTtRQUNWLGFBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDdEIsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFO2dCQUNYLElBQUksQ0FBQyxPQUFPLENBQUM7b0JBQ1gsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRztpQkFDbEIsQ0FBQyxDQUFBO2FBQ0g7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxLQUFLLENBQUMsV0FBVztRQUNmLE1BQU0sRUFBRSxHQUFHLE1BQU0sYUFBRyxDQUFDLGlCQUFpQixFQUFFLENBQUE7UUFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzdCLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2hDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBMEI7UUFDbkMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUE7UUFFcEQsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSwrQ0FBK0M7WUFDcEQsTUFBTSxFQUFDO2dCQUNMLFFBQVEsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBcUMsRUFBQyxFQUFFO29CQUMzRCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtnQkFDOUIsQ0FBQzthQUNGO1lBQ0QsT0FBTyxDQUFDLEdBQUc7Z0JBQ1QsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ2xGLENBQUM7U0FDRixDQUFDLENBQUE7SUF5Q0osQ0FBQztJQUVELFlBQVksQ0FBQyxJQUFjLEVBQUUsS0FBZTtRQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3JCLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUN4QixDQUFDLENBQUE7UUFDRixFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQTtJQUMzQixDQUFDO0lBS0QsS0FBSyxDQUFDLFVBQVU7UUFDZCxNQUFNLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQyxnTUFBZ00sQ0FBQyxDQUFBO1FBQ2hPLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxHQUFHLEVBQUUsMkJBQTJCLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQTtJQUMzRCxDQUFDO0lBSUQsT0FBTyxFQUFFO0lBRVQsQ0FBQztJQUtELE1BQU0sRUFBRTtJQUVSLENBQUM7SUFLRCxNQUFNLEVBQUU7SUFFUixDQUFDO0lBS0QsUUFBUSxFQUFFO0lBRVYsQ0FBQztJQUtELGlCQUFpQixFQUFFLEtBQUs7UUFDdEIsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDeEIsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUE7SUFDMUIsQ0FBQztJQUtELGFBQWEsRUFBRTtJQUVmLENBQUM7SUFLRCxpQkFBaUIsRUFBRTtJQUVuQixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvYXBpXCJcblxuLy8gbWluaXByb2dyYW0vcGFnZXMvaW5kZXgvYWxhcm1TZXR0aW5nL2luZGV4LmpzXG5QYWdlKHtcblxuICAvKipcbiAgICog6aG16Z2i55qE5Yid5aeL5pWw5o2uXG4gICAqL1xuICBkYXRhOiB7XG4gICAgZGV2czogW10gYXMgVWFydC5UZXJtaW5hbFtdLFxuICAgIHRlbHM6ICcnLFxuICAgIG1haWxzOiAnJ1xuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWKoOi9vVxuICAgKi9cbiAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zb3J0RGV2c2xpc3QoKVxuICAgIHRoaXMuZ2V0dXNlclRlbHMoKVxuICB9LFxuXG4gIHNvcnREZXZzbGlzdCgpIHtcbiAgICBhcGkuQmluZERldigpLnRoZW4oZWwgPT4ge1xuICAgICAgaWYgKGVsLmNvZGUpIHtcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICBkZXZzOiBlbC5kYXRhLlVUc1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG4gIGFzeW5jIGdldHVzZXJUZWxzKCkge1xuICAgIGNvbnN0IGVsID0gYXdhaXQgYXBpLmdldFVzZXJBbGFybVNldHVwKClcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgdGVsczogZWwuZGF0YS50ZWxzLmpvaW4oJ1xcbicpLFxuICAgICAgbWFpbHM6IGVsLmRhdGEubWFpbHMuam9pbignXFxuJylcbiAgICB9KVxuICB9LFxuICAvLyDkv67mlLnnlKjmiLfogZTns7vmlrnlvI9cbiAgbW9kaWZ5VGVsbChldmVudDogdmFudEV2ZW50PHN0cmluZ1tdPikge1xuICAgIGNvbnN0IFt0ZWwsIG1haWxdID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0Lml0ZW1cbiAgICAvL2NvbnN0IGEgPSB0aGlzLnB1c2h1c2VyVGVscy8vKHRlbCwgbWFpbClcbiAgICB3eC5uYXZpZ2F0ZVRvKHtcbiAgICAgIHVybDogXCIvcGFnZXMvaW5kZXgvYWxhcm1TZXR0aW5nL21vZGlmeVRlbC9tb2RpZnlUZWxcIiwvLytPYmplY3RUb1N0cnF1ZXJ5KHt0ZWwsbWFpbH0pLFxuICAgICAgZXZlbnRzOntcbiAgICAgICAgbW9kaWZ5T2s6KHsgdGVsLCBtYWlsIH06IHsgdGVsOiBzdHJpbmdbXSwgbWFpbDogc3RyaW5nW10gfSk9PiB7XG4gICAgICAgICAgdGhpcy5wdXNodXNlclRlbHModGVsLCBtYWlsKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc3VjY2VzcyhyZXMpIHtcbiAgICAgICAgcmVzLmV2ZW50Q2hhbm5lbC5lbWl0KCdhbGFybScsIHsgdGVsOiB0ZWwuc3BsaXQoXCJcXG5cIiksIG1haWw6IG1haWwuc3BsaXQoXCJcXG5cIikgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLyogY29uc3QgeyBkZXRhaWwsIGN1cnJlbnRUYXJnZXQ6IHsgZGF0YXNldCB9IH0gPSBldmVudFxuICAgIGNvbnN0IHZhbHVlID0gQXJyYXkuZnJvbShuZXcgU2V0KChkZXRhaWwudmFsdWUgYXMgc3RyaW5nKS5yZXBsYWNlKC8oXFwsfFxc77yMKS9nLCAnXFxuJykuc3BsaXQoJ1xcbicpLmZpbHRlcihlbCA9PiBlbCkpKVxuICAgIGNvbnN0IGtleSA9IGRhdGFzZXQua2V5IGFzIHN0cmluZ1xuICAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSAndGVsJzpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IG9rID0gdmFsdWUuZXZlcnkoZWwgPT4gUmdleHBUZWwoZWwpKVxuICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgICB3eC5zaG93TW9kYWwoe1xuICAgICAgICAgICAgICB0aXRsZTogXCLplJnor69cIixcbiAgICAgICAgICAgICAgY29udGVudDogXCLmnIDlpJrlj6rog73kv53lrZgz5Liq5Y+356CB77yB77yBXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2h1c2VyVGVscyh2YWx1ZSwgbnVsbClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3guc2hvd01vZGFsKHtcbiAgICAgICAgICAgICAgdGl0bGU6ICfmoLzlvI/plJnor68nLFxuICAgICAgICAgICAgICBjb250ZW50OiAn5omL5py65Y+356CB5qC85byP5LiN5q2j56GuJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgXCJtYWlsXCI6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBvayA9IHZhbHVlLmV2ZXJ5KGVsID0+IFJnZXhwTWFpbChlbCkpXG4gICAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2h1c2VyVGVscyhudWxsLCB2YWx1ZSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3guc2hvd01vZGFsKHtcbiAgICAgICAgICAgICAgdGl0bGU6ICfmoLzlvI/plJnor68nLFxuICAgICAgICAgICAgICBjb250ZW50OiAn6YKu566x5qC85byP5LiN5q2j56GuJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9ICovXG4gIH0sXG4gIC8vIOaPkOS6pOS/ruaUueiBlOezu+aWueW8j1xuICBwdXNodXNlclRlbHModGVsczogc3RyaW5nW10sIG1haWxzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICB0ZWxzOiB0ZWxzLmpvaW4oJ1xcbicpLFxuICAgICAgbWFpbHM6IG1haWxzLmpvaW4oJ1xcbicpXG4gICAgfSlcbiAgICB3eC5zdGFydFB1bGxEb3duUmVmcmVzaCgpXG4gIH0sXG5cbiAgLyoqXG4gICAqIOiuoumYheS4i+asoeWRiuitplxuICAgKi9cbiAgYXN5bmMgc3ViTWVzc2FnZSgpIHtcbiAgICBjb25zdCB1cmwgPSBlbmNvZGVVUklDb21wb25lbnQoJ2h0dHA6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TWpNNU1qQTFNVGd4T1E9PSZtaWQ9MzA0ODE5OTM5JmlkeD0xJnNuPWQwYmNkOTIyMDMzMDc1YWZhMmI1MjE5ZmM5NWViYjFlJmNoa3NtPTMxNzNhOWU3MDYwNDIwZjFhOThkMDA0MGQ5NjRhMmY4MmFmMjUyODlhNzMxZDE0MDBjNTIyNGNhOWJiM2QyMjVkNzM3NzAwNzAwYTgjcmQnKVxuICAgIHd4Lm5hdmlnYXRlVG8oeyB1cmw6ICcvcGFnZXMvaW5kZXgvd2ViL3dlYj91cmw9JyArIHVybCB9KVxuICB9LFxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliJ3mrKHmuLLmn5PlrozmiJBcbiAgICovXG4gIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouaYvuekulxuICAgKi9cbiAgb25TaG93OiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLpmpDol49cbiAgICovXG4gIG9uSGlkZTogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Y246L29XG4gICAqL1xuICBvblVubG9hZDogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOmhtemdouebuOWFs+S6i+S7tuWkhOeQhuWHveaVsC0t55uR5ZCs55So5oi35LiL5ouJ5Yqo5L2cXG4gICAqL1xuICBvblB1bGxEb3duUmVmcmVzaDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IHRoaXMuZ2V0dXNlclRlbHMoKVxuICAgIHd4LnN0b3BQdWxsRG93blJlZnJlc2goKVxuICB9LFxuXG4gIC8qKlxuICAgKiDpobXpnaLkuIrmi4nop6blupXkuovku7bnmoTlpITnkIblh73mlbBcbiAgICovXG4gIG9uUmVhY2hCb3R0b206IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlKjmiLfngrnlh7vlj7PkuIrop5LliIbkuqtcbiAgICovXG4gIG9uU2hhcmVBcHBNZXNzYWdlOiBmdW5jdGlvbiAoKSB7XG5cbiAgfVxufSkiXX0=
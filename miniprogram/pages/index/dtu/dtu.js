"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../../utils/util");
const api_1 = require("../../../utils/api");
Page({
    data: {
        mac: '',
        terminal: {},
        dtuItem: [],
        jwSupport: false,
        longitude: '',
        latitude: '',
        markers: [],
        address: '',
        recommend: '',
        devPics: {
            "UPS": 'https://besiv-uart.oss-cn-hangzhou.aliyuncs.com/png/99daa3e07c7b60ef7e16ed8b9fe7cf33.png',
            "温湿度": 'https://besiv-uart.oss-cn-hangzhou.aliyuncs.com/png/5fc7d6fe0571b714d5a3395a8c7a9f12.png',
            "电量仪": 'https://besiv-uart.oss-cn-hangzhou.aliyuncs.com/png/ab52d9fccdddc0fa5b0386ea0b5cbc7f.png',
            "空调": 'https://besiv-uart.oss-cn-hangzhou.aliyuncs.com/png/c3c1852270ca35fd56135d8fda2a9977.png'
        },
    },
    onLoad: function (options) {
        this.setData({
            mac: options.mac
        });
        this.start();
    },
    async start() {
        const { data: terminal } = await api_1.default.getTerminal(this.data.mac);
        const jw = terminal.jw && terminal.jw.length > 10 ? terminal.jw.split(',') : false;
        terminal.uptime = (0, util_1.parseTime)(terminal.uptime);
        const devs = terminal.mountDevs.map(dev => {
            dev.pic = this.data.devPics[dev.Type];
            return dev;
        });
        this.setData({
            terminal,
            dtuItem: devs,
            jwSupport: Boolean(jw),
        });
        if (jw) {
            const mark = {
                iconPath: "../../../assert/mark.png",
                latitude: Number(jw[1]),
                longitude: Number(jw[0]),
                title: terminal.name,
                width: 50,
                height: 50
            };
            this.setData({
                longitude: jw[0],
                latitude: jw[1],
                markers: [mark]
            });
            api_1.default.getGPSaddress([jw[1], jw[0]].join(',')).then(({ code, data, msg }) => {
                if (code) {
                    this.setData({
                        address: data.address,
                        recommend: data.formatted_addresses.recommend
                    });
                }
                else {
                    wx.showToast({ title: msg });
                }
            });
        }
        wx.setNavigationBarTitle({ title: terminal.name || terminal.DevMac });
    },
    showMountDevData(event) {
        const { pid, mountDev, protocol, Type } = event.currentTarget.dataset.item;
        const { DevMac } = this.data.terminal;
        wx.navigateTo({
            url: '/pages/index/devs/devs' + (0, util_1.ObjectToStrquery)({ pid: String(pid), mountDev, protocol, DevMac, Type })
        });
    },
    markertap(_e) {
    },
    async nameChange(event) {
        const value = event.detail.value;
        const { code, msg } = await api_1.default.modifyTerminal(this.data.terminal.DevMac, value);
        if (!code) {
            wx.showModal({
                title: "Error",
                content: msg
            });
        }
        else {
            this.setData({
                "terminal.name": value
            });
            wx.setStorage({
                key: this.data.terminal._id,
                data: this.data.terminal
            });
        }
    },
    updateGps() {
        const setupGps = this.setupGps;
        wx.showModal({
            title: 'Tip',
            content: '是否把DTU定位更新为当前地址?',
            success(ok) {
                wx.showLoading({
                    title: '请稍等'
                });
                if (ok.confirm) {
                    wx.getSetting({
                        success(res) {
                            if (!res.authSetting["scope.userLocation"]) {
                                wx.authorize({
                                    scope: "scope.userLocation",
                                    success() {
                                        setupGps();
                                    }
                                });
                            }
                            else {
                                setupGps();
                            }
                        }
                    });
                }
            }
        });
    },
    setupGps() {
        const { terminal } = this.data;
        wx.getLocation({
            success: (location) => {
                terminal.jw = [location.longitude.toFixed(5), location.latitude.toFixed(5)].join(',');
                wx.hideLoading();
                wx.setStorage({
                    key: terminal._id,
                    data: terminal,
                    success: () => {
                        this.start();
                    }
                });
                api_1.default.updateGps(terminal.DevMac, terminal.jw).then(el => {
                    if (el.code) {
                        wx.showToast({ title: '更新定位成功' });
                    }
                    else {
                        wx.showToast({ title: el.msg, icon: 'none' });
                    }
                    wx.hideLoading();
                });
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,
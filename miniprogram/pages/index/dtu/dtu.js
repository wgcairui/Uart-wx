"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = require("../../../utils/api");
Page({
    data: {
        terminal: {},
        jwSupport: false,
        longitude: '',
        latitude: '',
        markers: [],
        address: '',
        recommend: ''
    },
    onLoad: function (options) {
        var _this = this;
        var id = options.id;
        if (id) {
            var terminal = wx.getStorageSync(id);
            var jw = terminal.jw && terminal.jw.length > 10 ? terminal.jw.split(',') : false;
            console.log(jw);
            this.setData({
                terminal: terminal,
                jwSupport: Boolean(jw),
            });
            if (jw) {
                var mark = {
                    iconPath: "../../../assert/mark.png",
                    latitude: jw[1],
                    longitude: jw[0],
                    title: terminal.DevMac,
                    width: 50,
                    height: 50
                };
                this.setData({
                    longitude: jw[0],
                    latitude: jw[1],
                    markers: [mark]
                });
                api_1.default.getGPSaddress([jw[1], jw[0]].join(',')).then(function (_a) {
                    var ok = _a.ok, arg = _a.arg;
                    if (ok) {
                        _this.setData({
                            address: arg.result.address,
                            recommend: arg.result.formatted_addresses.recommend
                        });
                    }
                });
            }
            wx.setNavigationBarTitle({ title: terminal.name });
        }
    },
    markertap: function (_e) {
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHR1LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHR1LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMENBQW9DO0FBR3BDLElBQUksQ0FBQztJQUtILElBQUksRUFBRTtRQUNKLFFBQVEsRUFBRSxFQUFjO1FBQ3hCLFNBQVMsRUFBRSxLQUFLO1FBQ2hCLFNBQVMsRUFBRSxFQUFFO1FBQ2IsUUFBUSxFQUFFLEVBQUU7UUFDWixPQUFPLEVBQUUsRUFBVztRQUNwQixPQUFPLEVBQUUsRUFBRTtRQUNYLFNBQVMsRUFBRSxFQUFFO0tBRWQ7SUFLRCxNQUFNLEVBQUUsVUFBVSxPQUFPO1FBQWpCLGlCQXNDUDtRQXJDQyxJQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFBO1FBQ3JCLElBQUksRUFBRSxFQUFFO1lBQ04sSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQWEsQ0FBQTtZQUNsRCxJQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxJQUFJLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtZQUNsRixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRWhCLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsUUFBUSxVQUFBO2dCQUNSLFNBQVMsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDO2FBQ3ZCLENBQUMsQ0FBQTtZQUNGLElBQUksRUFBRSxFQUFFO2dCQUNOLElBQU0sSUFBSSxHQUFHO29CQUNYLFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNmLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNoQixLQUFLLEVBQUUsUUFBUSxDQUFDLE1BQU07b0JBQ3RCLEtBQUssRUFBRSxFQUFFO29CQUNULE1BQU0sRUFBRSxFQUFFO2lCQUNYLENBQUE7Z0JBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQztvQkFDWCxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDaEIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ2YsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO2lCQUNoQixDQUFDLENBQUE7Z0JBRUYsYUFBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxFQUFXO3dCQUFULFVBQUUsRUFBRSxZQUFHO29CQUN6RCxJQUFJLEVBQUUsRUFBRTt3QkFDTixLQUFJLENBQUMsT0FBTyxDQUFDOzRCQUNYLE9BQU8sRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU87NEJBQzNCLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVM7eUJBQ3BELENBQUMsQ0FBQTtxQkFDSDtnQkFDSCxDQUFDLENBQUMsQ0FBQTthQUNIO1lBQ0QsRUFBRSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1NBQ25EO0lBRUgsQ0FBQztJQUVELFNBQVMsRUFBVCxVQUFVLEVBQWE7SUFVdkIsQ0FBQztJQUlELE9BQU8sRUFBRTtJQUVULENBQUM7SUFLRCxNQUFNLEVBQUU7SUFFUixDQUFDO0lBS0QsTUFBTSxFQUFFO0lBRVIsQ0FBQztJQUtELFFBQVEsRUFBRTtJQUVWLENBQUM7SUFLRCxpQkFBaUIsRUFBRTtJQUVuQixDQUFDO0lBS0QsYUFBYSxFQUFFO0lBRWYsQ0FBQztJQUtELGlCQUFpQixFQUFFO0lBRW5CLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBpIGZyb20gXCIuLi8uLi8uLi91dGlscy9hcGlcIlxuXG4vLyBtaW5pcHJvZ3JhbS9wYWdlcy9pbmRleC9kdHUvZHR1LmpzXG5QYWdlKHtcblxuICAvKipcbiAgICog6aG16Z2i55qE5Yid5aeL5pWw5o2uXG4gICAqL1xuICBkYXRhOiB7XG4gICAgdGVybWluYWw6IHt9IGFzIFRlcm1pbmFsLFxuICAgIGp3U3VwcG9ydDogZmFsc2UsXG4gICAgbG9uZ2l0dWRlOiAnJyxcbiAgICBsYXRpdHVkZTogJycsXG4gICAgbWFya2VyczogW10gYXMgYW55W10sXG4gICAgYWRkcmVzczogJycsXG4gICAgcmVjb21tZW5kOiAnJ1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yqg6L29XG4gICAqL1xuICBvbkxvYWQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgY29uc3QgaWQgPSBvcHRpb25zLmlkXG4gICAgaWYgKGlkKSB7XG4gICAgICBjb25zdCB0ZXJtaW5hbCA9IHd4LmdldFN0b3JhZ2VTeW5jKGlkKSBhcyBUZXJtaW5hbFxuICAgICAgY29uc3QgancgPSB0ZXJtaW5hbC5qdyAmJiB0ZXJtaW5hbC5qdy5sZW5ndGggPiAxMCA/IHRlcm1pbmFsLmp3LnNwbGl0KCcsJykgOiBmYWxzZVxuICAgICAgY29uc29sZS5sb2coancpO1xuICAgICAgXG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICB0ZXJtaW5hbCxcbiAgICAgICAgandTdXBwb3J0OiBCb29sZWFuKGp3KSxcbiAgICAgIH0pXG4gICAgICBpZiAoancpIHtcbiAgICAgICAgY29uc3QgbWFyayA9IHtcbiAgICAgICAgICBpY29uUGF0aDogXCIuLi8uLi8uLi9hc3NlcnQvbWFyay5wbmdcIixcbiAgICAgICAgICBsYXRpdHVkZTogandbMV0sXG4gICAgICAgICAgbG9uZ2l0dWRlOiBqd1swXSxcbiAgICAgICAgICB0aXRsZTogdGVybWluYWwuRGV2TWFjLFxuICAgICAgICAgIHdpZHRoOiA1MCxcbiAgICAgICAgICBoZWlnaHQ6IDUwXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICBsb25naXR1ZGU6IGp3WzBdLFxuICAgICAgICAgIGxhdGl0dWRlOiBqd1sxXSxcbiAgICAgICAgICBtYXJrZXJzOiBbbWFya11cbiAgICAgICAgfSlcbiAgICAgICAgLy8g5qC55o2uZ3Bz6I635Y+W5Zyw5Z2AXG4gICAgICAgIGFwaS5nZXRHUFNhZGRyZXNzKFtqd1sxXSwgandbMF1dLmpvaW4oJywnKSkudGhlbigoeyBvaywgYXJnIH0pID0+IHtcbiAgICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgICAgIGFkZHJlc3M6IGFyZy5yZXN1bHQuYWRkcmVzcyxcbiAgICAgICAgICAgICAgcmVjb21tZW5kOiBhcmcucmVzdWx0LmZvcm1hdHRlZF9hZGRyZXNzZXMucmVjb21tZW5kXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHd4LnNldE5hdmlnYXRpb25CYXJUaXRsZSh7IHRpdGxlOiB0ZXJtaW5hbC5uYW1lIH0pXG4gICAgfVxuXG4gIH0sXG5cbiAgbWFya2VydGFwKF9lOiB2YW50RXZlbnQpIHtcbiAgICAvKiBjb25zdCBtYXAgPSB3eC5jcmVhdGVNYXBDb250ZXh0KGUuY3VycmVudFRhcmdldC5pZClcbiAgICBtYXAuZ2V0Q2VudGVyTG9jYXRpb24oe1xuICAgICAgc3VjY2VzcyhlMil7XG4gICAgICAgIGNvbnNvbGUubG9nKGUyKTtcbiAgICAgICAgXG4gICAgICB9XG4gICAgfSlcbiAgICBcbiAqL1xuICB9LFxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliJ3mrKHmuLLmn5PlrozmiJBcbiAgICovXG4gIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouaYvuekulxuICAgKi9cbiAgb25TaG93OiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLpmpDol49cbiAgICovXG4gIG9uSGlkZTogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Y246L29XG4gICAqL1xuICBvblVubG9hZDogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOmhtemdouebuOWFs+S6i+S7tuWkhOeQhuWHveaVsC0t55uR5ZCs55So5oi35LiL5ouJ5Yqo5L2cXG4gICAqL1xuICBvblB1bGxEb3duUmVmcmVzaDogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOmhtemdouS4iuaLieinpuW6leS6i+S7tueahOWkhOeQhuWHveaVsFxuICAgKi9cbiAgb25SZWFjaEJvdHRvbTogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUqOaIt+eCueWHu+WPs+S4iuinkuWIhuS6q1xuICAgKi9cbiAgb25TaGFyZUFwcE1lc3NhZ2U6IGZ1bmN0aW9uICgpIHtcblxuICB9XG59KSJdfQ==
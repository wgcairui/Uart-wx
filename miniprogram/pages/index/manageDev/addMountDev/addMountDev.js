"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../../../utils/api");
Page({
    data: {
        terminal: {},
        columns: [],
        devType: 'UPS',
        devTypes: [{ text: 'UPS', value: 'UPS' }, { text: '空调', value: '空调' }, { text: '电量仪', value: '电量仪' }, { text: '温湿度', value: '温湿度' }],
        devModal: '',
        devModals: [],
        devModesMap: new Map(),
        devProtocol: '',
        devProtocols: [],
        pid: 1
    },
    onLoad: function (options) {
        if (options.item) {
            const item = JSON.parse(options.item);
            const hasPid = new Set(item.mountDevs.map(el => el.pid));
            let columns = [];
            for (let i = 0; i < 255; i++) {
                columns.push({ text: i, disabled: hasPid.has(i) });
            }
            this.setData({
                terminal: item,
                columns
            });
            this.devTypeChange();
            wx.setNavigationBarTitle({ title: item.name });
        }
        else {
            wx.switchTab({ url: '/pages/index/index' });
        }
    },
    async devTypeChange() {
        const { arg } = await api_1.default.DevTypes(this.data.devType);
        const devModals = arg.map(el => ({ text: el.DevModel, value: el.DevModel }));
        this.setData({
            devModals,
            devProtocols: [],
            devModesMap: new Map(arg.map(el => [el.DevModel, el]))
        });
    },
    async devModalChange() {
        const { devModesMap, devModal } = this.data;
        const devProtocols = devModesMap.get(devModal)?.Protocols.map(el => ({ text: el.Protocol, value: el.Protocol }));
        this.setData({
            devProtocols
        });
    },
    pidChange(event) {
        this.setData({
            pid: event.detail.value.text
        });
        console.log({ event, p: this.data.pid });
    },
    async addMountDev() {
        const { devModal, devType, devProtocol, pid, terminal } = this.data;
        console.log(this.data);
        if (devProtocol && devType && devProtocol) {
            const { ok } = await api_1.default.addTerminalMountDe(terminal.DevMac, devType, devModal, devProtocol, pid);
            if (ok) {
                const event = this.getOpenerEventChannel();
                event.emit("addSuccess", { stat: true });
                wx.navigateBack();
            }
            else {
                wx.showModal({
                    title: '提交失败',
                    content: '请检查参数并重新提交'
                });
            }
        }
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkTW91bnREZXYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhZGRNb3VudERldi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUF1QztBQU12QyxJQUFJLENBQUM7SUFLSCxJQUFJLEVBQUU7UUFDSixRQUFRLEVBQUUsRUFBYztRQUN4QixPQUFPLEVBQUUsRUFBVztRQUNwQixPQUFPLEVBQUUsS0FBSztRQUNkLFFBQVEsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQWdCO1FBQ25KLFFBQVEsRUFBRSxFQUFFO1FBQ1osU0FBUyxFQUFFLEVBQWlCO1FBQzVCLFdBQVcsRUFBRSxJQUFJLEdBQUcsRUFBMkI7UUFDL0MsV0FBVyxFQUFFLEVBQUU7UUFDZixZQUFZLEVBQUUsRUFBaUI7UUFDL0IsR0FBRyxFQUFFLENBQUM7S0FDUDtJQUtELE1BQU0sRUFBRSxVQUFVLE9BQU87UUFDdkIsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBYSxDQUFBO1lBQ2pELE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFDeEQsSUFBSSxPQUFPLEdBQUcsRUFBVyxDQUFBO1lBQ3pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUs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Q0FBQyxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtnQkFDeEMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFBO2FBUWxCO2lCQUFNO2dCQUNMLEVBQUUsQ0FBQyxTQUFTLENBQUM7b0JBQ1gsS0FBSyxFQUFFLE1BQU07b0JBQ2IsT0FBTyxFQUFFLFlBQVk7aUJBQ3RCLENBQUMsQ0FBQTthQUNIO1NBQ0Y7SUFFSCxDQUFDO0lBS0QsT0FBTyxFQUFFO0lBRVQsQ0FBQztJQUtELE1BQU0sRUFBRTtJQUVSLENBQUM7SUFLRCxNQUFNLEVBQUU7SUFFUixDQUFDO0lBS0QsUUFBUSxFQUFFO0lBRVYsQ0FBQztJQUtELGlCQUFpQixFQUFFO0lBRW5CLENBQUM7SUFLRCxhQUFhLEVBQUU7SUFFZixDQUFDO0lBS0QsaUJBQWlCLEVBQUU7SUFFbkIsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL2FwaVwiXG5pbnRlcmZhY2UgZGV2TW9kYWxzIHtcbiAgdGV4dDogc3RyaW5nLFxuICB2YWx1ZTogc3RyaW5nXG59XG4vLyBtaW5pcHJvZ3JhbS9wYWdlcy9pbmRleC9tYW5hZ2VEZXYvYWRkTW91bnREZXYvYWRkTW91bnREZXYuanNcblBhZ2Uoe1xuXG4gIC8qKlxuICAgKiDpobXpnaLnmoTliJ3lp4vmlbDmja5cbiAgICovXG4gIGRhdGE6IHtcbiAgICB0ZXJtaW5hbDoge30gYXMgVGVybWluYWwsXG4gICAgY29sdW1uczogW10gYXMgYW55W10sXG4gICAgZGV2VHlwZTogJ1VQUycsXG4gICAgZGV2VHlwZXM6IFt7IHRleHQ6ICdVUFMnLCB2YWx1ZTogJ1VQUycgfSwgeyB0ZXh0OiAn56m66LCDJywgdmFsdWU6ICfnqbrosIMnIH0sIHsgdGV4dDogJ+eUtemHj+S7qicsIHZhbHVlOiAn55S16YeP5LuqJyB9LCB7IHRleHQ6ICfmuKnmub/luqYnLCB2YWx1ZTogJ+a4qea5v+W6picgfV0gYXMgZGV2TW9kYWxzW10sXG4gICAgZGV2TW9kYWw6ICcnLFxuICAgIGRldk1vZGFsczogW10gYXMgZGV2TW9kYWxzW10sXG4gICAgZGV2TW9kZXNNYXA6IG5ldyBNYXAoKSBhcyBNYXA8c3RyaW5nLCBEZXZzVHlwZT4sXG4gICAgZGV2UHJvdG9jb2w6ICcnLFxuICAgIGRldlByb3RvY29sczogW10gYXMgZGV2TW9kYWxzW10sXG4gICAgcGlkOiAxXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yqg6L29XG4gICAqL1xuICBvbkxvYWQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaXRlbSkge1xuICAgICAgY29uc3QgaXRlbSA9IEpTT04ucGFyc2Uob3B0aW9ucy5pdGVtKSBhcyBUZXJtaW5hbFxuICAgICAgY29uc3QgaGFzUGlkID0gbmV3IFNldChpdGVtLm1vdW50RGV2cy5tYXAoZWwgPT4gZWwucGlkKSlcbiAgICAgIGxldCBjb2x1bW5zID0gW10gYXMgYW55W11cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU1OyBpKyspIHtcbiAgICAgICAgY29sdW1ucy5wdXNoKHsgdGV4dDogaSwgZGlzYWJsZWQ6IGhhc1BpZC5oYXMoaSkgfSlcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIHRlcm1pbmFsOiBpdGVtLFxuICAgICAgICBjb2x1bW5zXG4gICAgICB9KVxuICAgICAgdGhpcy5kZXZUeXBlQ2hhbmdlKClcbiAgICAgIHd4LnNldE5hdmlnYXRpb25CYXJUaXRsZSh7IHRpdGxlOiBpdGVtLm5hbWUgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgd3guc3dpdGNoVGFiKHsgdXJsOiAnL3BhZ2VzL2luZGV4L2luZGV4JyB9KVxuICAgIH1cbiAgfSxcbiAgLy8g55uR5ZCs6K6+5aSH57G75Z6L5Y+Y5YyWXG4gIGFzeW5jIGRldlR5cGVDaGFuZ2UoKSB7XG4gICAgY29uc3QgeyBhcmcgfSA9IGF3YWl0IGFwaS5EZXZUeXBlcyh0aGlzLmRhdGEuZGV2VHlwZSlcbiAgICBjb25zdCBkZXZNb2RhbHMgPSBhcmcubWFwKGVsID0+ICh7IHRleHQ6IGVsLkRldk1vZGVsLCB2YWx1ZTogZWwuRGV2TW9kZWwgfSkpXG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIGRldk1vZGFscyxcbiAgICAgIGRldlByb3RvY29sczogW10sXG4gICAgICBkZXZNb2Rlc01hcDogbmV3IE1hcChhcmcubWFwKGVsID0+IFtlbC5EZXZNb2RlbCwgZWxdKSlcbiAgICB9KVxuICB9LFxuICAvLyDnm5HlkKzorr7lpIflnovlj7flj5jljJZcbiAgYXN5bmMgZGV2TW9kYWxDaGFuZ2UoKSB7XG4gICAgY29uc3QgeyBkZXZNb2Rlc01hcCwgZGV2TW9kYWwgfSA9IHRoaXMuZGF0YVxuICAgIGNvbnN0IGRldlByb3RvY29scyA9IGRldk1vZGVzTWFwLmdldChkZXZNb2RhbCk/LlByb3RvY29scy5tYXAoZWwgPT4gKHsgdGV4dDogZWwuUHJvdG9jb2wsIHZhbHVlOiBlbC5Qcm90b2NvbCB9KSkhXG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIGRldlByb3RvY29sc1xuICAgIH0pXG4gIH0sXG4gIC8vIOebkeWQrHBpZFxuICBwaWRDaGFuZ2UoZXZlbnQ6IHZhbnRFdmVudCkge1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBwaWQ6IGV2ZW50LmRldGFpbC52YWx1ZS50ZXh0XG4gICAgfSlcbiAgICBjb25zb2xlLmxvZyh7ZXZlbnQscDp0aGlzLmRhdGEucGlkfSk7XG4gICAgXG4gIH0sXG4gIC8vIOaPkOS6pOaWsOWinlxuICBhc3luYyBhZGRNb3VudERldigpIHtcbiAgICBjb25zdCB7IGRldk1vZGFsLCBkZXZUeXBlLCBkZXZQcm90b2NvbCwgcGlkLCB0ZXJtaW5hbCB9ID0gdGhpcy5kYXRhXG4gICAgY29uc29sZS5sb2codGhpcy5kYXRhKTtcbiAgICBcbiAgICBpZiAoZGV2UHJvdG9jb2wgJiYgZGV2VHlwZSAmJiBkZXZQcm90b2NvbCkge1xuICAgICAgY29uc3QgeyBvayB9ID0gYXdhaXQgYXBpLmFkZFRlcm1pbmFsTW91bnREZSh0ZXJtaW5hbC5EZXZNYWMsIGRldlR5cGUsIGRldk1vZGFsLCBkZXZQcm90b2NvbCwgcGlkIGFzIGFueSlcbiAgICAgIGlmIChvaykge1xuICAgICAgICBjb25zdCBldmVudCA9IHRoaXMuZ2V0T3BlbmVyRXZlbnRDaGFubmVsKClcbiAgICAgICAgZXZlbnQuZW1pdChcImFkZFN1Y2Nlc3NcIiwgeyBzdGF0OiB0cnVlIH0pXG4gICAgICAgIHd4Lm5hdmlnYXRlQmFjaygpXG4gICAgICAgIC8qIHd4LnNob3dNb2RhbCh7XG4gICAgICAgICAgdGl0bGU6ICdTdWNjZXNzJyxcbiAgICAgICAgICBjb250ZW50OiAn5re75Yqg6K6+5aSH5oiQ5Yqf77yM5piv5ZCm6L+U5Zue5LiK5LiA6aG16Z2iPycsXG4gICAgICAgICAgc3VjY2VzcyhyZXMpIHtcbiAgICAgICAgICAgIGlmIChyZXMuY29uZmlybSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pICovXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3eC5zaG93TW9kYWwoe1xuICAgICAgICAgIHRpdGxlOiAn5o+Q5Lqk5aSx6LSlJyxcbiAgICAgICAgICBjb250ZW50OiAn6K+35qOA5p+l5Y+C5pWw5bm26YeN5paw5o+Q5LqkJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWIneasoea4suafk+WujOaIkFxuICAgKi9cbiAgb25SZWFkeTogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5pi+56S6XG4gICAqL1xuICBvblNob3c6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdoumakOiXj1xuICAgKi9cbiAgb25IaWRlOiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLljbjovb1cbiAgICovXG4gIG9uVW5sb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog6aG16Z2i55u45YWz5LqL5Lu25aSE55CG5Ye95pWwLS3nm5HlkKznlKjmiLfkuIvmi4nliqjkvZxcbiAgICovXG4gIG9uUHVsbERvd25SZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog6aG16Z2i5LiK5ouJ6Kem5bqV5LqL5Lu255qE5aSE55CG5Ye95pWwXG4gICAqL1xuICBvblJlYWNoQm90dG9tOiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog55So5oi354K55Ye75Y+z5LiK6KeS5YiG5LqrXG4gICAqL1xuICBvblNoYXJlQXBwTWVzc2FnZTogZnVuY3Rpb24gKCkge1xuXG4gIH1cbn0pIl19
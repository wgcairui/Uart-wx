"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../../../utils/api");
Page({
    data: {
        terminal: {},
        columns: [],
        devType: 'UPS',
        devTypes: [{ text: 'UPS', value: 'UPS' }, { text: '空调', value: '空调' }, { text: '电量仪', value: '电量仪' }, { text: '温湿度', value: '温湿度' }],
        devModal: '',
        devModals: [],
        devModesMap: new Map(),
        devProtocol: '',
        pids: [],
        pid: 1
    },
    onLoad: async function (options) {
        if (options.mac) {
            const { data: terminal } = await api_1.default.getTerminal(options.mac);
            const hasPid = new Set(terminal.mountDevs.map(el => el.pid));
            let columns = [];
            for (let i = 0; i < 255; i++) {
                if (!hasPid.has(i)) {
                    columns.push({ text: String(i), value: i });
                }
            }
            this.setData({
                terminal,
                columns
            });
            this.devTypeChange();
            wx.setNavigationBarTitle({ title: terminal.name });
        }
        else {
            wx.switchTab({ url: '/pages/index/index' });
        }
    },
    async devTypeChange() {
        const { data } = await api_1.default.getDevTypes(this.data.devType);
        const devModals = data.map(el => ({ text: el.DevModel, value: el.DevModel }));
        this.setData({
            devModals,
            devProtocols: [],
            devModesMap: new Map(data.map(el => [el.DevModel, el]))
        });
    },
    async devModalChange() {
        const { devModesMap, devModal } = this.data;
        const devProtocols = devModesMap.get(devModal)?.Protocols.map(el => ({ text: el.Protocol, value: el.Protocol }));
        this.setData({
            devProtocols
        });
    },
    async addMountDev() {
        const { devModal, devType, devProtocol, pid, terminal } = this.data;
        if (devProtocol && devType && devProtocol) {
            const { code } = await api_1.default.addTerminalMountDev(terminal.DevMac, { Type: devType, mountDev: devModal, protocol: devProtocol, pid });
            if (code) {
                const event = this.getOpenerEventChannel();
                event.emit("addSuccess", { stat: true });
                wx.navigateBack();
            }
            else {
                wx.showModal({
                    title: '提交失败',
                    content: '请检查参数并重新提交'
                });
            }
        }
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkTW91bnREZXYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhZGRNb3VudERldi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUF1QztBQU12QyxJQUFJLENBQUM7SUFLSCxJQUFJLEVBQUU7UUFDSixRQUFRLEVBQUUsRUFBbUI7UUFDN0IsT0FBTyxFQUFFLEVBQWlCO1FBQzFCLE9BQU8sRUFBRSxLQUFLO1FBQ2QsUUFBUSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBZ0I7UUFDbkosUUFBUSxFQUFFLEVBQUU7UUFDWixTQUFTLEVBQUUsRUFBaUI7UUFDNUIsV0FBVyxFQUFFLElBQUksR0FBRyxFQUFnQztRQUNwRCxXQUFXLEVBQUUsRUFBRTtRQUNmLElBQUksRUFBRSxFQUFpQjtRQUN2QixHQUFHLEVBQUUsQ0FBQztLQUNQO0lBS0QsTUFBTSxFQUFFLEtBQUssV0FBVyxPQUF3QjtRQUM5QyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNoQixNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sYUFBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDN0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUM1RCxJQUFJLE9BQU8sR0FBRyxFQUFpQixDQUFBO1lBQy9CLEtBQUssSUFBSSxD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O2dCQUNOLEVBQUUsQ0FBQyxTQUFTLENBQUM7b0JBQ1gsS0FBSyxFQUFFLE1BQU07b0JBQ2IsT0FBTyxFQUFFLFlBQVk7aUJBQ3RCLENBQUMsQ0FBQTtZQUNKLENBQUM7UUFDSCxDQUFDO0lBRUgsQ0FBQztJQUtELE9BQU8sRUFBRTtJQUVULENBQUM7SUFLRCxNQUFNLEVBQUU7SUFFUixDQUFDO0lBS0QsTUFBTSxFQUFFO0lBRVIsQ0FBQztJQUtELFFBQVEsRUFBRTtJQUVWLENBQUM7SUFLRCxpQkFBaUIsRUFBRTtJQUVuQixDQUFDO0lBS0QsYUFBYSxFQUFFO0lBRWYsQ0FBQztJQUtELGlCQUFpQixFQUFFO0lBRW5CLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBpIGZyb20gXCIuLi8uLi8uLi8uLi91dGlscy9hcGlcIlxuaW50ZXJmYWNlIGRldk1vZGFscyB7XG4gIHRleHQ6IHN0cmluZyxcbiAgdmFsdWU6IHN0cmluZyB8IG51bWJlclxufVxuLy8gbWluaXByb2dyYW0vcGFnZXMvaW5kZXgvbWFuYWdlRGV2L2FkZE1vdW50RGV2L2FkZE1vdW50RGV2LmpzXG5QYWdlKHtcblxuICAvKipcbiAgICog6aG16Z2i55qE5Yid5aeL5pWw5o2uXG4gICAqL1xuICBkYXRhOiB7XG4gICAgdGVybWluYWw6IHt9IGFzIFVhcnQuVGVybWluYWwsXG4gICAgY29sdW1uczogW10gYXMgZGV2TW9kYWxzW10sXG4gICAgZGV2VHlwZTogJ1VQUycsXG4gICAgZGV2VHlwZXM6IFt7IHRleHQ6ICdVUFMnLCB2YWx1ZTogJ1VQUycgfSwgeyB0ZXh0OiAn56m66LCDJywgdmFsdWU6ICfnqbrosIMnIH0sIHsgdGV4dDogJ+eUtemHj+S7qicsIHZhbHVlOiAn55S16YeP5LuqJyB9LCB7IHRleHQ6ICfmuKnmub/luqYnLCB2YWx1ZTogJ+a4qea5v+W6picgfV0gYXMgZGV2TW9kYWxzW10sXG4gICAgZGV2TW9kYWw6ICcnLFxuICAgIGRldk1vZGFsczogW10gYXMgZGV2TW9kYWxzW10sXG4gICAgZGV2TW9kZXNNYXA6IG5ldyBNYXAoKSBhcyBNYXA8c3RyaW5nLCBVYXJ0LkRldnNUeXBlPixcbiAgICBkZXZQcm90b2NvbDogJycsXG4gICAgcGlkczogW10gYXMgZGV2TW9kYWxzW10sXG4gICAgcGlkOiAxXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yqg6L29XG4gICAqL1xuICBvbkxvYWQ6IGFzeW5jIGZ1bmN0aW9uIChvcHRpb25zOiB7IG1hYzogc3RyaW5nIH0pIHtcbiAgICBpZiAob3B0aW9ucy5tYWMpIHtcbiAgICAgIGNvbnN0IHsgZGF0YTogdGVybWluYWwgfSA9IGF3YWl0IGFwaS5nZXRUZXJtaW5hbChvcHRpb25zLm1hYylcbiAgICAgIGNvbnN0IGhhc1BpZCA9IG5ldyBTZXQodGVybWluYWwubW91bnREZXZzLm1hcChlbCA9PiBlbC5waWQpKVxuICAgICAgbGV0IGNvbHVtbnMgPSBbXSBhcyBkZXZNb2RhbHNbXVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTU7IGkrKykge1xuICAgICAgICBpZiAoIWhhc1BpZC5oYXMoaSkpIHtcbiAgICAgICAgICBjb2x1bW5zLnB1c2goeyB0ZXh0OiBTdHJpbmcoaSksIHZhbHVlOiBpIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIHRlcm1pbmFsLFxuICAgICAgICBjb2x1bW5zXG4gICAgICB9KVxuICAgICAgdGhpcy5kZXZUeXBlQ2hhbmdlKClcbiAgICAgIHd4LnNldE5hdmlnYXRpb25CYXJUaXRsZSh7IHRpdGxlOiB0ZXJtaW5hbC5uYW1lIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHd4LnN3aXRjaFRhYih7IHVybDogJy9wYWdlcy9pbmRleC9pbmRleCcgfSlcbiAgICB9XG5cblxuICB9LFxuICAvLyDnm5HlkKzorr7lpIfnsbvlnovlj5jljJZcbiAgYXN5bmMgZGV2VHlwZUNoYW5nZSgpIHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGFwaS5nZXREZXZUeXBlcyh0aGlzLmRhdGEuZGV2VHlwZSlcbiAgICBjb25zdCBkZXZNb2RhbHMgPSBkYXRhLm1hcChlbCA9PiAoeyB0ZXh0OiBlbC5EZXZNb2RlbCwgdmFsdWU6IGVsLkRldk1vZGVsIH0pKVxuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBkZXZNb2RhbHMsXG4gICAgICBkZXZQcm90b2NvbHM6IFtdLFxuICAgICAgZGV2TW9kZXNNYXA6IG5ldyBNYXAoZGF0YS5tYXAoZWwgPT4gW2VsLkRldk1vZGVsLCBlbF0pKVxuICAgIH0pXG4gIH0sXG4gIC8vIOebkeWQrOiuvuWkh+Wei+WPt+WPmOWMllxuICBhc3luYyBkZXZNb2RhbENoYW5nZSgpIHtcbiAgICBjb25zdCB7IGRldk1vZGVzTWFwLCBkZXZNb2RhbCB9ID0gdGhpcy5kYXRhXG4gICAgY29uc3QgZGV2UHJvdG9jb2xzID0gZGV2TW9kZXNNYXAuZ2V0KGRldk1vZGFsKT8uUHJvdG9jb2xzLm1hcChlbCA9PiAoeyB0ZXh0OiBlbC5Qcm90b2NvbCwgdmFsdWU6IGVsLlByb3RvY29sIH0pKSFcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgZGV2UHJvdG9jb2xzXG4gICAgfSlcbiAgfSxcbiAgLy8g55uR5ZCscGlkXG4gLyogIHBpZENoYW5nZShldmVudDogdmFudEV2ZW50KSB7XG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIHBpZDogZXZlbnQuZGV0YWlsLnZhbHVlLnRleHRcbiAgICB9KVxuICAgIGNvbnNvbGUubG9nKHsgZXZlbnQsIHA6IHRoaXMuZGF0YS5waWQgfSk7XG5cbiAgfSwgKi9cbiAgLy8g5o+Q5Lqk5paw5aKeXG4gIGFzeW5jIGFkZE1vdW50RGV2KCkge1xuICAgIGNvbnN0IHsgZGV2TW9kYWwsIGRldlR5cGUsIGRldlByb3RvY29sLCBwaWQsIHRlcm1pbmFsIH0gPSB0aGlzLmRhdGFcbiAgICBpZiAoZGV2UHJvdG9jb2wgJiYgZGV2VHlwZSAmJiBkZXZQcm90b2NvbCkge1xuICAgICAgY29uc3QgeyBjb2RlIH0gPSBhd2FpdCBhcGkuYWRkVGVybWluYWxNb3VudERldih0ZXJtaW5hbC5EZXZNYWMsIHsgVHlwZTogZGV2VHlwZSwgbW91bnREZXY6IGRldk1vZGFsLCBwcm90b2NvbDogZGV2UHJvdG9jb2wsIHBpZCB9KVxuICAgICAgaWYgKGNvZGUpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLmdldE9wZW5lckV2ZW50Q2hhbm5lbCgpXG4gICAgICAgIGV2ZW50LmVtaXQoXCJhZGRTdWNjZXNzXCIsIHsgc3RhdDogdHJ1ZSB9KVxuICAgICAgICB3eC5uYXZpZ2F0ZUJhY2soKVxuICAgICAgICAvKiB3eC5zaG93TW9kYWwoe1xuICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcycsXG4gICAgICAgICAgY29udGVudDogJ+a3u+WKoOiuvuWkh+aIkOWKn++8jOaYr+WQpui/lOWbnuS4iuS4gOmhtemdoj8nLFxuICAgICAgICAgIHN1Y2Nlc3MocmVzKSB7XG4gICAgICAgICAgICBpZiAocmVzLmNvbmZpcm0pXG4gICAgICAgICAgfVxuICAgICAgICB9KSAqL1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3guc2hvd01vZGFsKHtcbiAgICAgICAgICB0aXRsZTogJ+aPkOS6pOWksei0pScsXG4gICAgICAgICAgY29udGVudDogJ+ivt+ajgOafpeWPguaVsOW5tumHjeaWsOaPkOS6pCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliJ3mrKHmuLLmn5PlrozmiJBcbiAgICovXG4gIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouaYvuekulxuICAgKi9cbiAgb25TaG93OiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLpmpDol49cbiAgICovXG4gIG9uSGlkZTogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Y246L29XG4gICAqL1xuICBvblVubG9hZDogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOmhtemdouebuOWFs+S6i+S7tuWkhOeQhuWHveaVsC0t55uR5ZCs55So5oi35LiL5ouJ5Yqo5L2cXG4gICAqL1xuICBvblB1bGxEb3duUmVmcmVzaDogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOmhtemdouS4iuaLieinpuW6leS6i+S7tueahOWkhOeQhuWHveaVsFxuICAgKi9cbiAgb25SZWFjaEJvdHRvbTogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUqOaIt+eCueWHu+WPs+S4iuinkuWIhuS6q1xuICAgKi9cbiAgb25TaGFyZUFwcE1lc3NhZ2U6IGZ1bmN0aW9uICgpIHtcblxuICB9XG59KSJdfQ==
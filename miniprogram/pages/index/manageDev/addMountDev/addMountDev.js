"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../../../utils/api");
Page({
    data: {
        terminal: {},
        columns: [],
        devType: 'UPS',
        devTypes: [{ text: 'UPS', value: 'UPS' }, { text: '空调', value: '空调' }, { text: '电量仪', value: '电量仪' }, { text: '温湿度', value: '温湿度' }],
        devModal: '',
        devModals: [],
        devModesMap: new Map(),
        devProtocol: '',
        pids: [],
        pid: 1
    },
    onLoad: async function (options) {
        if (options.mac) {
            const { data: terminal } = await api_1.default.getTerminal(options.mac);
            const hasPid = new Set(terminal.mountDevs.map(el => el.pid));
            let columns = [];
            for (let i = 0; i < 255; i++) {
                if (!hasPid.has(i)) {
                    columns.push({ text: String(i), value: i });
                }
            }
            this.setData({
                terminal,
                columns
            });
            this.devTypeChange();
            wx.setNavigationBarTitle({ title: terminal.name });
        }
        else {
            wx.switchTab({ url: '/pages/index/index' });
        }
    },
    async devTypeChange() {
        const { data } = await api_1.default.getDevTypes(this.data.devType);
        const devModals = data.map(el => ({ text: el.DevModel, value: el.DevModel }));
        this.setData({
            devModals,
            devProtocols: [],
            devModesMap: new Map(data.map(el => [el.DevModel, el]))
        });
    },
    async devModalChange() {
        const { devModesMap, devModal } = this.data;
        const devProtocols = devModesMap.get(devModal)?.Protocols.map(el => ({ text: el.Protocol, value: el.Protocol }));
        this.setData({
            devProtocols
        });
    },
    async addMountDev() {
        const { devModal, devType, devProtocol, pid, terminal } = this.data;
        if (devProtocol && devType && devProtocol) {
            const { code } = await api_1.default.addTerminalMountDev(terminal.DevMac, { Type: devType, mountDev: devModal, protocol: devProtocol, pid });
            if (code) {
                const event = this.getOpenerEventChannel();
                event.emit("addSuccess", { stat: true });
                wx.navigateBack();
            }
            else {
                wx.showModal({
                    title: '提交失败',
                    content: '请检查参数并重新提交'
                });
            }
        }
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkTW91bnREZXYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhZGRNb3VudERldi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUF1QztBQU12QyxJQUFJLENBQUM7SUFLSCxJQUFJLEVBQUU7UUFDSixRQUFRLEVBQUUsRUFBbUI7UUFDN0IsT0FBTyxFQUFFLEVBQWlCO1FBQzFCLE9BQU8sRUFBRSxLQUFLO1FBQ2QsUUFBUSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBZ0I7UUFDbkosUUFBUSxFQUFFLEVBQUU7UUFDWixTQUFTLEVBQUUsRUFBaUI7UUFDNUIsV0FBVyxFQUFFLElBQUksR0FBRyxFQUFnQztRQUNwRCxXQUFXLEVBQUUsRUFBRTtRQUNmLElBQUksRUFBRSxFQUFpQjtRQUN2QixHQUFHLEVBQUUsQ0FBQztLQUNQO0lBS0QsTUFBTSxFQUFFLEtBQUssV0FBVyxPQUF3QjtRQUM5QyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUU7WUFDZixNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sYUFBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDN0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUM1RCxJQUFJLE9BQU8sR0FBRyxFQUFpQixDQUFBO1lBQy9CLEtBQUssSUFBSSxDQUFDLEdB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QUUsWUFBWTtpQkFDdEIsQ0FBQyxDQUFBO2FBQ0g7U0FDRjtJQUVILENBQUM7SUFLRCxPQUFPLEVBQUU7SUFFVCxDQUFDO0lBS0QsTUFBTSxFQUFFO0lBRVIsQ0FBQztJQUtELE1BQU0sRUFBRTtJQUVSLENBQUM7SUFLRCxRQUFRLEVBQUU7SUFFVixDQUFDO0lBS0QsaUJBQWlCLEVBQUU7SUFFbkIsQ0FBQztJQUtELGFBQWEsRUFBRTtJQUVmLENBQUM7SUFLRCxpQkFBaUIsRUFBRTtJQUVuQixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tIFwiLi4vLi4vLi4vLi4vdXRpbHMvYXBpXCJcbmludGVyZmFjZSBkZXZNb2RhbHMge1xuICB0ZXh0OiBzdHJpbmcsXG4gIHZhbHVlOiBzdHJpbmcgfCBudW1iZXJcbn1cbi8vIG1pbmlwcm9ncmFtL3BhZ2VzL2luZGV4L21hbmFnZURldi9hZGRNb3VudERldi9hZGRNb3VudERldi5qc1xuUGFnZSh7XG5cbiAgLyoqXG4gICAqIOmhtemdoueahOWIneWni+aVsOaNrlxuICAgKi9cbiAgZGF0YToge1xuICAgIHRlcm1pbmFsOiB7fSBhcyBVYXJ0LlRlcm1pbmFsLFxuICAgIGNvbHVtbnM6IFtdIGFzIGRldk1vZGFsc1tdLFxuICAgIGRldlR5cGU6ICdVUFMnLFxuICAgIGRldlR5cGVzOiBbeyB0ZXh0OiAnVVBTJywgdmFsdWU6ICdVUFMnIH0sIHsgdGV4dDogJ+epuuiwgycsIHZhbHVlOiAn56m66LCDJyB9LCB7IHRleHQ6ICfnlLXph4/ku6onLCB2YWx1ZTogJ+eUtemHj+S7qicgfSwgeyB0ZXh0OiAn5rip5rm/5bqmJywgdmFsdWU6ICfmuKnmub/luqYnIH1dIGFzIGRldk1vZGFsc1tdLFxuICAgIGRldk1vZGFsOiAnJyxcbiAgICBkZXZNb2RhbHM6IFtdIGFzIGRldk1vZGFsc1tdLFxuICAgIGRldk1vZGVzTWFwOiBuZXcgTWFwKCkgYXMgTWFwPHN0cmluZywgVWFydC5EZXZzVHlwZT4sXG4gICAgZGV2UHJvdG9jb2w6ICcnLFxuICAgIHBpZHM6IFtdIGFzIGRldk1vZGFsc1tdLFxuICAgIHBpZDogMVxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWKoOi9vVxuICAgKi9cbiAgb25Mb2FkOiBhc3luYyBmdW5jdGlvbiAob3B0aW9uczogeyBtYWM6IHN0cmluZyB9KSB7XG4gICAgaWYgKG9wdGlvbnMubWFjKSB7XG4gICAgICBjb25zdCB7IGRhdGE6IHRlcm1pbmFsIH0gPSBhd2FpdCBhcGkuZ2V0VGVybWluYWwob3B0aW9ucy5tYWMpXG4gICAgICBjb25zdCBoYXNQaWQgPSBuZXcgU2V0KHRlcm1pbmFsLm1vdW50RGV2cy5tYXAoZWwgPT4gZWwucGlkKSlcbiAgICAgIGxldCBjb2x1bW5zID0gW10gYXMgZGV2TW9kYWxzW11cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU1OyBpKyspIHtcbiAgICAgICAgaWYgKCFoYXNQaWQuaGFzKGkpKSB7XG4gICAgICAgICAgY29sdW1ucy5wdXNoKHsgdGV4dDogU3RyaW5nKGkpLCB2YWx1ZTogaSB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICB0ZXJtaW5hbCxcbiAgICAgICAgY29sdW1uc1xuICAgICAgfSlcbiAgICAgIHRoaXMuZGV2VHlwZUNoYW5nZSgpXG4gICAgICB3eC5zZXROYXZpZ2F0aW9uQmFyVGl0bGUoeyB0aXRsZTogdGVybWluYWwubmFtZSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB3eC5zd2l0Y2hUYWIoeyB1cmw6ICcvcGFnZXMvaW5kZXgvaW5kZXgnIH0pXG4gICAgfVxuXG5cbiAgfSxcbiAgLy8g55uR5ZCs6K6+5aSH57G75Z6L5Y+Y5YyWXG4gIGFzeW5jIGRldlR5cGVDaGFuZ2UoKSB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBhcGkuZ2V0RGV2VHlwZXModGhpcy5kYXRhLmRldlR5cGUpXG4gICAgY29uc3QgZGV2TW9kYWxzID0gZGF0YS5tYXAoZWwgPT4gKHsgdGV4dDogZWwuRGV2TW9kZWwsIHZhbHVlOiBlbC5EZXZNb2RlbCB9KSlcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgZGV2TW9kYWxzLFxuICAgICAgZGV2UHJvdG9jb2xzOiBbXSxcbiAgICAgIGRldk1vZGVzTWFwOiBuZXcgTWFwKGRhdGEubWFwKGVsID0+IFtlbC5EZXZNb2RlbCwgZWxdKSlcbiAgICB9KVxuICB9LFxuICAvLyDnm5HlkKzorr7lpIflnovlj7flj5jljJZcbiAgYXN5bmMgZGV2TW9kYWxDaGFuZ2UoKSB7XG4gICAgY29uc3QgeyBkZXZNb2Rlc01hcCwgZGV2TW9kYWwgfSA9IHRoaXMuZGF0YVxuICAgIGNvbnN0IGRldlByb3RvY29scyA9IGRldk1vZGVzTWFwLmdldChkZXZNb2RhbCk/LlByb3RvY29scy5tYXAoZWwgPT4gKHsgdGV4dDogZWwuUHJvdG9jb2wsIHZhbHVlOiBlbC5Qcm90b2NvbCB9KSkhXG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIGRldlByb3RvY29sc1xuICAgIH0pXG4gIH0sXG4gIC8vIOebkeWQrHBpZFxuIC8qICBwaWRDaGFuZ2UoZXZlbnQ6IHZhbnRFdmVudCkge1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBwaWQ6IGV2ZW50LmRldGFpbC52YWx1ZS50ZXh0XG4gICAgfSlcbiAgICBjb25zb2xlLmxvZyh7IGV2ZW50LCBwOiB0aGlzLmRhdGEucGlkIH0pO1xuXG4gIH0sICovXG4gIC8vIOaPkOS6pOaWsOWinlxuICBhc3luYyBhZGRNb3VudERldigpIHtcbiAgICBjb25zdCB7IGRldk1vZGFsLCBkZXZUeXBlLCBkZXZQcm90b2NvbCwgcGlkLCB0ZXJtaW5hbCB9ID0gdGhpcy5kYXRhXG4gICAgaWYgKGRldlByb3RvY29sICYmIGRldlR5cGUgJiYgZGV2UHJvdG9jb2wpIHtcbiAgICAgIGNvbnN0IHsgY29kZSB9ID0gYXdhaXQgYXBpLmFkZFRlcm1pbmFsTW91bnREZXYodGVybWluYWwuRGV2TWFjLCB7IFR5cGU6IGRldlR5cGUsIG1vdW50RGV2OiBkZXZNb2RhbCwgcHJvdG9jb2w6IGRldlByb3RvY29sLCBwaWQgfSlcbiAgICAgIGlmIChjb2RlKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5nZXRPcGVuZXJFdmVudENoYW5uZWwoKVxuICAgICAgICBldmVudC5lbWl0KFwiYWRkU3VjY2Vzc1wiLCB7IHN0YXQ6IHRydWUgfSlcbiAgICAgICAgd3gubmF2aWdhdGVCYWNrKClcbiAgICAgICAgLyogd3guc2hvd01vZGFsKHtcbiAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MnLFxuICAgICAgICAgIGNvbnRlbnQ6ICfmt7vliqDorr7lpIfmiJDlip/vvIzmmK/lkKbov5Tlm57kuIrkuIDpobXpnaI/JyxcbiAgICAgICAgICBzdWNjZXNzKHJlcykge1xuICAgICAgICAgICAgaWYgKHJlcy5jb25maXJtKVxuICAgICAgICAgIH1cbiAgICAgICAgfSkgKi9cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHd4LnNob3dNb2RhbCh7XG4gICAgICAgICAgdGl0bGU6ICfmj5DkuqTlpLHotKUnLFxuICAgICAgICAgIGNvbnRlbnQ6ICfor7fmo4Dmn6Xlj4LmlbDlubbph43mlrDmj5DkuqQnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yid5qyh5riy5p+T5a6M5oiQXG4gICAqL1xuICBvblJlYWR5OiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLmmL7npLpcbiAgICovXG4gIG9uU2hvdzogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i6ZqQ6JePXG4gICAqL1xuICBvbkhpZGU6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWNuOi9vVxuICAgKi9cbiAgb25VbmxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDpobXpnaLnm7jlhbPkuovku7blpITnkIblh73mlbAtLeebkeWQrOeUqOaIt+S4i+aLieWKqOS9nFxuICAgKi9cbiAgb25QdWxsRG93blJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDpobXpnaLkuIrmi4nop6blupXkuovku7bnmoTlpITnkIblh73mlbBcbiAgICovXG4gIG9uUmVhY2hCb3R0b206IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlKjmiLfngrnlh7vlj7PkuIrop5LliIbkuqtcbiAgICovXG4gIG9uU2hhcmVBcHBNZXNzYWdlOiBmdW5jdGlvbiAoKSB7XG5cbiAgfVxufSkiXX0=
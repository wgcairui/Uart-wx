"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("../../../config");
Page({
    data: {
        option: {
            dimensions: [],
            source: []
        },
        datatime: '',
        name: '',
        mac: '',
        pid: '',
        dateShow: false,
        minDate: new Date(2020, 0, 1).getTime(),
        maxDate: Date.now(),
        webSrc: ''
    },
    onLoad: function (options) {
        var name = options.name, mac = options.mac, pid = options.pid, protocol = options.protocol;
        console.log(options);
        var token = wx.getStorageSync('token');
        this.setData({
            mac: mac,
            pid: pid,
            name: name,
            webSrc: encodeURI(config_1.urlRequest + "/main/line?token=" + token + "&DevMac=" + mac + "&pid=" + pid + "&name=" + name + "&protocol=" + protocol)
        });
    },
    load: function (event) {
        console.log(event);
    },
    error: function (event) {
        console.log(event);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQ0FBNkM7QUFHN0MsSUFBSSxDQUFDO0lBSUgsSUFBSSxFQUFFO1FBQ0osTUFBTSxFQUFFO1lBQ04sVUFBVSxFQUFFLEVBQUU7WUFDZCxNQUFNLEVBQUUsRUFBRTtTQUNxQjtRQUNqQyxRQUFRLEVBQUUsRUFBRTtRQUNaLElBQUksRUFBRSxFQUFFO1FBQ1IsR0FBRyxFQUFFLEVBQUU7UUFDUCxHQUFHLEVBQUUsRUFBRTtRQUVQLFFBQVEsRUFBRSxLQUFLO1FBQ2YsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFO1FBQ3ZDLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO1FBR25CLE1BQU0sRUFBRSxFQUFFO0tBQ1g7SUFNRCxNQUFNLEVBQUUsVUFBVSxPQUFPO1FBQ2YsSUFBQSxtQkFBSSxFQUFFLGlCQUFHLEVBQUUsaUJBQUcsRUFBRSwyQkFBUSxDQUFZO1FBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckIsSUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQVcsQ0FBQTtRQUNsRCxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsR0FBRyxLQUFBO1lBQ0gsR0FBRyxLQUFBO1lBQ0gsSUFBSSxNQUFBO1lBQ0osTUFBTSxFQUFFLFNBQVMsQ0FBSSxtQkFBVSx5QkFBb0IsS0FBSyxnQkFBVyxHQUFHLGFBQVEsR0FBRyxjQUFTLElBQUksa0JBQWEsUUFBVSxDQUFDO1NBQ3ZILENBQUMsQ0FBQTtJQUtKLENBQUM7SUFDRCxJQUFJLEVBQUosVUFBSyxLQUFnQjtRQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLENBQUM7SUFDRCxLQUFLLEVBQUwsVUFBTSxLQUFnQjtRQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLENBQUM7Q0ErQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXJsUmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi9jb25maWdcIjtcblxuLy8gbWluaXByb2dyYW0vcGFnZXMvaW5kZXgvbGluZS9saW5lLmpzXG5QYWdlKHtcbiAgLyoqXG4gICAqIOmhtemdoueahOWIneWni+aVsOaNrlxuICAgKi9cbiAgZGF0YToge1xuICAgIG9wdGlvbjoge1xuICAgICAgZGltZW5zaW9uczogW10sXG4gICAgICBzb3VyY2U6IFtdXG4gICAgfSBhcyBlY2hhcnRzLkVDaGFydE9wdGlvbi5EYXRhc2V0LFxuICAgIGRhdGF0aW1lOiAnJyxcbiAgICBuYW1lOiAnJyxcbiAgICBtYWM6ICcnLFxuICAgIHBpZDogJycsXG4gICAgLy9cbiAgICBkYXRlU2hvdzogZmFsc2UsXG4gICAgbWluRGF0ZTogbmV3IERhdGUoMjAyMCwgMCwgMSkuZ2V0VGltZSgpLFxuICAgIG1heERhdGU6IERhdGUubm93KCksXG5cbiAgICAvL1xuICAgIHdlYlNyYzogJydcbiAgfSxcblxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWKoOi9vVxuICAgKi9cbiAgb25Mb2FkOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIGNvbnN0IHsgbmFtZSwgbWFjLCBwaWQsIHByb3RvY29sIH0gPSBvcHRpb25zXG4gICAgY29uc29sZS5sb2cob3B0aW9ucyk7XG4gICAgY29uc3QgdG9rZW4gPSB3eC5nZXRTdG9yYWdlU3luYygndG9rZW4nKSBhcyBzdHJpbmdcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgbWFjLFxuICAgICAgcGlkLFxuICAgICAgbmFtZSxcbiAgICAgIHdlYlNyYzogZW5jb2RlVVJJKGAke3VybFJlcXVlc3R9L21haW4vbGluZT90b2tlbj0ke3Rva2VufSZEZXZNYWM9JHttYWN9JnBpZD0ke3BpZH0mbmFtZT0ke25hbWV9JnByb3RvY29sPSR7cHJvdG9jb2x9YClcbiAgICB9KVxuICAgIC8qIHRoaXMuZ2V0RGV2c0hpc3RvcnlJbmZvKClcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgZGF0YXRpbWU6IHRoaXMuZm9ybWF0RGF0ZShuZXcgRGF0ZSgpKVxuICAgIH0pICovXG4gIH0sXG4gIGxvYWQoZXZlbnQ6IHZhbnRFdmVudCkge1xuICAgIGNvbnNvbGUubG9nKGV2ZW50KTtcblxuICB9LFxuICBlcnJvcihldmVudDogdmFudEV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQpO1xuICB9LFxuICAvKiBhc3luYyBnZXREZXZzSGlzdG9yeUluZm8oKSB7XG4gICAgY29uc3QgeyBuYW1lLCBtYWMsIHBpZCwgZGF0YXRpbWUgfSA9IHRoaXMuZGF0YVxuICAgIGNvbnN0IHsgb2ssIGFyZyB9ID0gYXdhaXQgYXBpLmdldERldnNIaXN0b3J5SW5mbyhtYWMsIHBpZCwgbmFtZSwgZGF0YXRpbWUpXG4gICAgaWYgKG9rKSB7XG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBvcHRpb246IHtcbiAgICAgICAgICBkaW1lbnNpb25zOiBbJ3RpbWUnLCBuYW1lXSxcbiAgICAgICAgICBzb3VyY2U6IGFyZ1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgY29uc29sZS5sb2codGhpcy5kYXRhLm9wdGlvbik7XG4gICAgICBcbiAgICB9IGVsc2Uge1xuICAgICAgd3guc2hvd01vZGFsKHtcbiAgICAgICAgdGl0bGU6ICdlcnJvcicsXG4gICAgICAgIGNvbnRlbnQ6ICfojrflj5bmlbDmja7lh7rplJknXG4gICAgICB9KVxuICAgIH1cbiAgfSxcblxuICAvLyDmmL7npLrml6XmnJ/pgInmi6nlmahcbiAgc2hvd0NhbGVuZGFyKCkge1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBkYXRlU2hvdzogdHJ1ZVxuICAgIH0pXG4gIH0sXG4gIC8vICDlhbPpl63ml6XmnJ/pgInmi6nlmahcbiAgb25DbG9zZSgpIHtcbiAgICB0aGlzLnNldERhdGEoeyBkYXRlU2hvdzogZmFsc2UgfSk7XG4gIH0sXG4gIGZvcm1hdERhdGUoZGF0ZTogRGF0ZSkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICByZXR1cm4gYCR7ZGF0ZS5nZXRGdWxsWWVhcigpfS8ke2RhdGUuZ2V0TW9udGgoKSArIDF9LyR7ZGF0ZS5nZXREYXRlKCl9YDtcbiAgfSxcbiAgLy8g56Gu5a6a5pel5pyfXG4gIG9uQ29uZmlybShldmVudDogdmFudEV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQpO1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBkYXRlU2hvdzogZmFsc2UsXG4gICAgICBkYXRhdGltZTogdGhpcy5mb3JtYXREYXRlKGV2ZW50LmRldGFpbCksXG4gICAgfSk7XG4gICAgdGhpcy5nZXREZXZzSGlzdG9yeUluZm8oKVxuICB9LCBvblB1bGxEb3duUmVmcmVzaDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IHRoaXMuZ2V0RGV2c0hpc3RvcnlJbmZvKClcbiAgICB3eC5zdG9wUHVsbERvd25SZWZyZXNoKClcbiAgfSwgKi9cbn0pIl19
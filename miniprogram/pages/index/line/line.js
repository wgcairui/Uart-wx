"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../../utils/api");
const util_1 = require("../../../utils/util");
Page({
    data: {
        option: {
            dimensions: [],
            source: []
        },
        datatime: '',
        name: '',
        mac: '',
        pid: '',
        dateShow: false,
        minDate: new Date(2020, 0, 1).getTime(),
        maxDate: Date.now(),
        webSrc: ''
    },
    onLoad: function (options) {
        const { name, mac, pid, protocol } = options;
        const p = (0, util_1.ObjectToStrquery)({
            token: api_1.default.token,
            DevMac: mac,
            pid,
            name,
            protocol,
            type: 'wx'
        });
        const webSrc = encodeURI(`https://uart.ladishb.com/main/line?${p}`);
        this.setData({
            mac,
            pid,
            name,
            webSrc
        });
    },
    load(event) {
        console.log(event);
    },
    error(event) {
        console.log(event);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBcUM7QUFDckMsOENBQXVEO0FBR3ZELElBQUksQ0FBQztJQUlILElBQUksRUFBRTtRQUNKLE1BQU0sRUFBRTtZQUNOLFVBQVUsRUFBRSxFQUFFO1lBQ2QsTUFBTSxFQUFFLEVBQUU7U0FDWDtRQUNELFFBQVEsRUFBRSxFQUFFO1FBQ1osSUFBSSxFQUFFLEVBQUU7UUFDUixHQUFHLEVBQUUsRUFBRTtRQUNQLEdBQUcsRUFBRSxFQUFFO1FBRVAsUUFBUSxFQUFFLEtBQUs7UUFDZixPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7UUFDdkMsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDbkIsTUFBTSxFQUFFLEVBQUU7S0FDWDtJQU1ELE1BQU0sRUFBRSxVQUFVLE9BQTBEO1FBQzFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxPQUFPLENBQUE7UUFHNUMsTUFBTSxDQUFDLEdBQUcsSUFBQSx1QkFBZ0IsRUFBQztZQUN6QixLQUFLLEVBQUUsYUFBRyxDQUFDLEtBQUs7WUFDaEIsTUFBTSxFQUFFLEdBQUc7WUFDWCxHQUFHO1lBQ0gsSUFBSTtZQUNKLFFBQVE7WUFDUixJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUMsQ0FBQTtRQUNGLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUduRSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsR0FBRztZQUNILEdBQUc7WUFDSCxJQUFJO1lBQ0osTUFBTTtTQUNQLENBQUMsQ0FBQTtJQUtKLENBQUM7SUFDRCxJQUFJLENBQUMsS0FBZ0I7UUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVyQixDQUFDO0lBQ0QsS0FBSyxDQUFDLEtBQWdCO1FBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsQ0FBQztDQStDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBpIGZyb20gXCIuLi8uLi8uLi91dGlscy9hcGlcIjtcbmltcG9ydCB7IE9iamVjdFRvU3RycXVlcnkgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbFwiO1xuXG4vLyBtaW5pcHJvZ3JhbS9wYWdlcy9pbmRleC9saW5lL2xpbmUuanNcblBhZ2Uoe1xuICAvKipcbiAgICog6aG16Z2i55qE5Yid5aeL5pWw5o2uXG4gICAqL1xuICBkYXRhOiB7XG4gICAgb3B0aW9uOiB7XG4gICAgICBkaW1lbnNpb25zOiBbXSxcbiAgICAgIHNvdXJjZTogW11cbiAgICB9LFxuICAgIGRhdGF0aW1lOiAnJyxcbiAgICBuYW1lOiAnJyxcbiAgICBtYWM6ICcnLFxuICAgIHBpZDogJycsXG4gICAgLy9cbiAgICBkYXRlU2hvdzogZmFsc2UsXG4gICAgbWluRGF0ZTogbmV3IERhdGUoMjAyMCwgMCwgMSkuZ2V0VGltZSgpLFxuICAgIG1heERhdGU6IERhdGUubm93KCksXG4gICAgd2ViU3JjOiAnJ1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yqg6L29XG4gICAqL1xuICBvbkxvYWQ6IGZ1bmN0aW9uIChvcHRpb25zOiB7IG5hbWU6IGFueTsgbWFjOiBhbnk7IHBpZDogYW55OyBwcm90b2NvbDogYW55OyB9KSB7XG4gICAgY29uc3QgeyBuYW1lLCBtYWMsIHBpZCwgcHJvdG9jb2wgfSA9IG9wdGlvbnNcbiAgICAvLyBjb25zb2xlLmxvZyhvcHRpb25zKTtcbiAgICAvLyBjb25zdCB0b2tlbiA9IGFwaS50b2tlblxuICAgIGNvbnN0IHAgPSBPYmplY3RUb1N0cnF1ZXJ5KHtcbiAgICAgIHRva2VuOiBhcGkudG9rZW4sXG4gICAgICBEZXZNYWM6IG1hYyxcbiAgICAgIHBpZCxcbiAgICAgIG5hbWUsXG4gICAgICBwcm90b2NvbCxcbiAgICAgIHR5cGU6ICd3eCdcbiAgICB9KVxuICAgIGNvbnN0IHdlYlNyYyA9IGVuY29kZVVSSShgaHR0cHM6Ly91YXJ0LmxhZGlzaGIuY29tL21haW4vbGluZT8ke3B9YClcbiAgICAvLyBjb25zb2xlLmxvZyh3ZWJTcmMpO1xuXG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIG1hYyxcbiAgICAgIHBpZCxcbiAgICAgIG5hbWUsXG4gICAgICB3ZWJTcmNcbiAgICB9KVxuICAgIC8qIHRoaXMuZ2V0RGV2c0hpc3RvcnlJbmZvKClcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgZGF0YXRpbWU6IHRoaXMuZm9ybWF0RGF0ZShuZXcgRGF0ZSgpKVxuICAgIH0pICovXG4gIH0sXG4gIGxvYWQoZXZlbnQ6IHZhbnRFdmVudCkge1xuICAgIGNvbnNvbGUubG9nKGV2ZW50KTtcblxuICB9LFxuICBlcnJvcihldmVudDogdmFudEV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQpO1xuICB9LFxuICAvKiBhc3luYyBnZXREZXZzSGlzdG9yeUluZm8oKSB7XG4gICAgY29uc3QgeyBuYW1lLCBtYWMsIHBpZCwgZGF0YXRpbWUgfSA9IHRoaXMuZGF0YVxuICAgIGNvbnN0IHsgb2ssIGFyZyB9ID0gYXdhaXQgYXBpLmdldERldnNIaXN0b3J5SW5mbyhtYWMsIHBpZCwgbmFtZSwgZGF0YXRpbWUpXG4gICAgaWYgKG9rKSB7XG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBvcHRpb246IHtcbiAgICAgICAgICBkaW1lbnNpb25zOiBbJ3RpbWUnLCBuYW1lXSxcbiAgICAgICAgICBzb3VyY2U6IGFyZ1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgY29uc29sZS5sb2codGhpcy5kYXRhLm9wdGlvbik7XG4gICAgICBcbiAgICB9IGVsc2Uge1xuICAgICAgd3guc2hvd01vZGFsKHtcbiAgICAgICAgdGl0bGU6ICdlcnJvcicsXG4gICAgICAgIGNvbnRlbnQ6ICfojrflj5bmlbDmja7lh7rplJknXG4gICAgICB9KVxuICAgIH1cbiAgfSxcblxuICAvLyDmmL7npLrml6XmnJ/pgInmi6nlmahcbiAgc2hvd0NhbGVuZGFyKCkge1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBkYXRlU2hvdzogdHJ1ZVxuICAgIH0pXG4gIH0sXG4gIC8vICDlhbPpl63ml6XmnJ/pgInmi6nlmahcbiAgb25DbG9zZSgpIHtcbiAgICB0aGlzLnNldERhdGEoeyBkYXRlU2hvdzogZmFsc2UgfSk7XG4gIH0sXG4gIGZvcm1hdERhdGUoZGF0ZTogRGF0ZSkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICByZXR1cm4gYCR7ZGF0ZS5nZXRGdWxsWWVhcigpfS8ke2RhdGUuZ2V0TW9udGgoKSArIDF9LyR7ZGF0ZS5nZXREYXRlKCl9YDtcbiAgfSxcbiAgLy8g56Gu5a6a5pel5pyfXG4gIG9uQ29uZmlybShldmVudDogdmFudEV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQpO1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBkYXRlU2hvdzogZmFsc2UsXG4gICAgICBkYXRhdGltZTogdGhpcy5mb3JtYXREYXRlKGV2ZW50LmRldGFpbCksXG4gICAgfSk7XG4gICAgdGhpcy5nZXREZXZzSGlzdG9yeUluZm8oKVxuICB9LCBvblB1bGxEb3duUmVmcmVzaDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IHRoaXMuZ2V0RGV2c0hpc3RvcnlJbmZvKClcbiAgICB3eC5zdG9wUHVsbERvd25SZWZyZXNoKClcbiAgfSwgKi9cbn0pIl19
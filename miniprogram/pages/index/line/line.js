"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("../../../config");
Page({
    data: {
        option: {
            dimensions: [],
            source: []
        },
        datatime: '',
        name: '',
        mac: '',
        pid: '',
        dateShow: false,
        minDate: new Date(2020, 0, 1).getTime(),
        maxDate: Date.now(),
        webSrc: ''
    },
    onLoad: function (options) {
        var name = options.name, mac = options.mac, pid = options.pid, protocol = options.protocol;
        console.log(options);
        var token = wx.getStorageSync('token');
        var webSrc = encodeURI(config_1.urlRequest + "/main/line?token=" + token + "&DevMac=" + mac + "&pid=" + pid + "&name=" + name + "&protocol=" + protocol);
        console.log(webSrc);
        this.setData({
            mac: mac,
            pid: pid,
            name: name,
            webSrc: webSrc
        });
    },
    load: function (event) {
        console.log(event);
    },
    error: function (event) {
        console.log(event);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQ0FBNkM7QUFHN0MsSUFBSSxDQUFDO0lBSUgsSUFBSSxFQUFFO1FBQ0osTUFBTSxFQUFFO1lBQ04sVUFBVSxFQUFFLEVBQUU7WUFDZCxNQUFNLEVBQUUsRUFBRTtTQUNxQjtRQUNqQyxRQUFRLEVBQUUsRUFBRTtRQUNaLElBQUksRUFBRSxFQUFFO1FBQ1IsR0FBRyxFQUFFLEVBQUU7UUFDUCxHQUFHLEVBQUUsRUFBRTtRQUVQLFFBQVEsRUFBRSxLQUFLO1FBQ2YsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFO1FBQ3ZDLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO1FBR25CLE1BQU0sRUFBRSxFQUFFO0tBQ1g7SUFNRCxNQUFNLEVBQUUsVUFBVSxPQUFPO1FBQ2YsSUFBQSxtQkFBSSxFQUFFLGlCQUFHLEVBQUUsaUJBQUcsRUFBRSwyQkFBUSxDQUFZO1FBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckIsSUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQVcsQ0FBQTtRQUNsRCxJQUFNLE1BQU0sR0FBRyxTQUFTLENBQUksbUJBQVUseUJBQW9CLEtBQUssZ0JBQVcsR0FBRyxhQUFRLEdBQUcsY0FBUyxJQUFJLGtCQUFhLFFBQVUsQ0FBQyxDQUFBO1FBQzdILE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLEdBQUcsS0FBQTtZQUNILEdBQUcsS0FBQTtZQUNILElBQUksTUFBQTtZQUNKLE1BQU0sUUFBQTtTQUNQLENBQUMsQ0FBQTtJQUtKLENBQUM7SUFDRCxJQUFJLEVBQUosVUFBSyxLQUFnQjtRQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLENBQUM7SUFDRCxLQUFLLEVBQUwsVUFBTSxLQUFnQjtRQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLENBQUM7Q0ErQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXJsUmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi9jb25maWdcIjtcblxuLy8gbWluaXByb2dyYW0vcGFnZXMvaW5kZXgvbGluZS9saW5lLmpzXG5QYWdlKHtcbiAgLyoqXG4gICAqIOmhtemdoueahOWIneWni+aVsOaNrlxuICAgKi9cbiAgZGF0YToge1xuICAgIG9wdGlvbjoge1xuICAgICAgZGltZW5zaW9uczogW10sXG4gICAgICBzb3VyY2U6IFtdXG4gICAgfSBhcyBlY2hhcnRzLkVDaGFydE9wdGlvbi5EYXRhc2V0LFxuICAgIGRhdGF0aW1lOiAnJyxcbiAgICBuYW1lOiAnJyxcbiAgICBtYWM6ICcnLFxuICAgIHBpZDogJycsXG4gICAgLy9cbiAgICBkYXRlU2hvdzogZmFsc2UsXG4gICAgbWluRGF0ZTogbmV3IERhdGUoMjAyMCwgMCwgMSkuZ2V0VGltZSgpLFxuICAgIG1heERhdGU6IERhdGUubm93KCksXG5cbiAgICAvL1xuICAgIHdlYlNyYzogJydcbiAgfSxcblxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWKoOi9vVxuICAgKi9cbiAgb25Mb2FkOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIGNvbnN0IHsgbmFtZSwgbWFjLCBwaWQsIHByb3RvY29sIH0gPSBvcHRpb25zXG4gICAgY29uc29sZS5sb2cob3B0aW9ucyk7XG4gICAgY29uc3QgdG9rZW4gPSB3eC5nZXRTdG9yYWdlU3luYygndG9rZW4nKSBhcyBzdHJpbmdcbiAgICBjb25zdCB3ZWJTcmMgPSBlbmNvZGVVUkkoYCR7dXJsUmVxdWVzdH0vbWFpbi9saW5lP3Rva2VuPSR7dG9rZW59JkRldk1hYz0ke21hY30mcGlkPSR7cGlkfSZuYW1lPSR7bmFtZX0mcHJvdG9jb2w9JHtwcm90b2NvbH1gKVxuICAgIGNvbnNvbGUubG9nKHdlYlNyYyk7XG5cbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgbWFjLFxuICAgICAgcGlkLFxuICAgICAgbmFtZSxcbiAgICAgIHdlYlNyY1xuICAgIH0pXG4gICAgLyogdGhpcy5nZXREZXZzSGlzdG9yeUluZm8oKVxuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBkYXRhdGltZTogdGhpcy5mb3JtYXREYXRlKG5ldyBEYXRlKCkpXG4gICAgfSkgKi9cbiAgfSxcbiAgbG9hZChldmVudDogdmFudEV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQpO1xuXG4gIH0sXG4gIGVycm9yKGV2ZW50OiB2YW50RXZlbnQpIHtcbiAgICBjb25zb2xlLmxvZyhldmVudCk7XG4gIH0sXG4gIC8qIGFzeW5jIGdldERldnNIaXN0b3J5SW5mbygpIHtcbiAgICBjb25zdCB7IG5hbWUsIG1hYywgcGlkLCBkYXRhdGltZSB9ID0gdGhpcy5kYXRhXG4gICAgY29uc3QgeyBvaywgYXJnIH0gPSBhd2FpdCBhcGkuZ2V0RGV2c0hpc3RvcnlJbmZvKG1hYywgcGlkLCBuYW1lLCBkYXRhdGltZSlcbiAgICBpZiAob2spIHtcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIG9wdGlvbjoge1xuICAgICAgICAgIGRpbWVuc2lvbnM6IFsndGltZScsIG5hbWVdLFxuICAgICAgICAgIHNvdXJjZTogYXJnXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGEub3B0aW9uKTtcbiAgICAgIFxuICAgIH0gZWxzZSB7XG4gICAgICB3eC5zaG93TW9kYWwoe1xuICAgICAgICB0aXRsZTogJ2Vycm9yJyxcbiAgICAgICAgY29udGVudDogJ+iOt+WPluaVsOaNruWHuumUmSdcbiAgICAgIH0pXG4gICAgfVxuICB9LFxuXG4gIC8vIOaYvuekuuaXpeacn+mAieaLqeWZqFxuICBzaG93Q2FsZW5kYXIoKSB7XG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIGRhdGVTaG93OiB0cnVlXG4gICAgfSlcbiAgfSxcbiAgLy8gIOWFs+mXreaXpeacn+mAieaLqeWZqFxuICBvbkNsb3NlKCkge1xuICAgIHRoaXMuc2V0RGF0YSh7IGRhdGVTaG93OiBmYWxzZSB9KTtcbiAgfSxcbiAgZm9ybWF0RGF0ZShkYXRlOiBEYXRlKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIHJldHVybiBgJHtkYXRlLmdldEZ1bGxZZWFyKCl9LyR7ZGF0ZS5nZXRNb250aCgpICsgMX0vJHtkYXRlLmdldERhdGUoKX1gO1xuICB9LFxuICAvLyDnoa7lrprml6XmnJ9cbiAgb25Db25maXJtKGV2ZW50OiB2YW50RXZlbnQpIHtcbiAgICBjb25zb2xlLmxvZyhldmVudCk7XG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIGRhdGVTaG93OiBmYWxzZSxcbiAgICAgIGRhdGF0aW1lOiB0aGlzLmZvcm1hdERhdGUoZXZlbnQuZGV0YWlsKSxcbiAgICB9KTtcbiAgICB0aGlzLmdldERldnNIaXN0b3J5SW5mbygpXG4gIH0sIG9uUHVsbERvd25SZWZyZXNoOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgYXdhaXQgdGhpcy5nZXREZXZzSGlzdG9yeUluZm8oKVxuICAgIHd4LnN0b3BQdWxsRG93blJlZnJlc2goKVxuICB9LCAqL1xufSkiXX0=
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../../utils/util");
const api_1 = require("../../../utils/api");
Page({
    data: {
        mac: '',
        pid: '',
        mountDev: "",
        result: {},
        filter: '',
        protocol: '',
        Type: '',
        Constant: {},
        upsPic: 'http://www.ladishb.com/upload/342021__ups.gif',
        th: {
            temperature: '0',
            humidity: '0',
        },
        _oprateStat: false
    },
    onLoad: function (options) {
        wx.setNavigationBarTitle({ title: options.mountDev || options.mac || '' });
        this.setData({
            mac: options.DevMac,
            pid: options.pid,
            protocol: options.protocol,
            mountDev: options.mountDev,
            Type: options.Type
        });
        api_1.default.onMessage(options.DevMac + options.pid, () => {
            console.log('获取运行数据:' + options.DevMac + options.pid);
            this.GetDevsRunInfo();
        });
    },
    async onReady() {
        wx.showLoading({ title: '获取运行数据' });
        const sys = await api_1.default.getAlarmProtocol(this.data.protocol);
        const user = await api_1.default.getUserAlarmProtocol(this.data.protocol);
        if (sys.code) {
            this.setData({
                "Constant.sys": sys.data
            });
        }
        if (user.code) {
            this.setData({
                "Constant.user": user.data,
                "Constant.show": new Set([sys.data || [], user.data])
            });
        }
        this.setData({
            "Constant.show": new Set([sys.data?.ShowTag || [], user.data?.ShowTag || []].flat())
        });
        await this.GetDevsRunInfo();
        wx.hideLoading();
    },
    onShow: function () {
    },
    onHide: function () {
        api_1.default.offWs('MacDateUpdate' + this.options.DevMac + this.options.pid);
    },
    onUnload: function () {
        api_1.default.offWs('MacDateUpdate' + this.options.DevMac + this.options.pid);
    },
    onPullDownRefresh: async function () {
        await this.GetDevsRunInfo();
        wx.stopPullDownRefresh();
    },
    async GetDevsRunInfo() {
        const { mac, pid, filter } = this.data;
        const { code, data, msg } = await api_1.default.getTerminalData(mac, pid);
        if (code && data.result) {
            const regStr = new RegExp(filter);
            data.result = data.result.filter(el => this.data.Constant.show.has(el.name) && (!filter || regStr.test(el.name)));
            data.time = (0, util_1.parseTime)(data.time);
            this.setData({
                result: data,
            });
            switch (this.data.Type) {
                case "UPS":
                    const workMode = data.result.find(el => el.name === this.data.Constant.sys.Constant.WorkMode)?.parseValue;
                    switch (workMode) {
                        case "电池模式":
                            this.setData({
                                upsPic: 'http://www.ladishb.com/upload/342021__ups1.gif'
                            });
                            break;
                        case "旁路模式":
                            this.setData({
                                upsPic: 'http://www.ladishb.com/upload/342021__ups2.gif'
                            });
                            break;
                        case "在线模式":
                            this.setData({
                                upsPic: 'http://www.ladishb.com/upload/342021__ups3.gif'
                            });
                            break;
                        default:
                            this.setData({
                                upsPic: 'http://www.ladishb.com/upload/342021__ups.gif'
                            });
                            break;
                    }
                    break;
                case "温湿度":
                    const { Temperature, Humidity } = this.data.Constant.sys.Constant;
                    this.setData({
                        th: {
                            temperature: data.result.find(el => el.name === Temperature)?.parseValue,
                            humidity: data.result.find(el => el.name === Humidity)?.parseValue
                        }
                    });
                    break;
            }
        }
        else {
            api_1.default.offWs('MacDateUpdate' + this.options.DevMac + this.options.pid);
            wx.showModal({
                title: 'Error',
                content: msg,
                success: () => {
                    api_1.default.offWs('MacDateUpdate' + this.options.DevMac + this.options.pid);
                }
            });
        }
    },
    filter(e) {
        const filter = e.detail.filter;
        const regStr = new RegExp(filter);
        const result = this.data.result.result?.filter(el => regStr.test(el.name));
        this.setData({
            filter,
            "result.result": result
        });
    },
    toline(e) {
        const url = '/pages/index/line/line' + (0, util_1.ObjectToStrquery)({ name: e.detail.name, mac: this.data.mac, pid: this.data.pid, protocol: this.data.protocol });
        console.log(url);
        wx.navigateTo({
            url
        });
    },
    async oprate(e) {
        if (this.data._oprateStat)
            return;
        const item = e.detail;
        if (item.value.includes("%i") && !item.val && item.val !== 0) {
            wx.navigateTo({
                url: '/pages/util/setVal/setVal' + (0, util_1.ObjectToStrquery)({ item }),
                events: {
                    valueOk: (value) => {
                        item.val = value.val;
                        this.oprate({ detail: item });
                    }
                }
            });
            return;
        }
        wx.showLoading({ title: '正在发送' });
        this.setData({
            _oprateStat: true
        });
        const { code, data, msg } = await api_1.default.SendProcotolInstructSet({ mountDev: this.data.mountDev, pid: Number(this.data.pid), protocol: this.data.protocol, DevMac: this.data.mac }, item);
        this.setData({
            _oprateStat: false
        });
        wx.hideLoading();
        wx.showModal({
            title: code ? 'Success' : 'Error',
            content: code ? data.msg : msg
        });
    },
    alarm(e) {
        const type = e.detail.type;
        wx.navigateTo({
            url: '/pages/index/alarmSetting/alarmSetting' + (0, util_1.ObjectToStrquery)({ type, protocol: this.data.protocol })
        });
    }
});
//# sourceMappingURL=data:application/json;base64,
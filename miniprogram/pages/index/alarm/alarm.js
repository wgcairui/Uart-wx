"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../../utils/util");
const api_1 = require("../../../utils/api");
Page({
    data: {
        subMessageStat: false,
        Alarm: [],
        filter: '',
        date: '',
        dateShow: false,
        minDate: new Date(2020, 0, 1).getTime(),
        maxDate: Date.now()
    },
    onLoad: async function () {
        const date = new Date();
        const start = this.formatDate(date);
        const end = this.formatDate(date);
        this.setData({
            date: start + '-' + end
        });
        wx.getStorage({
            key: 'alarm_list',
            success: (el) => {
                this.setData({
                    Alarm: el.data
                });
                wx.setTabBarBadge({ index: 1, text: this.data.Alarm.filter(el => !el.isOk).length.toString() });
            },
            fail: () => {
                this.getAlarmInfo();
            }
        });
        const { subscriptionsSetting } = await wx.getSetting({
            withSubscriptions: true
        });
        this.setData({
            subMessageStat: Boolean(subscriptionsSetting?.itemSettings?.['8NX6ji8ABlNAOEMcU7v2jtD4sgCB7NMHguWzxZn3HO4'] === 'accept')
        });
    },
    async subMessage() {
        if (!this.data.subMessageStat) {
            const res = await util_1.SubscribeMessage(['设备告警提醒']);
            this.setData({
                subMessageStat: res['8NX6ji8ABlNAOEMcU7v2jtD4sgCB7NMHguWzxZn3HO4'] === 'accept'
            });
        }
    },
    async getAlarmInfo() {
        wx.showLoading({ title: '加载数据' });
        const [start, end] = this.data.date.split('-');
        const { ok, msg, arg } = await api_1.default.getAlarm(start + ' 00:00:00', end + " 23:59:59");
        wx.hideLoading();
        if (ok) {
            const Alarm = arg.map(el => {
                el.time = this.formattime(el.timeStamp);
                return el;
            });
            this.setData({
                Alarm
            });
            const alarmNum = Alarm.filter(el => !el.isOk).length;
            if (alarmNum > 0)
                wx.setTabBarBadge({ index: 1, text: alarmNum.toString() });
            else
                wx.removeTabBarBadge({ index: 1 });
            wx.setStorage({ key: 'alarm_list', data: Alarm });
        }
        else {
            wx.showModal({
                title: '发生错误',
                content: msg || '未知错误'
            });
        }
    },
    showCalendar() {
        this.setData({
            dateShow: true
        });
    },
    onClose() {
        this.setData({ dateShow: false });
    },
    formatDate(date) {
        date = new Date(date);
        return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;
    },
    onConfirm(event) {
        const [start, end] = event.detail;
        this.setData({
            dateShow: false,
            date: `${this.formatDate(start)} - ${this.formatDate(end)}`,
        });
        this.getAlarmInfo();
    },
    showalarm(event) {
        const alarm = event.currentTarget.dataset.item;
        const key = event.currentTarget.dataset.key;
        wx.showModal({
            title: alarm.devName,
            content: alarm.msg,
            showCancel: !alarm.isOk,
            confirmText: alarm.isOk ? '确定' : '确认消息',
            success: async (res) => {
                if (res.confirm && !alarm.isOk) {
                    wx.showLoading({ title: '确认告警信息' });
                    await api_1.default.alarmConfirmed(alarm._id);
                    this.setData({
                        [`Alarm[${key}].isOk`]: true
                    });
                    this.subMessage();
                    wx.setTabBarBadge({ index: 1, text: this.data.Alarm.filter(el => !el.isOk).length.toString() });
                    wx.hideLoading();
                }
            }
        });
    },
    allQuest() {
        wx.showModal({
            title: "Tips",
            content: "是否确认全部告警信息?",
            success: async (res) => {
                if (res.confirm) {
                    wx.showLoading({ title: '确认告警信息' });
                    await api_1.default.alarmConfirmed();
                    wx.startPullDownRefresh();
                    wx.hideLoading();
                    this.subMessage();
                }
            }
        });
    },
    onShow() {
        wx.startPullDownRefresh();
    },
    async onPullDownRefresh() {
        await this.getAlarmInfo();
        wx.stopPullDownRefresh();
    },
    formattime(time) {
        const Dates = new Date(time);
        return `${Dates.getMonth() + 1}-${Dates.getDate()} ${Dates.getHours()}:${Dates.getMinutes()}:${Dates.getSeconds()}`;
    }
});
//# sourceMappingURL=data:application/json;base64,
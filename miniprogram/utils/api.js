"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../config");
class api {
    constructor() {
        this.token = "";
    }
    setToken(token) {
        this.token = token;
        wx.setBackgroundFetchToken({
            token
        });
    }
    async login(data) {
        const el = await this.fetch("auth/code2Session", data, "GET");
        if (el.code) {
            this.setToken(el.data.token);
        }
        return el;
    }
    async userlogin(data) {
        const el = await this.fetch('auth/wplogin', data);
        if (el.code) {
            this.setToken(el.data.token);
        }
        return el;
    }
    updateAvanter(nickName, avanter) {
        return this.fetch('updateAvanter', { nickName, avanter });
    }
    async unbindwx() {
        const el = await this.fetch('unbindwx');
        this.token = "";
        return el;
    }
    getphonenumber(data) {
        return this.fetch("auth/getphonenumber", data);
    }
    registerUser(data) {
        return this.fetch("auth/wxRegister", data);
    }
    bindDev(mac) {
        return this.fetch('bindDev', { mac });
    }
    getAlarmunconfirmed() {
        return this.fetch('getAlarmunconfirmed');
    }
    getGPSaddress(location) {
        return this.fetch('getGPSaddress', { location });
    }
    async cancelwx() {
        const el = await this.fetch('cancelwx');
        this.token = "";
        return el;
    }
    addVm() {
        return this.fetch('addVm');
    }
    modifyDTUName(dtu, name) {
        return this.fetch('modifyDTUName', { dtu, name });
    }
    updateGps(mac, jw) {
        return this.fetch('updateGps', { mac, jw });
    }
    webLogin(code) {
        return this.fetch('webLogin', { code, token: this.token });
    }
    addUser(name, user, passwd, tel, mail, company) {
        return this.fetch("guest/addUser", { name, user, passwd, tel, mail, company });
    }
    resetPasswdValidation(user) {
        return this.fetch("guest/resetPasswdValidation", { user });
    }
    resetUserPasswd(user, passwd, code) {
        return this.fetch("guest/resetUserPasswd", { user, passwd, code });
    }
    wxlogin(code, state) {
        return this.fetch("auth/wxlogin", { code, state });
    }
    crc(data) {
        return this.fetch("open//crc", { data });
    }
    BindDev() {
        return this.fetch("BindDev");
    }
    userInfo() {
        return this.fetch("userInfo");
    }
    getAlarm(start = new Date().toLocaleDateString().replace(/\//g, "-") + " 0:00:00", end = new Date().toLocaleDateString().replace(/\//g, "-") + " 23:59:59") {
        return this.fetch("loguartterminaldatatransfinites", { start, end });
    }
    confrimAlarm(id) {
        return this.fetch("confrimAlarm", { id });
    }
    getTerminalOnline(mac) {
        return this.fetch("getTerminalOnline", { mac });
    }
    modifyTerminal(mac, name) {
        return this.fetch('modifyTerminal', { mac, name });
    }
    addUserTerminal(mac) {
        return this.fetch("addUserTerminal", { mac });
    }
    delUserTerminal(mac) {
        return this.fetch("delUserTerminal", { mac });
    }
    getDevTypes(Type) {
        return this.fetch("getDevTypes", { Type });
    }
    delTerminalMountDev(mac, pid) {
        return this.fetch("delTerminalMountDev", { mac, pid });
    }
    addTerminalMountDev(mac, mountDev) {
        return this.fetch("addTerminalMountDev", { mac, mountDev });
    }
    getUserAlarmSetup() {
        return this.fetch("getUserAlarmSetup");
    }
    modifyUserAlarmSetupTel(tels, mails) {
        return this.fetch("modifyUserAlarmSetupTel", { tels, mails });
    }
    modifyUserInfo(data) {
        return this.fetch("modifyUserInfo", { data });
    }
    mpTicket() {
        return this.fetch("mpTicket");
    }
    wpTicket() {
        return this.fetch("wpTicket");
    }
    getUserAlarmProtocol(protocol) {
        return this.fetch("getUserAlarmProtocol", { protocol });
    }
    getAlarmProtocol(protocol) {
        return this.fetch("getAlarmProtocol", { protocol });
    }
    getTerminalData(mac, pid) {
        return this.fetch("getTerminalData", { mac, pid });
    }
    getTerminalDatas(mac, pid, name, datetime) {
        return this.fetch("getTerminalDatas", { mac, pid, name, datetime });
    }
    refreshDevTimeOut(mac, pid) {
        return this.fetch("refreshDevTimeOut", { mac, pid });
    }
    SendProcotolInstructSet(query, item) {
        return this.fetch("SendProcotolInstructSet", { query, item });
    }
    getProtocol(protocol) {
        return this.fetch("getProtocol", { protocol });
    }
    setUserSetupProtocol(protocol, type, arg) {
        return this.fetch("setUserSetupProtocol", { protocol, type, arg });
    }
    setAlias(mac, pid, protocol, name, alias) {
        return this.fetch("setAlias", { mac, pid, protocol, name, alias });
    }
    getTerminal(mac) {
        return this.fetch("getTerminal", { mac });
    }
    getUserLayout(id) {
        return this.fetch("getUserLayout", { id });
    }
    getAggregation(id) {
        return this.fetch("getAggregation", { id });
    }
    addAggregation(name, aggs) {
        return this.fetch("addAggregation", { name, aggs });
    }
    deleteAggregation(id) {
        return this.fetch("deleteAggregation", { id });
    }
    setUserLayout(id, type, bg, Layout) {
        return this.fetch("setUserLayout", { id, type, bg, Layout });
    }
    V2_API_Aamp_gps2autoanvi(locations, coordsys = "gps") {
        return this.fetch('util/AMap/GPS2autonavi', { coordsys, locations: Array.isArray(locations) ? locations.join("|") : locations });
    }
    V2_API_Aamp_ip2local(ip) {
        return this.fetch("util/AMap/IP2loction", { ip });
    }
    iotRemoteUrl(mac) {
        return this.fetch('root/iotRemoteUrl', { mac });
    }
    Nodes() {
        return this.fetch("root/Nodes");
    }
    addRegisterTerminal(DevMac, mountNode) {
        return this.fetch("root/addRegisterTerminal", { DevMac, mountNode });
    }
    getRootTerminal(mac) {
        return this.fetch("getTerminal", { mac });
    }
    addRegisterDev(ids, mountDev) {
        return this.fetch("root/addRegisterDev", { ids, mountDev });
    }
    getRegisterDev(id) {
        return this.fetch("getRegisterDev", { id });
    }
    delRegisterDev(id) {
        return this.fetch("root/delRegisterDev", { id });
    }
    getRegisterDevs() {
        return this.fetch("root/getRegisterDevs");
    }
    sendATInstruct(mac, content) {
        return this.fetch("root/sendATInstruct", { mac, content });
    }
    initTerminal(mac) {
        return this.fetch("root/initTerminal", { mac });
    }
    qr(code) {
        return this.fetch("qr", { code });
    }
    async fetch(url, data = {}, method = "POST") {
        const token = this.token || await wx.getStorage({ key: 'token' }).then(el => el.data).catch(() => "");
        return await new Promise((resolve, reject) => {
            wx.request({
                timeout: 1000 * 60,
                url: config_1.urlRequest + "/api/" + url,
                data,
                method,
                enableHttp2: true,
                header: { token, type: 'wp' },
                success: res => {
                    if (res.data.code === 201) {
                        wx.navigateTo({
                            url: '/pages/util/smsValidation/smsValidation',
                            events: {
                                code: (code) => {
                                    this.fetch('smsCodeValidation', { code }).then(codeValidation => {
                                        if (codeValidation.code) {
                                            this.fetch(url, data, method).then(res => {
                                                resolve(res.data);
                                            });
                                        }
                                        else {
                                            wx.showModal({
                                                title: 'error',
                                                content: '短信校验错误'
                                            });
                                            throw new Error();
                                        }
                                    });
                                }
                            }
                        });
                    }
                    else
                        resolve(res.data);
                },
                fail: e => {
                    console.log({ e });
                    wx.showToast({ title: '服务器错误', content: e.errMsg });
                    wx.hideLoading();
                    reject(e);
                }
            });
        });
    }
}
exports.default = new api();
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../config");
class api {
    constructor() {
        this.token = "";
        this.wsEventMap = new Map();
    }
    setToken(token) {
        this.token = token;
        wx.setBackgroundFetchToken({
            token
        });
        this.ws = wx.connectSocket({
            url: config_1.urlWs,
            header: {
                'content-type': 'application/json',
                token
            },
            success: (res) => {
                console.log({ res });
            },
            fail(err) {
                console.log({ err });
            }
        });
        this.ws.onOpen(() => {
            this.ws.send({
                data: JSON.stringify({ token: token })
            });
        });
        this.ws.onMessage(res => {
            if (/^{.*}$/.test(res.data)) {
                const { type, data } = JSON.parse(res.data);
                const fun = this.wsEventMap.get(type);
                if (fun) {
                    fun(data);
                }
            }
        });
        this.onMessage('info', msg => {
            wx.showModal({
                content: msg,
                title: 'info'
            });
        });
        this.onMessage('alarm', (data) => {
            wx.showModal({
                content: data.msg,
                title: '设备告警提醒',
                success() {
                    wx.switchTab({
                        url: '/pages/index/alarm/alarm'
                    });
                }
            });
        });
    }
    onMessage(event, fun) {
        if (!this.wsEventMap.has(event)) {
            this.wsEventMap.set(event, fun);
        }
    }
    offWs(event) {
        this.wsEventMap.delete(event);
    }
    async login(data) {
        const el = await this.fetch("auth/code2Session", data, "GET");
        if (el.code) {
            this.setToken(el.data.token);
        }
        return el;
    }
    async userlogin(data) {
        const el = await this.fetch('auth/wplogin', data);
        if (el.code) {
            this.setToken(el.data.token);
        }
        return el;
    }
    updateAvanter(nickName, avanter) {
        return this.fetch('updateAvanter', { nickName, avanter });
    }
    async unbindwx() {
        const el = await this.fetch('unbindwx');
        this.token = "";
        return el;
    }
    getphonenumber(data) {
        return this.fetch("auth/getphonenumber", data);
    }
    registerUser(data) {
        return this.fetch("auth/wxRegister", data);
    }
    bindDev(mac) {
        return this.fetch('bindDev', { mac });
    }
    getAlarmunconfirmed() {
        return this.fetch('getAlarmunconfirmed');
    }
    getGPSaddress(location) {
        return this.fetch('getGPSaddress', { location });
    }
    async cancelwx() {
        const el = await this.fetch('cancelwx');
        this.token = "";
        return el;
    }
    addVm() {
        return this.fetch('addVm');
    }
    modifyDTUName(dtu, name) {
        return this.fetch('modifyDTUName', { dtu, name });
    }
    updateGps(mac, jw) {
        return this.fetch('updateGps', { mac, jw });
    }
    webLogin(code) {
        return this.fetch('webLogin', { code, token: this.token });
    }
    addUser(name, user, passwd, tel, mail, company) {
        return this.fetch("guest/addUser", { name, user, passwd, tel, mail, company });
    }
    resetPasswdValidation(user) {
        return this.fetch("guest/resetPasswdValidation", { user });
    }
    resetUserPasswd(user, passwd, code) {
        return this.fetch("guest/resetUserPasswd", { user, passwd, code });
    }
    wxlogin(code, state) {
        return this.fetch("auth/wxlogin", { code, state });
    }
    crc(data) {
        return this.fetch("open//crc", { data });
    }
    BindDev() {
        return this.fetch("BindDev");
    }
    userInfo() {
        return this.fetch("userInfo");
    }
    getAlarm(start = new Date().toLocaleDateString().replace(/\//g, "-") + " 0:00:00", end = new Date().toLocaleDateString().replace(/\//g, "-") + " 23:59:59") {
        return this.fetch("loguartterminaldatatransfinites", { start, end });
    }
    confrimAlarm(id) {
        return this.fetch("confrimAlarm", { id });
    }
    getTerminalOnline(mac) {
        return this.fetch("getTerminalOnline", { mac });
    }
    modifyTerminal(mac, name) {
        return this.fetch('modifyTerminal', { mac, name });
    }
    addUserTerminal(mac) {
        return this.fetch("addUserTerminal", { mac });
    }
    delUserTerminal(mac) {
        return this.fetch("delUserTerminal", { mac });
    }
    getDevTypes(Type) {
        return this.fetch("getDevTypes", { Type });
    }
    delTerminalMountDev(mac, pid) {
        return this.fetch("delTerminalMountDev", { mac, pid });
    }
    addTerminalMountDev(mac, mountDev) {
        return this.fetch("addTerminalMountDev", { mac, mountDev });
    }
    getUserAlarmSetup() {
        return this.fetch("getUserAlarmSetup");
    }
    modifyUserAlarmSetupTel(tels, mails) {
        return this.fetch("modifyUserAlarmSetupTel", { tels, mails });
    }
    modifyUserInfo(data) {
        return this.fetch("modifyUserInfo", { data });
    }
    mpTicket() {
        return this.fetch("mpTicket");
    }
    wpTicket() {
        return this.fetch("wpTicket");
    }
    getUserAlarmProtocol(protocol) {
        return this.fetch("getUserAlarmProtocol", { protocol });
    }
    getAlarmProtocol(protocol) {
        return this.fetch("getAlarmProtocol", { protocol });
    }
    getTerminalData(mac, pid) {
        return this.fetch("getTerminalData", { mac, pid });
    }
    getTerminalDatas(mac, pid, name, datetime) {
        return this.fetch("getTerminalDatas", { mac, pid, name, datetime });
    }
    refreshDevTimeOut(mac, pid) {
        return this.fetch("refreshDevTimeOut", { mac, pid });
    }
    SendProcotolInstructSet(query, item) {
        return this.fetch("SendProcotolInstructSet", { query, item });
    }
    getProtocol(protocol) {
        return this.fetch("getProtocol", { protocol });
    }
    setUserSetupProtocol(protocol, type, arg) {
        return this.fetch("setUserSetupProtocol", { protocol, type, arg });
    }
    setAlias(mac, pid, protocol, name, alias) {
        return this.fetch("setAlias", { mac, pid, protocol, name, alias });
    }
    getTerminal(mac) {
        return this.fetch("getTerminal", { mac });
    }
    getUserLayout(id) {
        return this.fetch("getUserLayout", { id });
    }
    getAggregation(id) {
        return this.fetch("getAggregation", { id });
    }
    addAggregation(name, aggs) {
        return this.fetch("addAggregation", { name, aggs });
    }
    deleteAggregation(id) {
        return this.fetch("deleteAggregation", { id });
    }
    setUserLayout(id, type, bg, Layout) {
        return this.fetch("setUserLayout", { id, type, bg, Layout });
    }
    V2_API_Aamp_gps2autoanvi(locations, coordsys = "gps") {
        return this.fetch('util/AMap/GPS2autonavi', { coordsys, locations: Array.isArray(locations) ? locations.join("|") : locations });
    }
    V2_API_Aamp_ip2local(ip) {
        return this.fetch("util/AMap/IP2loction", { ip });
    }
    iotRemoteUrl(mac) {
        return this.fetch('root/iotRemoteUrl', { mac });
    }
    Nodes() {
        return this.fetch("root/Nodes");
    }
    addRegisterTerminal(DevMac, mountNode) {
        return this.fetch("root/addRegisterTerminal", { DevMac, mountNode });
    }
    getRootTerminal(mac) {
        return this.fetch("getTerminal", { mac });
    }
    addRegisterDev(ids, mountDev) {
        return this.fetch("root/addRegisterDev", { ids, mountDev });
    }
    getRegisterDev(id) {
        return this.fetch("getRegisterDev", { id });
    }
    delRegisterDev(id) {
        return this.fetch("root/delRegisterDev", { id });
    }
    getRegisterDevs() {
        return this.fetch("root/getRegisterDevs");
    }
    sendATInstruct(mac, content) {
        return this.fetch("root/sendATInstruct", { mac, content });
    }
    initTerminal(mac) {
        return this.fetch("root/initTerminal", { mac }, "POST", 1000 * 60 * 5);
    }
    qr(code) {
        return this.fetch("qr", { code });
    }
    async fetch(url, data = {}, method = "POST", timeout = 1000 * 60) {
        const token = this.token || await wx.getStorage({ key: 'token' }).then(el => el.data).catch(() => "");
        return await new Promise((resolve, reject) => {
            wx.request({
                timeout,
                url: config_1.urlRequest + "/api/" + url,
                data,
                method,
                enableHttp2: true,
                header: { token, type: 'wp' },
                success: res => {
                    if (res.data.code === 201) {
                        wx.navigateTo({
                            url: '/pages/util/smsValidation/smsValidation',
                            events: {
                                code: (code) => {
                                    this.fetch('smsCodeValidation', { code }).then(codeValidation => {
                                        if (codeValidation.code) {
                                            this.fetch(url, data, method).then(res => {
                                                resolve(res.data);
                                            });
                                        }
                                        else {
                                            wx.showModal({
                                                title: 'error',
                                                content: '短信校验错误'
                                            });
                                            throw new Error();
                                        }
                                    });
                                }
                            }
                        });
                    }
                    else
                        resolve(res.data);
                },
                fail: e => {
                    console.log({ e });
                    wx.showToast({ title: '服务器错误', content: e.errMsg });
                    wx.hideLoading();
                    reject(e);
                }
            });
        });
    }
}
exports.default = new api();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTZDO0FBd0I3QyxNQUFNLEdBQUc7SUFVUDtRQUNFLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFBO1FBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO0lBQzdCLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBYTtRQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixFQUFFLENBQUMsdUJBQXVCLENBQUM7WUFDekIsS0FBSztTQUNOLENBQUMsQ0FBQTtRQUdGLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztZQUN6QixHQUFHLEVBQUUsY0FBSztZQUNWLE1BQU0sRUFBRTtnQkFDTixjQUFjLEVBQUUsa0JBQWtCO2dCQUNsQyxLQUFLO2FBQ047WUFDRCxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDZixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUd2QixDQUFDO1lBQ0QsSUFBSSxDQUFDLEdBQUc7Z0JBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDdkIsQ0FBQztTQUNGLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztnQkFDWCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQzthQUN2QyxDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBRXRCLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBYyxDQUFDLEVBQUU7Z0JBQ3JDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQWdDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQWMsQ0FBQyxDQUFBO2dCQUNsRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDckMsSUFBSSxHQUFHLEVBQUU7b0JBQ1AsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO2lCQUNWO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQTtRQUdGLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLEVBQUUsQ0FBQyxTQUFTLENBQUM7Z0JBQ1gsT0FBTyxFQUFFLEdBQUc7Z0JBQ1osS0FBSyxFQUFFLE1BQU07YUFDZCxDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxTQUFTLENBQXVCLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3JELEVBQUUsQ0FBQyxTQUFTLENBQUM7Z0JBQ1gsT0FBTyxFQUFHLElBQTZCLENBQUMsR0FBRztnQkFDM0MsS0FBSyxFQUFFLFFBQVE7Z0JBQ2YsT0FBTztvQkFDTCxFQUFFLENBQUMsU0FBUyxDQUFDO3dCQUNYLEdBQUcsRUFBRSwwQkFBMEI7cUJBQ2hDLENBQUMsQ0FBQTtnQkFDSixDQUFDO2FBQ0YsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsU0FBUyxDQUFVLEtBQWEsRUFBRSxHQUF1QjtRQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQ2hDO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFhO1FBQ2pCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFRRCxLQUFLLENBQUMsS0FBSyxDQUFDLElBQXlDO1FBQ25ELE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBb0IsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ2hGLElBQUksRUFBRSxDQUFDLElBQUksRUFBRTtZQUNYLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUM3QjtRQUNELE9BQU8sRUFBRSxDQUFBO0lBQ1gsQ0FBQztJQU1ELEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBd0Y7UUFDdEcsTUFBTSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFvQixjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDcEUsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFO1lBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQzdCO1FBQ0QsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0lBT0QsYUFBYSxDQUFDLFFBQWdCLEVBQUUsT0FBZTtRQUM3QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDM0QsQ0FBQztJQUtELEtBQUssQ0FBQyxRQUFRO1FBQ1osTUFBTSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFBO1FBQ2YsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0lBTUQsY0FBYyxDQUFDLElBQTJEO1FBQ3hFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBMEIscUJBQXFCLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDekUsQ0FBQztJQU1ELFlBQVksQ0FBQyxJQUFrRjtRQUM3RixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQU1ELE9BQU8sQ0FBQyxHQUFXO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBTSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQzVDLENBQUM7SUFLRCxtQkFBbUI7UUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFTLHFCQUFxQixDQUFDLENBQUE7SUFDbEQsQ0FBQztJQU1ELGFBQWEsQ0FBQyxRQUFnQjtRQUM1QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQU0sZUFBZSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtJQUN2RCxDQUFDO0lBS0QsS0FBSyxDQUFDLFFBQVE7UUFDWixNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQVMsVUFBVSxDQUFDLENBQUE7UUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUE7UUFDZixPQUFPLEVBQUUsQ0FBQTtJQUNYLENBQUM7SUFPRCxLQUFLO1FBQ0gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFrQixPQUFPLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0lBT0QsYUFBYSxDQUFDLEdBQVcsRUFBRSxJQUFZO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBUyxlQUFlLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUMzRCxDQUFDO0lBT0QsU0FBUyxDQUFDLEdBQVcsRUFBRSxFQUFVO1FBQy9CLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBUyxXQUFXLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNyRCxDQUFDO0lBTUQsUUFBUSxDQUFDLElBQVk7UUFDbkIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFTLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7SUFDcEUsQ0FBQztJQWlDRCxPQUFPLENBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxNQUFjLEVBQUUsR0FBVyxFQUFFLElBQVksRUFBRSxPQUFlO1FBQzVGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDaEYsQ0FBQztJQU9ELHFCQUFxQixDQUFDLElBQVk7UUFDaEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLDZCQUE2QixFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUM1RCxDQUFDO0lBU0QsZUFBZSxDQUFDLElBQVksRUFBRSxNQUFjLEVBQUUsSUFBWTtRQUN4RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDcEUsQ0FBQztJQVFELE9BQU8sQ0FBQyxJQUFZLEVBQUUsS0FBYTtRQUNqQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7SUFDcEQsQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFTLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDbEQsQ0FBQztJQU1ELE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQWtCLFNBQVMsQ0FBQyxDQUFBO0lBQy9DLENBQUM7SUFNRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFnQixVQUFVLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBUUQsUUFBUSxDQUFDLFFBQWdCLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLFVBQVUsRUFBRSxNQUFjLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLFdBQVc7UUFDeEssT0FBTyxJQUFJLENBQUMsS0FBSyxDQUE4QyxpQ0FBaUMsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQ25ILENBQUM7SUFPRCxZQUFZLENBQUMsRUFBVztRQUN0QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUMzQyxDQUFDO0lBT0QsaUJBQWlCLENBQUMsR0FBVztRQUMzQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQXVCLG1CQUFtQixFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtJQUN2RSxDQUFDO0lBUUQsY0FBYyxDQUFDLEdBQVcsRUFBRSxJQUFZO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFNRCxlQUFlLENBQUMsR0FBVztRQUN6QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQy9DLENBQUM7SUFPRCxlQUFlLENBQUMsR0FBVztRQUN6QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQy9DLENBQUM7SUFPRCxXQUFXLENBQUMsSUFBWTtRQUN0QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQWtCLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDN0QsQ0FBQztJQU9ELG1CQUFtQixDQUFDLEdBQVcsRUFBRSxHQUFXO1FBQzFDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQ3hELENBQUM7SUFRRCxtQkFBbUIsQ0FBQyxHQUFXLEVBQUUsUUFBZ0M7UUFDL0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDN0QsQ0FBQztJQVFELGlCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBaUIsbUJBQW1CLENBQUMsQ0FBQTtJQUN4RCxDQUFDO0lBUUQsdUJBQXVCLENBQUMsSUFBYyxFQUFFLEtBQWU7UUFDckQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7SUFDL0QsQ0FBQztJQVFELGNBQWMsQ0FBQyxJQUE0QjtRQUN6QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQy9DLENBQUM7SUFPRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFPRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFPRCxvQkFBb0IsQ0FBQyxRQUFnQjtRQUNuQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQWlDLHNCQUFzQixFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtJQUN6RixDQUFDO0lBTUQsZ0JBQWdCLENBQUMsUUFBZ0I7UUFDL0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFpQyxrQkFBa0IsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDckYsQ0FBQztJQU9ELGVBQWUsQ0FBQyxHQUFXLEVBQUUsR0FBb0I7UUFDL0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUF1QixpQkFBaUIsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQzFFLENBQUM7SUFVRCxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsR0FBb0IsRUFBRSxJQUFZLEVBQUUsUUFBZ0I7UUFDaEYsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUF5QixrQkFBa0IsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDN0YsQ0FBQztJQU9ELGlCQUFpQixDQUFDLEdBQVcsRUFBRSxHQUFXO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQ3RELENBQUM7SUFRRCx1QkFBdUIsQ0FBQyxLQUE0QixFQUFFLElBQXlCO1FBQzdFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBeUIseUJBQXlCLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUN2RixDQUFDO0lBT0QsV0FBVyxDQUFDLFFBQWdCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBZ0IsYUFBYSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBU0Qsb0JBQW9CLENBQUMsUUFBZ0IsRUFBRSxJQUFnQyxFQUFFLEdBQVE7UUFDL0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQ3BFLENBQUM7SUFXRCxRQUFRLENBQUMsR0FBVyxFQUFFLEdBQVcsRUFBRSxRQUFnQixFQUFFLElBQVksRUFBRSxLQUFhO1FBQzlFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUNwRSxDQUFDO0lBT0QsV0FBVyxDQUFDLEdBQVc7UUFDckIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFnQixhQUFhLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQzFELENBQUM7SUFNRCxhQUFhLENBQUMsRUFBVTtRQUN0QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQWtCLGVBQWUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDN0QsQ0FBQztJQU1ELGNBQWMsQ0FBQyxFQUFVO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBbUIsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQy9ELENBQUM7SUFRRCxjQUFjLENBQUMsSUFBWSxFQUFFLElBQTJCO1FBQ3RELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQ3JELENBQUM7SUFRRCxpQkFBaUIsQ0FBQyxFQUFVO1FBQzFCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDaEQsQ0FBQztJQVNELGFBQWEsQ0FBQyxFQUFVLEVBQUUsSUFBWSxFQUFFLEVBQVUsRUFBRSxNQUFvQztRQUN0RixPQUFPLElBQUksQ0FBQyxLQUFLLENBQXlCLGVBQWUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUE7SUFDdEYsQ0FBQztJQUlELHdCQUF3QixDQUFDLFNBQTRCLEVBQUUsV0FBdUMsS0FBSztRQUNqRyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQW9CLHdCQUF3QixFQUFFLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFBO0lBQ3JKLENBQUM7SUFHRCxvQkFBb0IsQ0FBQyxFQUFVO1FBQzdCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBUyxzQkFBc0IsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDM0QsQ0FBQztJQWdCRCxZQUFZLENBQUMsR0FBVztRQUN0QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQVMsbUJBQW1CLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQ3pELENBQUM7SUFNRCxLQUFLO1FBQ0gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFvQixZQUFZLENBQUUsQ0FBQTtJQUNyRCxDQUFDO0lBUUQsbUJBQW1CLENBQUMsTUFBYyxFQUFFLFNBQWlCO1FBQ25ELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsRUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFBO0lBQ3RFLENBQUM7SUFPRCxlQUFlLENBQUMsR0FBVztRQUN6QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQWdCLGFBQWEsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDMUQsQ0FBQztJQU9ELGNBQWMsQ0FBQyxHQUFhLEVBQUUsUUFBZ0M7UUFDNUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFxQixxQkFBcUIsRUFBRSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO0lBQ2pGLENBQUM7SUFPRCxjQUFjLENBQUMsRUFBVTtRQUN2QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQW1CLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBT0QsY0FBYyxDQUFDLEVBQVU7UUFDdkIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNsRCxDQUFDO0lBTUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBcUIsc0JBQXNCLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBT0QsY0FBYyxDQUFDLEdBQVcsRUFBRSxPQUFlO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBeUIscUJBQXFCLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUNwRixDQUFDO0lBT0QsWUFBWSxDQUFDLEdBQVc7UUFDdEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDeEUsQ0FBQztJQU1ELEVBQUUsQ0FBQyxJQUFZO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFTLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDM0MsQ0FBQztJQVlELEtBQUssQ0FBQyxLQUFLLENBQUksR0FBVyxFQUFFLE9BQWUsRUFBRSxFQUFFLFNBQXlCLE1BQU0sRUFBRSxVQUFrQixJQUFJLEdBQUcsRUFBRTtRQUN6RyxNQUFNLEtBQUssR0FBVyxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDN0csT0FBTyxNQUFNLElBQUksT0FBTyxDQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3RELEVBQUUsQ0FBQyxPQUFPLENBQVk7Z0JBQ3BCLE9BQU87Z0JBQ1AsR0FBRyxFQUFFLG1CQUFVLEdBQUcsT0FBTyxHQUFHLEdBQUc7Z0JBQy9CLElBQUk7Z0JBQ0osTUFBTTtnQkFDTixXQUFXLEVBQUUsSUFBSTtnQkFDakIsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7Z0JBQzdCLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRTtvQkFDYixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBRTt3QkFDekIsRUFBRSxDQUFDLFVBQVUsQ0FBQzs0QkFDWixHQUFHLEVBQUUseUNBQXlDOzRCQUM5QyxNQUFNLEVBQUU7Z0NBQ04sSUFBSSxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUU7b0NBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTt3Q0FDOUQsSUFBSSxjQUFjLENBQUMsSUFBSSxFQUFFOzRDQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dEQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQVcsQ0FBQyxDQUFBOzRDQUMxQixDQUFDLENBQUMsQ0FBQTt5Q0FDSDs2Q0FBTTs0Q0FDTCxFQUFFLENBQUMsU0FBUyxDQUFDO2dEQUNYLEtBQUssRUFBRSxPQUFPO2dEQUNkLE9BQU8sRUFBRSxRQUFROzZDQUNsQixDQUFDLENBQUE7NENBQ0YsTUFBTSxJQUFJLEtBQUssRUFBRSxDQUFBO3lDQUNsQjtvQ0FDSCxDQUFDLENBQUMsQ0FBQTtnQ0FDSixDQUFDOzZCQUNGO3lCQUNGLENBQUMsQ0FBQTtxQkFDSDs7d0JBQ0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFXLENBQUMsQ0FBQTtnQkFDNUIsQ0FBQztnQkFDRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUU7b0JBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ25CLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtvQkFDbkQsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFBO29CQUNoQixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ1gsQ0FBQzthQUNGLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGO0FBRUQsa0JBQWUsSUFBSSxHQUFHLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVybFJlcXVlc3QsIHVybFdzIH0gZnJvbSBcIi4uL2NvbmZpZ1wiXG5cbmV4cG9ydCBpbnRlcmZhY2UgdGVuY2V0TWFwIHtcbiAgLyog54q25oCB56CB77yMMOS4uuato+W4uCxcbjMxMOivt+axguWPguaVsOS/oeaBr+acieivr++8jFxuMzExS2V55qC85byP6ZSZ6K+vLFxuMzA26K+35rGC5pyJ5oqk5oyB5L+h5oGv6K+35qOA5p+l5a2X56ym5LiyLFxuMTEw6K+35rGC5p2l5rqQ5pyq6KKr5o6I5p2DICovXG4gIHN0YXR1czogbnVtYmVyLFxuICByZXF1ZXN0X2lkOiBzdHJpbmcsXG4gIG1lc3NhZ2U6IHN0cmluZ1xuICByZXN1bHQ6IGFueVxufVxuXG5pbnRlcmZhY2UgcmVzdWx0PFQgPSBhbnk+IHtcbiAgY29kZTogbnVtYmVyXG4gIGRhdGE6IFRcbiAgbXNnOiBzdHJpbmdcbiAgW3g6IHN0cmluZ106IGFueVxufVxuXG4vKipcbiAqIEBjbGFzcyB3cOWuouaIt+err+e7n+S4gOivt+axgmFwaVxuICovXG5jbGFzcyBhcGkge1xuICB0b2tlbjogc3RyaW5nXG4gIHdzITogV2VjaGF0TWluaXByb2dyYW0uU29ja2V0VGFza1xuXG5cbiAgLyoqXG4gICAqIHdz5LqL5Lu25pS26ZuGLOmBv+WFjemHjeWkjeazqOWGjOebkeWQrOWvueixoVxuICAgKi9cbiAgd3NFdmVudE1hcDogTWFwPHN0cmluZywgKGU6IGFueSkgPT4gdm9pZD5cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnRva2VuID0gXCJcIlxuICAgIHRoaXMud3NFdmVudE1hcCA9IG5ldyBNYXAoKVxuICB9XG5cbiAgc2V0VG9rZW4odG9rZW46IHN0cmluZykge1xuICAgIHRoaXMudG9rZW4gPSB0b2tlblxuICAgIHd4LnNldEJhY2tncm91bmRGZXRjaFRva2VuKHtcbiAgICAgIHRva2VuXG4gICAgfSlcblxuXG4gICAgdGhpcy53cyA9IHd4LmNvbm5lY3RTb2NrZXQoe1xuICAgICAgdXJsOiB1cmxXcyxcbiAgICAgIGhlYWRlcjoge1xuICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB0b2tlblxuICAgICAgfSxcbiAgICAgIHN1Y2Nlc3M6IChyZXMpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coeyByZXMgfSk7XG5cblxuICAgICAgfSxcbiAgICAgIGZhaWwoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHsgZXJyIH0pO1xuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLndzLm9uT3BlbigoKSA9PiB7XG4gICAgICB0aGlzLndzLnNlbmQoe1xuICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7IHRva2VuOiB0b2tlbiB9KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy53cy5vbk1lc3NhZ2UocmVzID0+IHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHsgcmVzIH0pO1xuICAgICAgaWYgKC9eey4qfSQvLnRlc3QocmVzLmRhdGEgYXMgc3RyaW5nKSkge1xuICAgICAgICBjb25zdCB7IHR5cGUsIGRhdGEgfTogeyB0eXBlOiBzdHJpbmcsIGRhdGE6IGFueSB9ID0gSlNPTi5wYXJzZShyZXMuZGF0YSBhcyBzdHJpbmcpXG4gICAgICAgIGNvbnN0IGZ1biA9IHRoaXMud3NFdmVudE1hcC5nZXQodHlwZSlcbiAgICAgICAgaWYgKGZ1bikge1xuICAgICAgICAgIGZ1bihkYXRhKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuXG4gICAgdGhpcy5vbk1lc3NhZ2UoJ2luZm8nLCBtc2cgPT4ge1xuICAgICAgd3guc2hvd01vZGFsKHtcbiAgICAgICAgY29udGVudDogbXNnLFxuICAgICAgICB0aXRsZTogJ2luZm8nXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLm9uTWVzc2FnZTxVYXJ0LnVhcnRBbGFybU9iamVjdD4oJ2FsYXJtJywgKGRhdGEpID0+IHtcbiAgICAgIHd4LnNob3dNb2RhbCh7XG4gICAgICAgIGNvbnRlbnQ6IChkYXRhIGFzIFVhcnQudWFydEFsYXJtT2JqZWN0KS5tc2csXG4gICAgICAgIHRpdGxlOiAn6K6+5aSH5ZGK6K2m5o+Q6YaSJyxcbiAgICAgICAgc3VjY2VzcygpIHtcbiAgICAgICAgICB3eC5zd2l0Y2hUYWIoe1xuICAgICAgICAgICAgdXJsOiAnL3BhZ2VzL2luZGV4L2FsYXJtL2FsYXJtJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIG9uTWVzc2FnZTxUID0gYW55PihldmVudDogc3RyaW5nLCBmdW46IChkYXRhPzogVCkgPT4gdm9pZCkge1xuICAgIGlmICghdGhpcy53c0V2ZW50TWFwLmhhcyhldmVudCkpIHtcbiAgICAgIHRoaXMud3NFdmVudE1hcC5zZXQoZXZlbnQsIGZ1bilcbiAgICB9XG4gIH1cblxuICBvZmZXcyhldmVudDogc3RyaW5nKSB7XG4gICAgdGhpcy53c0V2ZW50TWFwLmRlbGV0ZShldmVudClcbiAgfVxuXG5cblxuICAvKipcbiAgICog55m75b2VLSDln5/lkI1cbiAgICogQHBhcmFtIGRhdGEgXG4gICAqL1xuICBhc3luYyBsb2dpbihkYXRhOiB7IGpzX2NvZGU6IHN0cmluZywgc2NlbmU/OiBzdHJpbmcgfSkge1xuICAgIGNvbnN0IGVsID0gYXdhaXQgdGhpcy5mZXRjaDx7IHRva2VuOiBzdHJpbmcgfT4oXCJhdXRoL2NvZGUyU2Vzc2lvblwiLCBkYXRhLCBcIkdFVFwiKVxuICAgIGlmIChlbC5jb2RlKSB7XG4gICAgICB0aGlzLnNldFRva2VuKGVsLmRhdGEudG9rZW4pXG4gICAgfVxuICAgIHJldHVybiBlbFxuICB9XG5cbiAgLyoqXG4gICAqIOeZu+W9lS3nlKjkuo7lsI/nqIvluo/nmbvlvZXpobXpnaLnmbvlvZVcbiAgICogQHBhcmFtIGRhdGEgXG4gICAqL1xuICBhc3luYyB1c2VybG9naW4oZGF0YTogeyBvcGVuaWQ6IHN0cmluZywgdW5pb25pZDogc3RyaW5nLCBhdmFudGVyOiBzdHJpbmcsIHVzZXI6IHN0cmluZywgcGFzc3dkOiBzdHJpbmcgfSkge1xuICAgIGNvbnN0IGVsID0gYXdhaXQgdGhpcy5mZXRjaDx7IHRva2VuOiBzdHJpbmcgfT4oJ2F1dGgvd3Bsb2dpbicsIGRhdGEpXG4gICAgaWYgKGVsLmNvZGUpIHtcbiAgICAgIHRoaXMuc2V0VG9rZW4oZWwuZGF0YS50b2tlbilcbiAgICB9XG4gICAgcmV0dXJuIGVsXG4gIH1cblxuICAvKipcbiAgICog5pu05paw55So5oi35aS05YOP5ZKM5pi156ewXG4gICAqIEBwYXJhbSBuaWNrTmFtZSDmmLXnp7BcbiAgICogQHBhcmFtIGF2YW50ZXIg5aS05YOP6ZO+5o6lXG4gICAqL1xuICB1cGRhdGVBdmFudGVyKG5pY2tOYW1lOiBzdHJpbmcsIGF2YW50ZXI6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoKCd1cGRhdGVBdmFudGVyJywgeyBuaWNrTmFtZSwgYXZhbnRlciB9KVxuICB9XG5cbiAgLyoqXG4gICAqIOeUqOS6juino+e7keW+ruS/oeWSjOmAj+S8oOi0puWPt+eahOe7keWumuWFs+ezu1xuICAgKi9cbiAgYXN5bmMgdW5iaW5kd3goKSB7XG4gICAgY29uc3QgZWwgPSBhd2FpdCB0aGlzLmZldGNoKCd1bmJpbmR3eCcpXG4gICAgdGhpcy50b2tlbiA9IFwiXCJcbiAgICByZXR1cm4gZWxcbiAgfVxuXG4gIC8qKlxuICAgKiDop6Plr4bnlLXor53lrZfnrKbkuLJcbiAgICogQHBhcmFtIGRhdGEgXG4gICAqL1xuICBnZXRwaG9uZW51bWJlcihkYXRhOiB7IG9wZW5pZDogc3RyaW5nLCBlbmNyeXB0ZWREYXRhOiBzdHJpbmcsIGl2OiBzdHJpbmcgfSkge1xuICAgIHJldHVybiB0aGlzLmZldGNoPHsgcGhvbmVOdW1iZXI6IHN0cmluZyB9PihcImF1dGgvZ2V0cGhvbmVudW1iZXJcIiwgZGF0YSlcbiAgfVxuXG4gIC8qKlxuICAgKiDms6jlhoxcbiAgICogQHBhcmFtIGRhdGEgXG4gICAqL1xuICByZWdpc3RlclVzZXIoZGF0YTogeyB1c2VyOiBzdHJpbmcsIG9wZW5pZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHRlbDogc3RyaW5nLCBhdmFudGVyOiBzdHJpbmcgfSkge1xuICAgIHJldHVybiB0aGlzLmZldGNoKFwiYXV0aC93eFJlZ2lzdGVyXCIsIGRhdGEpXG4gIH1cblxuICAvKipcbiAgICog57uR5a6aRFRVXG4gICAqIEBwYXJhbSBtYWMgXG4gICAqL1xuICBiaW5kRGV2KG1hYzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8YW55PignYmluZERldicsIHsgbWFjIH0pXG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5pyq56Gu6K6k5ZGK6K2m5pWw6YePXG4gICAqL1xuICBnZXRBbGFybXVuY29uZmlybWVkKCkge1xuICAgIHJldHVybiB0aGlzLmZldGNoPG51bWJlcj4oJ2dldEFsYXJtdW5jb25maXJtZWQnKVxuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPlmdwc+WumuS9jeeahOivpue7huWcsOWdgFxuICAgKiBAcGFyYW0gbG9jYXRpb24gXG4gICAqL1xuICBnZXRHUFNhZGRyZXNzKGxvY2F0aW9uOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxhbnk+KCdnZXRHUFNhZGRyZXNzJywgeyBsb2NhdGlvbiB9KVxuICB9XG5cbiAgLyoqXG4gICAqIOazqOmUgOW+ruS/oVxuICAgKi9cbiAgYXN5bmMgY2FuY2Vsd3goKSB7XG4gICAgY29uc3QgZWwgPSBhd2FpdCB0aGlzLmZldGNoPHN0cmluZz4oJ2NhbmNlbHd4JylcbiAgICB0aGlzLnRva2VuID0gXCJcIlxuICAgIHJldHVybiBlbFxuICB9XG5cblxuXG4gIC8qKlxuICAgKiDmt7vliqDomZrmi5/orr7lpIdcbiAgICovXG4gIGFkZFZtKCkge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFVhcnQuVGVybWluYWxbXT4oJ2FkZFZtJylcbiAgfVxuXG4gIC8qKlxuICAgKiDkv67mlLlEVFXlkI3np7BcbiAgICogQHBhcmFtIGR0dSBtYWNcbiAgICogQHBhcmFtIG5hbWUg5paw55qE5ZCN56ewXG4gICAqL1xuICBtb2RpZnlEVFVOYW1lKGR0dTogc3RyaW5nLCBuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxzdHJpbmc+KCdtb2RpZnlEVFVOYW1lJywgeyBkdHUsIG5hbWUgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrBkdHXlrprkvY1cbiAgICogQHBhcmFtIGR0dSBkdHVNYWNcbiAgICogQHBhcmFtIGp3IOe7j+e6rOW6plxuICAgKi9cbiAgdXBkYXRlR3BzKG1hYzogc3RyaW5nLCBqdzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8c3RyaW5nPigndXBkYXRlR3BzJywgeyBtYWMsIGp3IH0pXG4gIH1cblxuICAvKipcbiAgICogd2Vi55m75b2VXG4gICAqIEBwYXJhbSBjb2RlIHRva2VuXG4gICAqL1xuICB3ZWJMb2dpbihjb2RlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxzdHJpbmc+KCd3ZWJMb2dpbicsIHsgY29kZSwgdG9rZW46IHRoaXMudG9rZW4gfSlcbiAgfVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gIC8qKlxuICAgKiDmt7vliqDnlKjmiLdcbiAgICogQHBhcmFtIG5hbWUgXG4gICAqIEBwYXJhbSB1c2VyIFxuICAgKiBAcGFyYW0gcGFzc3dkIFxuICAgKiBAcGFyYW0gdGVsIHhcbiAgICogQHBhcmFtIG1haWwgXG4gICAqIEBwYXJhbSBjb21wYW55IFxuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIGFkZFVzZXIobmFtZTogc3RyaW5nLCB1c2VyOiBzdHJpbmcsIHBhc3N3ZDogc3RyaW5nLCB0ZWw6IHN0cmluZywgbWFpbDogc3RyaW5nLCBjb21wYW55OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaChcImd1ZXN0L2FkZFVzZXJcIiwgeyBuYW1lLCB1c2VyLCBwYXNzd2QsIHRlbCwgbWFpbCwgY29tcGFueSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIOmHjee9ruWvhueggeWIsOWPkemAgemqjOivgeeggVxuICAgKiBAcGFyYW0gdXNlciBcbiAgICogQHJldHVybnMgXG4gICAqL1xuICByZXNldFBhc3N3ZFZhbGlkYXRpb24odXNlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJndWVzdC9yZXNldFBhc3N3ZFZhbGlkYXRpb25cIiwgeyB1c2VyIH0pXG4gIH1cblxuICAvKipcbiAgICog6YeN572u55So5oi35a+G56CBXG4gICAqIEBwYXJhbSB1c2VyIFxuICAgKiBAcGFyYW0gcGFzc3dkIFxuICAgKiBAcGFyYW0gY29kZSBcbiAgICogQHJldHVybnMgXG4gICAqL1xuICByZXNldFVzZXJQYXNzd2QodXNlcjogc3RyaW5nLCBwYXNzd2Q6IHN0cmluZywgY29kZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJndWVzdC9yZXNldFVzZXJQYXNzd2RcIiwgeyB1c2VyLCBwYXNzd2QsIGNvZGUgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDlvq7kv6HnmbvlvZVcbiAgICogQHBhcmFtIGNvZGUgXG4gICAqIEBwYXJhbSBzdGF0ZSBcbiAgICogQHJldHVybnMgXG4gICAqL1xuICB3eGxvZ2luKGNvZGU6IHN0cmluZywgc3RhdGU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoKFwiYXV0aC93eGxvZ2luXCIsIHsgY29kZSwgc3RhdGUgfSlcbiAgfVxuXG4gIGNyYyhkYXRhOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxzdHJpbmc+KFwib3Blbi8vY3JjXCIsIHsgZGF0YSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPlueUqOaIt+e7keWumuiuvuWkh1xuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIEJpbmREZXYoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8VWFydC5CaW5kRGV2aWNlPihcIkJpbmREZXZcIilcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bnlKjmiLfkv6Hmga9cbiAgICogQHJldHVybnMgXG4gICAqL1xuICB1c2VySW5mbygpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxVYXJ0LlVzZXJJbmZvPihcInVzZXJJbmZvXCIpXG4gIH1cblxuICAvKipcbiAgICog6I635Y+W55So5oi35ZGK6K2mXG4gICAqIEBwYXJhbSBzdGFydCBcbiAgICogQHBhcmFtIGVuZCBcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBnZXRBbGFybShzdGFydDogc3RyaW5nID0gbmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKS5yZXBsYWNlKC9cXC8vZywgXCItXCIpICsgXCIgMDowMDowMFwiLCBlbmQ6IHN0cmluZyA9IG5ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCkucmVwbGFjZSgvXFwvL2csIFwiLVwiKSArIFwiIDIzOjU5OjU5XCIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDwoVWFydC51YXJ0QWxhcm1PYmplY3QgJiB7IHRpbWU6IHN0cmluZyB9KVtdPihcImxvZ3VhcnR0ZXJtaW5hbGRhdGF0cmFuc2Zpbml0ZXNcIiwgeyBzdGFydCwgZW5kIH0pXG4gIH1cblxuICAvKipcbiAgICog56Gu6K6k55So5oi35ZGK6K2mXG4gICAqIEBwYXJhbSBpZCBcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBjb25mcmltQWxhcm0oaWQ/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaChcImNvbmZyaW1BbGFybVwiLCB7IGlkIH0pXG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5oyH5a6a5LiU5Zyo57q/55qE57uI56uvXG4gICAqIEBwYXJhbSBtYWMgXG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgZ2V0VGVybWluYWxPbmxpbmUobWFjOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxVYXJ0LlRlcm1pbmFsIHwgbnVsbD4oXCJnZXRUZXJtaW5hbE9ubGluZVwiLCB7IG1hYyB9KVxuICB9XG5cbiAgLyoqXG4gICog5L+u5pS555So5oi36K6+5aSH5Yir5ZCNXG4gICogQHBhcmFtIG1hYyBcbiAgKiBAcGFyYW0gbmFtZSBcbiAgKiBAcmV0dXJucyBcbiAgKi9cbiAgbW9kaWZ5VGVybWluYWwobWFjOiBzdHJpbmcsIG5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoKCdtb2RpZnlUZXJtaW5hbCcsIHsgbWFjLCBuYW1lIH0pXG4gIH1cblxuICAvKipcbiAgKiDmt7vliqDnu5Hlrprorr7lpIdcbiAgKiBAcGFyYW0gbWFjIFxuICAqL1xuICBhZGRVc2VyVGVybWluYWwobWFjOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaChcImFkZFVzZXJUZXJtaW5hbFwiLCB7IG1hYyB9KVxuICB9XG5cbiAgLyoqXG4gICog5Yig6Zmk57uR5a6a6K6+5aSHXG4gICogQHBhcmFtIG1hYyBcbiAgKiBAcmV0dXJucyBcbiAgKi9cbiAgZGVsVXNlclRlcm1pbmFsKG1hYzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJkZWxVc2VyVGVybWluYWxcIiwgeyBtYWMgfSlcbiAgfVxuXG4gIC8qKlxuICAqIOiOt+WPluiuvuWkh+exu+Wei1xuICAqIEBwYXJhbSBUeXBlIFxuICAqIEByZXR1cm5zIFxuICAqL1xuICBnZXREZXZUeXBlcyhUeXBlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxVYXJ0LkRldnNUeXBlW10+KFwiZ2V0RGV2VHlwZXNcIiwgeyBUeXBlIH0pXG4gIH1cblxuICAvKipcbiAgKiDliKDpmaTnu4jnq6/mjILovb3orr7lpIdcbiAgKiBAcGFyYW0gbWFjIFxuICAqIEBwYXJhbSBwaWQgXG4gICovXG4gIGRlbFRlcm1pbmFsTW91bnREZXYobWFjOiBzdHJpbmcsIHBpZDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJkZWxUZXJtaW5hbE1vdW50RGV2XCIsIHsgbWFjLCBwaWQgfSlcbiAgfVxuXG4gIC8qKlxuICAqIMKgwqDmt7vliqDnlKjmiLfnu4jnq6/mjILovb3orr7lpIdcbiAgKiBAcGFyYW0gbWFjIFxuICAqIEBwYXJhbSBwYXJhbTIgXG4gICogQHJldHVybnMgXG4gICovXG4gIGFkZFRlcm1pbmFsTW91bnREZXYobWFjOiBzdHJpbmcsIG1vdW50RGV2OiBVYXJ0LlRlcm1pbmFsTW91bnREZXZzKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJhZGRUZXJtaW5hbE1vdW50RGV2XCIsIHsgbWFjLCBtb3VudERldiB9KVxuICB9XG5cbiAgLyoqXG4gICog6I635Y+W55So5oi35ZGK6K2m6YWN572uXG4gICogQHBhcmFtIHVzZXIgXG4gICogQHBhcmFtIGZpbHRlciBcbiAgKiBAcmV0dXJucyBcbiAgKi9cbiAgZ2V0VXNlckFsYXJtU2V0dXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8VWFydC51c2VyU2V0dXA+KFwiZ2V0VXNlckFsYXJtU2V0dXBcIilcbiAgfVxuXG4gIC8qKlxuICAqIOS/ruaUueeUqOaIt+WRiuitpumFjee9ruiBlOezu+aWueW8j1xuICAqIEBwYXJhbSB0ZWxzIOiBlOezu+eUteivnVxuICAqIEBwYXJhbSBtYWlscyDogZTns7vpgq7nrrFcbiAgKiBAcmV0dXJucyBcbiAgKi9cbiAgbW9kaWZ5VXNlckFsYXJtU2V0dXBUZWwodGVsczogc3RyaW5nW10sIG1haWxzOiBzdHJpbmdbXSkge1xuICAgIHJldHVybiB0aGlzLmZldGNoKFwibW9kaWZ5VXNlckFsYXJtU2V0dXBUZWxcIiwgeyB0ZWxzLCBtYWlscyB9KVxuICB9XG5cbiAgLyoqXG4gICog5L+u5pS555So5oi35L+h5oGvXG4gICogQHBhcmFtIHVzZXIgXG4gICogQHBhcmFtIGRhdGEgXG4gICogQHJldHVybnMgXG4gICovXG4gIG1vZGlmeVVzZXJJbmZvKGRhdGE6IFBhcnRpYWw8VWFydC5Vc2VySW5mbz4pIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaChcIm1vZGlmeVVzZXJJbmZvXCIsIHsgZGF0YSB9KVxuICB9XG5cbiAgLyoqXG4gICog6I635Y+W5YWs5LyX5Y+35LqM57u056CBXG4gICogQHBhcmFtIHVzZXIgXG4gICogQHJldHVybnMgXG4gICovXG4gIG1wVGlja2V0KCkge1xuICAgIHJldHVybiB0aGlzLmZldGNoKFwibXBUaWNrZXRcIilcbiAgfVxuXG4gIC8qKlxuICAqIOiOt+WPluWwj+eoi+W6j+S6jOe7tOeggVxuICAqIEBwYXJhbSB1c2VyIFxuICAqIEByZXR1cm5zIFxuICAqL1xuICB3cFRpY2tldCgpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaChcIndwVGlja2V0XCIpXG4gIH1cblxuXG4gIC8qKlxuICAqIOiOt+WPlueUqOaIt+WNleS4quWNj+iuruWRiuitpumFjee9rlxuICAqIEBwYXJhbSBwcm90b2NvbCBcbiAgKi9cbiAgZ2V0VXNlckFsYXJtUHJvdG9jb2wocHJvdG9jb2w6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFVhcnQuUHJvdG9jb2xDb25zdGFudFRocmVzaG9sZD4oXCJnZXRVc2VyQWxhcm1Qcm90b2NvbFwiLCB7IHByb3RvY29sIH0pXG4gIH1cblxuICAvKipcbiAgKiDojrflj5bljZXkuKrljY/orq7lkYrorabphY3nva5cbiAgKiBAcGFyYW0gcHJvdG9jb2wgXG4gICovXG4gIGdldEFsYXJtUHJvdG9jb2wocHJvdG9jb2w6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFVhcnQuUHJvdG9jb2xDb25zdGFudFRocmVzaG9sZD4oXCJnZXRBbGFybVByb3RvY29sXCIsIHsgcHJvdG9jb2wgfSlcbiAgfVxuXG4gIC8qKlxuICAqIOiOt+WPlueUqOaIt+iuvuWkh+i/kOihjOaVsOaNrlxuICAqIEBwYXJhbSBtYWMgXG4gICogQHBhcmFtIHBpZCBcbiAgKi9cbiAgZ2V0VGVybWluYWxEYXRhKG1hYzogc3RyaW5nLCBwaWQ6IG51bWJlciB8IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFVhcnQucXVlcnlSZXN1bHRTYXZlPihcImdldFRlcm1pbmFsRGF0YVwiLCB7IG1hYywgcGlkIH0pXG4gIH1cblxuICAvKipcbiAgICog6I635Y+W55So5oi36K6+5aSH5Y6G5Y+y6L+Q6KGM5pWw5o2uXG4gICAqIEBwYXJhbSBtYWMgXG4gICAqIEBwYXJhbSBwaWQgXG4gICAqIEBwYXJhbSBuYW1lIFxuICAgKiBAcGFyYW0gZGF0ZXRpbWUgXG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgZ2V0VGVybWluYWxEYXRhcyhtYWM6IHN0cmluZywgcGlkOiBudW1iZXIgfCBzdHJpbmcsIG5hbWU6IHN0cmluZywgZGF0ZXRpbWU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFVhcnQucXVlcnlSZXN1bHRTYXZlW10+KFwiZ2V0VGVybWluYWxEYXRhc1wiLCB7IG1hYywgcGlkLCBuYW1lLCBkYXRldGltZSB9KVxuICB9XG5cbiAgLyoqXG4gICog6YeN572u6K6+5aSH6LaF5pe254q25oCBXG4gICogQHBhcmFtIG1hYyBcbiAgKiBAcGFyYW0gcGlkIFxuICAqL1xuICByZWZyZXNoRGV2VGltZU91dChtYWM6IHN0cmluZywgcGlkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaChcInJlZnJlc2hEZXZUaW1lT3V0XCIsIHsgbWFjLCBwaWQgfSlcbiAgfVxuXG4gIC8qKlxuICAqIOWbuuWumuWPkemAgeiuvuWkh+aTjeS9nOaMh+S7pFxuICAqIEBwYXJhbSBxdWVyeSBcbiAgKiBAcGFyYW0gaXRlbSBcbiAgKiBAcmV0dXJucyBcbiAgKi9cbiAgU2VuZFByb2NvdG9sSW5zdHJ1Y3RTZXQocXVlcnk6IFVhcnQuaW5zdHJ1Y3RRdWVyeUFyZywgaXRlbTogVWFydC5PcHJhdGVJbnN0cnVjdCkge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFVhcnQuQXBvbGxvTW9uZ29SZXN1bHQ+KFwiU2VuZFByb2NvdG9sSW5zdHJ1Y3RTZXRcIiwgeyBxdWVyeSwgaXRlbSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPluaMh+WumuWNj+iurlxuICAgKiBAcGFyYW0gcHJvdG9jb2wgXG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgZ2V0UHJvdG9jb2wocHJvdG9jb2w6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFVhcnQucHJvdG9jb2w+KFwiZ2V0UHJvdG9jb2xcIiwgeyBwcm90b2NvbCB9KVxuICB9XG5cbiAgLyoqXG4gICog6K6+572u55So5oi36Ieq5a6a5LmJ6K6+572uKOWNj+iurumFjee9rilcbiAgKiBAcGFyYW0gUHJvdG9jb2wg5Y2P6K6uXG4gICogQHBhcmFtIHR5cGUg5pON5L2c57G75Z6LXG4gICogQHBhcmFtIGFyZyDlj4LmlbBcbiAgKiBAcmV0dXJucyBcbiAgKi9cbiAgc2V0VXNlclNldHVwUHJvdG9jb2wocHJvdG9jb2w6IHN0cmluZywgdHlwZTogVWFydC5Db25zdGFudFRocmVzaG9sZFR5cGUsIGFyZzogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJzZXRVc2VyU2V0dXBQcm90b2NvbFwiLCB7IHByb3RvY29sLCB0eXBlLCBhcmcgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDorr7lpIforr7lpIfliKvlkI1cbiAgICogQHBhcmFtIG1hYyBcbiAgICogQHBhcmFtIHBpZCBcbiAgICogQHBhcmFtIHByb3RvY29sIFxuICAgKiBAcGFyYW0gbmFtZSBcbiAgICogQHBhcmFtIGFsaWFzIFxuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHNldEFsaWFzKG1hYzogc3RyaW5nLCBwaWQ6IG51bWJlciwgcHJvdG9jb2w6IHN0cmluZywgbmFtZTogc3RyaW5nLCBhbGlhczogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJzZXRBbGlhc1wiLCB7IG1hYywgcGlkLCBwcm90b2NvbCwgbmFtZSwgYWxpYXMgfSlcbiAgfVxuXG4gIC8qKlxuICAqIOiOt+WPlue7iOerr+S/oeaBr1xuICAqIEBwYXJhbSBtYWMgXG4gICogQHJldHVybnMgXG4gICovXG4gIGdldFRlcm1pbmFsKG1hYzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8VWFydC5UZXJtaW5hbD4oXCJnZXRUZXJtaW5hbFwiLCB7IG1hYyB9KVxuICB9XG5cbiAgLyoqXG4gICogIOiOt+WPlueUqOaIt+W4g+WxgOmFjee9rlxuICAqIEBwYXJhbSBpZCBcbiAgKi9cbiAgZ2V0VXNlckxheW91dChpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8VWFydC51c2VyTGF5b3V0PihcImdldFVzZXJMYXlvdXRcIiwgeyBpZCB9KVxuICB9XG5cbiAgLyoqXG4gICogIOiOt+WPlueUqOaIt+W4g+WxgOmFjee9rlxuICAqIEBwYXJhbSBpZCBcbiAgKi9cbiAgZ2V0QWdncmVnYXRpb24oaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFVhcnQuQWdncmVnYXRpb24+KFwiZ2V0QWdncmVnYXRpb25cIiwgeyBpZCB9KVxuICB9XG5cbiAgLyoqXG4gICog5re75Yqg6IGa5ZCI6K6+5aSHXG4gICogQHBhcmFtIG5hbWUgXG4gICogQHBhcmFtIGFnZ3MgXG4gICogQHJldHVybnMgXG4gICovXG4gIGFkZEFnZ3JlZ2F0aW9uKG5hbWU6IHN0cmluZywgYWdnczogVWFydC5BZ2dyZWdhdGlvbkRldltdKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJhZGRBZ2dyZWdhdGlvblwiLCB7IG5hbWUsIGFnZ3MgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDliKDpmaTogZrlkIjorr7lpIdcbiAgICogQHBhcmFtIHVzZXIgXG4gICAqIEBwYXJhbSBpZCBcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBkZWxldGVBZ2dyZWdhdGlvbihpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJkZWxldGVBZ2dyZWdhdGlvblwiLCB7IGlkIH0pXG4gIH1cblxuICAvKipcbiAgKiDorr7nva7nlKjmiLfluIPlsYDphY3nva5cbiAgKiBAcGFyYW0gaWQgXG4gICogQHBhcmFtIHR5cGUgXG4gICogQHBhcmFtIGJnIFxuICAqIEBwYXJhbSBMYXlvdXQgXG4gICovXG4gIHNldFVzZXJMYXlvdXQoaWQ6IHN0cmluZywgdHlwZTogc3RyaW5nLCBiZzogc3RyaW5nLCBMYXlvdXQ6IFVhcnQuQWdncmVnYXRpb25MYXlvdXROb2RlW10pIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxVYXJ0LkFwb2xsb01vbmdvUmVzdWx0PihcInNldFVzZXJMYXlvdXRcIiwgeyBpZCwgdHlwZSwgYmcsIExheW91dCB9KVxuICB9XG5cblxuICAvLyBWMiBncHPovazpq5jlvrdncHNcbiAgVjJfQVBJX0FhbXBfZ3BzMmF1dG9hbnZpKGxvY2F0aW9uczogc3RyaW5nIHwgc3RyaW5nW10sIGNvb3Jkc3lzOiAnZ3BzJyB8ICdtYXBiYXInIHwgJ2JhaWR1JyA9IFwiZ3BzXCIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxzdHJpbmcgfCBzdHJpbmdbXT4oJ3V0aWwvQU1hcC9HUFMyYXV0b25hdmknLCB7IGNvb3Jkc3lzLCBsb2NhdGlvbnM6IEFycmF5LmlzQXJyYXkobG9jYXRpb25zKSA/IGxvY2F0aW9ucy5qb2luKFwifFwiKSA6IGxvY2F0aW9ucyB9KVxuICB9XG5cbiAgLy8gVjIgaXDovaxncHNcbiAgVjJfQVBJX0FhbXBfaXAybG9jYWwoaXA6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoPHN0cmluZz4oXCJ1dGlsL0FNYXAvSVAybG9jdGlvblwiLCB7IGlwIH0pXG4gIH1cblxuXG5cblxuXG5cblxuXG5cblxuXG4gIC8qKlxuICAqIOiOt+WPlmR0dei/nOeoi+iwg+ivlee9keWdgFxuICAqIEBwYXJhbSBtYWMgXG4gICovXG4gIGlvdFJlbW90ZVVybChtYWM6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoPHN0cmluZz4oJ3Jvb3QvaW90UmVtb3RlVXJsJywgeyBtYWMgfSlcbiAgfVxuXG4gIC8qKlxuICAgICAqIOiOt+WPluaJgOacieiKgueCuVxuICAgICAqIEBwYXJhbSBuYW1lIFxuICAgICAqL1xuICBOb2RlcygpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxVYXJ0Lk5vZGVDbGllbnRbXT4oXCJyb290L05vZGVzXCIsKVxuICB9XG5cbiAgLyoqXG4gICAgICog5re75Yqg55m76K6w6K6+5aSHXG4gICAgICogQHBhcmFtIERldk1hYyBcbiAgICAgKiBAcGFyYW0gbW91bnROb2RlIFxuICAgICAqIEByZXR1cm5zIFxuICAgICAqL1xuICBhZGRSZWdpc3RlclRlcm1pbmFsKERldk1hYzogc3RyaW5nLCBtb3VudE5vZGU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoKFwicm9vdC9hZGRSZWdpc3RlclRlcm1pbmFsXCIsIHsgRGV2TWFjLCBtb3VudE5vZGUgfSlcbiAgfVxuXG4gIC8qKlxuICAqIOiOt+WPlue7iOerr+S/oeaBr1xuICAqIEBwYXJhbSBtYWMgXG4gICogQHJldHVybnMgXG4gICovXG4gIGdldFJvb3RUZXJtaW5hbChtYWM6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFVhcnQuVGVybWluYWw+KFwiZ2V0VGVybWluYWxcIiwgeyBtYWMgfSlcbiAgfVxuXG5cbiAgLyoqXG4gICAgICog5rOo5YaM6K6+5aSHXG4gICAgICogQHBhcmFtIGRhdGEgXG4gICAgICovXG4gIGFkZFJlZ2lzdGVyRGV2KGlkczogc3RyaW5nW10sIG1vdW50RGV2OiBVYXJ0LlRlcm1pbmFsTW91bnREZXZzKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8VWFydC5yZWdpc3RlckRldltdPihcInJvb3QvYWRkUmVnaXN0ZXJEZXZcIiwgeyBpZHMsIG1vdW50RGV2IH0pXG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5oyH5a6a5rOo5YaM6K6+5aSHXG4gICAqIEBwYXJhbSBpZCBcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBnZXRSZWdpc3RlckRldihpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8VWFydC5yZWdpc3RlckRldj4oXCJnZXRSZWdpc3RlckRldlwiLCB7IGlkIH0pXG4gIH1cblxuICAvKipcbiAgICAgKiDliKDpmaTmjIflrprms6jlhozorr7lpIdcbiAgICAgKiBAcGFyYW0gaWQgXG4gICAgICogQHJldHVybnMgXG4gICAgICovXG4gIGRlbFJlZ2lzdGVyRGV2KGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaChcInJvb3QvZGVsUmVnaXN0ZXJEZXZcIiwgeyBpZCB9KVxuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPluaMh+WumuaJgOacieiuvuWkh1xuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIGdldFJlZ2lzdGVyRGV2cygpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxVYXJ0LnJlZ2lzdGVyRGV2W10+KFwicm9vdC9nZXRSZWdpc3RlckRldnNcIilcbiAgfVxuXG5cbiAgLyoqXG4gICAgICAgICAqIOWbuuWumuWPkemAgURUVSBBVOaMh+S7pFxuICAgICAgICAgKiBAcmV0dXJucyBcbiAgICAgICAgICovXG4gIHNlbmRBVEluc3RydWN0KG1hYzogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxVYXJ0LkFwb2xsb01vbmdvUmVzdWx0PihcInJvb3Qvc2VuZEFUSW5zdHJ1Y3RcIiwgeyBtYWMsIGNvbnRlbnQgfSlcbiAgfVxuXG5cbiAgLyoqXG4gICAqIOWIneWni+WMlmR0dVxuICAgKiBAcGFyYW0gbWFjIFxuICAgKi9cbiAgaW5pdFRlcm1pbmFsKG1hYzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJyb290L2luaXRUZXJtaW5hbFwiLCB7IG1hYyB9LCBcIlBPU1RcIiwgMTAwMCAqIDYwICogNSlcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5Zjb2Rl5a+55bqU55qEYmFzZTY0UVLlm77niYfmlbDmja5cbiAgICogQHBhcmFtIGNvZGUgXG4gICAqL1xuICBxcihjb2RlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxzdHJpbmc+KFwicXJcIiwgeyBjb2RlIH0pXG4gIH1cblxuXG5cblxuXG5cblxuICAvKipcbiAgICogQG1ldGhvZCBhcGnpgJrnlKhyZXF1c3Tmlrnms5VcbiAgICogQHBhcmFtIG9iamVjdCBcbiAgICovXG4gIGFzeW5jIGZldGNoPFQ+KHVybDogc3RyaW5nLCBkYXRhOiBPYmplY3QgPSB7fSwgbWV0aG9kOiBcIkdFVFwiIHwgXCJQT1NUXCIgPSBcIlBPU1RcIiwgdGltZW91dDogbnVtYmVyID0gMTAwMCAqIDYwKSB7XG4gICAgY29uc3QgdG9rZW46IHN0cmluZyA9IHRoaXMudG9rZW4gfHwgYXdhaXQgd3guZ2V0U3RvcmFnZSh7IGtleTogJ3Rva2VuJyB9KS50aGVuKGVsID0+IGVsLmRhdGEpLmNhdGNoKCgpID0+IFwiXCIpXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlPHJlc3VsdDxUPj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgd3gucmVxdWVzdDxyZXN1bHQ8VD4+KHtcbiAgICAgICAgdGltZW91dCxcbiAgICAgICAgdXJsOiB1cmxSZXF1ZXN0ICsgXCIvYXBpL1wiICsgdXJsLFxuICAgICAgICBkYXRhLFxuICAgICAgICBtZXRob2QsXG4gICAgICAgIGVuYWJsZUh0dHAyOiB0cnVlLFxuICAgICAgICBoZWFkZXI6IHsgdG9rZW4sIHR5cGU6ICd3cCcgfSxcbiAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICBpZiAocmVzLmRhdGEuY29kZSA9PT0gMjAxKSB7XG4gICAgICAgICAgICB3eC5uYXZpZ2F0ZVRvKHtcbiAgICAgICAgICAgICAgdXJsOiAnL3BhZ2VzL3V0aWwvc21zVmFsaWRhdGlvbi9zbXNWYWxpZGF0aW9uJyxcbiAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgY29kZTogKGNvZGU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5mZXRjaCgnc21zQ29kZVZhbGlkYXRpb24nLCB7IGNvZGUgfSkudGhlbihjb2RlVmFsaWRhdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2RlVmFsaWRhdGlvbi5jb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5mZXRjaCh1cmwsIGRhdGEsIG1ldGhvZCkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMuZGF0YSBhcyBhbnkpXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICB3eC5zaG93TW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAn55+t5L+h5qCh6aqM6ZSZ6K+vJ1xuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICByZXNvbHZlKHJlcy5kYXRhIGFzIGFueSlcbiAgICAgICAgfSxcbiAgICAgICAgZmFpbDogZSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coeyBlIH0pO1xuICAgICAgICAgIHd4LnNob3dUb2FzdCh7IHRpdGxlOiAn5pyN5Yqh5Zmo6ZSZ6K+vJywgY29udGVudDogZS5lcnJNc2cgfSlcbiAgICAgICAgICB3eC5oaWRlTG9hZGluZygpXG4gICAgICAgICAgcmVqZWN0KGUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgYXBpKClcbiJdfQ==
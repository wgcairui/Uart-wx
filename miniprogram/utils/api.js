"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../config");
class api {
    constructor() {
        this.url = config_1.urlRequest + "/api/wx/";
        this.token = "";
    }
    async login(data) {
        const el = await this.RequestUart({ url: "code2Session", data });
        if (el.ok) {
            this.token = el.arg.token;
            wx.setBackgroundFetchToken({
                token: this.token
            });
            wx.setStorage({ key: 'token', data: el.arg.token });
            const ws = wx.connectSocket({
                url: config_1.urlWs,
                header: {
                    'content-type': 'application/json'
                }
            });
            ws.onOpen(() => {
                ws.send({
                    data: JSON.stringify({ token: el.arg.token }),
                    success: () => {
                        this.wsInter = setInterval(() => {
                            ws.send({ data: 'time' });
                        }, 1000 * 30);
                    }
                });
                ws.onMessage((msg) => {
                    wx.vibrateLong();
                    wx.showModal({
                        title: '新的告警信息',
                        content: msg.data.toString(),
                        success() {
                            wx.switchTab({
                                url: '/pages/index/alarm/alarm'
                            });
                        }
                    });
                });
                wx.onSocketClose(() => {
                    console.log(new Date().toLocaleString() + "socket close");
                    clearInterval(this.wsInter);
                });
            });
        }
        return el;
    }
    userlogin(data) {
        return this.RequestUart({ url: 'userlogin', data });
    }
    updateAvanter(nickName, avanter) {
        return this.RequestUart({ url: 'updateAvanter', data: { nickName, avanter } });
    }
    async unbindwx() {
        const el = await this.RequestUart({ url: 'unbindwx', data: {} });
        this.token = "";
        return el;
    }
    getphonenumber(data) {
        return this.RequestUart({ url: "getphonenumber", data });
    }
    registerUser(data) {
        return this.RequestUart({ url: "register", data });
    }
    getuserMountDev() {
        return this.RequestUart({ url: 'getuserMountDev', data: {} });
    }
    getDTUInfo(mac) {
        return this.RequestUart({ url: 'getDTUInfo', data: { mac } });
    }
    getUserInfo() {
        return this.RequestUart({ url: 'getUserInfo', data: {} });
    }
    bindDev(mac) {
        return this.RequestUart({ url: 'bindDev', data: { mac } });
    }
    getAlarmunconfirmed() {
        return this.RequestUart({ url: 'getAlarmunconfirmed', data: {} });
    }
    getAlarm(start, end) {
        return this.RequestUart({ url: 'getAlarm', data: { start, end } });
    }
    alarmConfirmed(id) {
        return this.RequestUart({ url: 'alarmConfirmed', data: id ? { id } : {} });
    }
    getDevsRunInfo(mac, pid) {
        return this.RequestUart({ url: "getDevsRunInfo", data: { mac, pid } });
    }
    getDevsHistoryInfo(mac, pid, name, datatime = '') {
        return this.RequestUart({ url: 'getDevsHistoryInfo', data: { mac, pid, name, datatime } });
    }
    getDevOprate(protocol) {
        return this.RequestUart({ url: 'getDevOprate', data: { protocol } });
    }
    SendProcotolInstructSet(query, item) {
        return this.RequestUart({ url: 'SendProcotolInstructSet', data: { query, item }, method: 'POST' });
    }
    getUserDevConstant(protocol) {
        return this.RequestUart({ url: 'getUserDevConstant', data: { protocol } });
    }
    pushThreshold(arg, type, Protocol) {
        return this.RequestUart({ url: "pushThreshold", data: { type, arg, Protocol }, method: "POST" });
    }
    getUserAlarmTels() {
        return this.RequestUart({ url: 'getUserAlarmTels', data: {} });
    }
    setUserSetupContact(tels, mails) {
        return this.RequestUart({ url: 'setUserSetupContact', data: { tels, mails }, method: "POST" });
    }
    addTerminalMountDe(DevMac, Type, mountDev, protocol, pid) {
        return this.RequestUart({ url: 'addTerminalMountDev', data: { DevMac, Type, mountDev, protocol, pid }, method: "POST" });
    }
    delTerminalMountDev(DevMac, mountDev, pid) {
        return this.RequestUart({ url: 'delTerminalMountDev', data: { DevMac, mountDev, pid }, method: "POST" });
    }
    delUserTerminal(mac) {
        return this.RequestUart({ url: 'delUserTerminal', data: { mac } });
    }
    DevTypes(Type) {
        return this.RequestUart({ url: 'DevTypes', data: { Type } });
    }
    modifyUserInfo(type, value) {
        return this.RequestUart({ url: 'modifyUserInfo', data: { type, value } });
    }
    getGPSaddress(location) {
        return this.RequestUart({ url: 'getGPSaddress', data: { location } });
    }
    async cancelwx() {
        const el = await this.RequestUart({ url: 'cancelwx', data: {} });
        this.token = "";
        return el;
    }
    getUserTel() {
        return this.RequestUart({ url: 'getUserTel', data: {} });
    }
    sendValidation() {
        return this.RequestUart({ url: 'sendValidation', data: {} });
    }
    ValidationCode(code) {
        return this.RequestUart({ url: 'ValidationCode', data: { code } });
    }
    getNodes() {
        return this.RequestUart({ url: 'getNodes', data: {} });
    }
    bacthRegisterDTU(node, dtus) {
        return this.RequestUart({ url: 'bacthRegisterDTU', data: { node, dtus }, method: "POST" });
    }
    addVm() {
        return this.RequestUart({ url: 'addVm', data: {} });
    }
    modifyDTUName(dtu, name) {
        return this.RequestUart({ url: 'modifyDTUName', data: { dtu, name } });
    }
    updateGps(dtu, jw) {
        return this.RequestUart({ url: 'updateGps', data: { dtu, jw } });
    }
    webLogin(code) {
        return this.RequestUart({ url: 'webLogin', data: { code, token: this.token } });
    }
    iotRemoteUrl(mac) {
        return this.RequestUart({ url: 'iotRemoteUrl', data: { mac } });
    }
    async RequestUart(object) {
        const token = this.token || await wx.getStorage({ key: 'token' }).then(el => el.data).catch(() => "");
        return await new Promise((resolve, reject) => {
            wx.request({
                timeout: 1000 * 60,
                url: this.url + object.url,
                data: object.data,
                method: object.method || "GET",
                header: { token: token },
                success: res => {
                    if (res.statusCode !== 200) {
                        wx.showToast({
                            title: String(res.statusCode),
                            content: res.data.toString() || res.errMsg,
                            success() {
                                wx.reLaunch({ url: '/pages/index/index' });
                            }
                        });
                        reject(res);
                    }
                    else {
                        setTimeout(() => {
                            resolve(res.data);
                        }, 0);
                    }
                },
                fail: e => {
                    wx.showModal({ title: '服务器错误', content: e.errMsg });
                    reject(e);
                },
                complete: () => {
                }
            });
        });
    }
}
exports.default = new api();
//# sourceMappingURL=data:application/json;base64,
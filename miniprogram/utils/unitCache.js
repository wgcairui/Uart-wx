"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class unit {
    constructor() {
        this.cache = new Map();
    }
    get(value, unit) {
        if (unit && /^{.*}$/.test(unit)) {
            const unitObject = this.cache.get(unit);
            if (unitObject)
                return unitObject;
            else
                return this.parse(value, unit);
        }
        else {
            return {
                value,
                unit
            };
        }
    }
    getunitObject(value, unit) {
        const unitObject = this.cache.get(unit);
        if (unitObject)
            return unitObject.parseArray;
        else {
            return this.parse(value, unit).parseArray;
        }
    }
    parse(value, unit) {
        const arr = unit.replace(/(\{|\}| )/g, "")
            .split(",")
            .map(el => {
            const [key, text] = el.split(":");
            return { [key]: text, key, text };
        });
        const valueStr = String(value);
        const parseObject = Object.assign({}, ...arr);
        const result = {
            value: parseObject[valueStr],
            unit: '',
            parse: parseObject,
            parseArray: arr
        };
        this.cache.set(unit, result);
        return result;
    }
}
exports.default = new unit();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdENhY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidW5pdENhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsTUFBTSxJQUFJO0lBV1I7UUFDRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUNELEdBQUcsQ0FBQyxLQUFzQixFQUFFLElBQVk7UUFDdEMsSUFBSSxJQUFJLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUN2QyxJQUFJLFVBQVU7Z0JBQUUsT0FBTyxVQUFVLENBQUE7O2dCQUM1QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFBO1NBQ3BDO2FBQU07WUFDTCxPQUFPO2dCQUNMLEtBQUs7Z0JBQ0wsSUFBSTthQUNMLENBQUE7U0FDRjtJQUNILENBQUM7SUFFRCxhQUFhLENBQUMsS0FBc0IsRUFBRSxJQUFZO1FBQ2hELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3ZDLElBQUksVUFBVTtZQUFFLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQTthQUN2QztZQUNILE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFBO1NBQzFDO0lBQ0gsQ0FBQztJQUVPLEtBQUssQ0FBQyxLQUFzQixFQUFFLElBQVk7UUFDaEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDO2FBQ3ZDLEtBQUssQ0FBQyxHQUFHLENBQUM7YUFDVixHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDUixNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDakMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUUsQ0FBQTtRQUNqQyxDQUFDLENBQUMsQ0FBQTtRQUNKLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM5QixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBNEIsQ0FBQTtRQUN4RSxNQUFNLE1BQU0sR0FBRztZQUNiLEtBQUssRUFBRSxXQUFXLENBQUMsUUFBUSxDQUFDO1lBQzVCLElBQUksRUFBRSxFQUFFO1lBQ1IsS0FBSyxFQUFFLFdBQVc7WUFDbEIsVUFBVSxFQUFFLEdBQUc7U0FDaEIsQ0FBQTtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUM1QixPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUM7Q0FDRjtBQUVELGtCQUFlLElBQUksSUFBSSxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyDkv53lrZjorr7lpIflj4LmlbDop6PmnpDnirbmgIFcblxuY2xhc3MgdW5pdCB7XG4gIHByaXZhdGUgY2FjaGU6IE1hcDxzdHJpbmcsIHtcbiAgICB2YWx1ZTogc3RyaW5nLFxuICAgIHVuaXQ6IHN0cmluZyxcbiAgICBwYXJzZToge1xuICAgICAgW3g6IHN0cmluZ106IHN0cmluZztcbiAgICB9O1xuICAgIHBhcnNlQXJyYXk6IHtcbiAgICAgIFt4OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfVtdO1xuICB9PlxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNhY2hlID0gbmV3IE1hcCgpXG4gIH1cbiAgZ2V0KHZhbHVlOiBzdHJpbmcgfCBudW1iZXIsIHVuaXQ6IHN0cmluZykge1xuICAgIGlmICh1bml0ICYmIC9eey4qfSQvLnRlc3QodW5pdCkpIHtcbiAgICAgIGNvbnN0IHVuaXRPYmplY3QgPSB0aGlzLmNhY2hlLmdldCh1bml0KVxuICAgICAgaWYgKHVuaXRPYmplY3QpIHJldHVybiB1bml0T2JqZWN0XG4gICAgICBlbHNlIHJldHVybiB0aGlzLnBhcnNlKHZhbHVlLCB1bml0KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdW5pdFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldHVuaXRPYmplY3QodmFsdWU6IHN0cmluZyB8IG51bWJlciwgdW5pdDogc3RyaW5nKSB7XG4gICAgY29uc3QgdW5pdE9iamVjdCA9IHRoaXMuY2FjaGUuZ2V0KHVuaXQpXG4gICAgaWYgKHVuaXRPYmplY3QpIHJldHVybiB1bml0T2JqZWN0LnBhcnNlQXJyYXlcbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlKHZhbHVlLCB1bml0KS5wYXJzZUFycmF5XG4gICAgfVxuICB9XG4gIC8vIOi9rOaNouiuvuWkh3VuaXRcbiAgcHJpdmF0ZSBwYXJzZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyLCB1bml0OiBzdHJpbmcpIHtcbiAgICBjb25zdCBhcnIgPSB1bml0LnJlcGxhY2UoLyhcXHt8XFx9fCApL2csIFwiXCIpXG4gICAgICAuc3BsaXQoXCIsXCIpXG4gICAgICAubWFwKGVsID0+IHtcbiAgICAgICAgY29uc3QgW2tleSwgdGV4dF0gPSBlbC5zcGxpdChcIjpcIilcbiAgICAgICAgcmV0dXJuIHsgW2tleV06IHRleHQsa2V5LHRleHQgfVxuICAgICAgfSlcbiAgICBjb25zdCB2YWx1ZVN0ciA9IFN0cmluZyh2YWx1ZSlcbiAgICBjb25zdCBwYXJzZU9iamVjdCA9IE9iamVjdC5hc3NpZ24oe30sIC4uLmFycikgYXMgeyBbeDogc3RyaW5nXTogc3RyaW5nIH1cbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICB2YWx1ZTogcGFyc2VPYmplY3RbdmFsdWVTdHJdLFxuICAgICAgdW5pdDogJycsXG4gICAgICBwYXJzZTogcGFyc2VPYmplY3QsXG4gICAgICBwYXJzZUFycmF5OiBhcnJcbiAgICB9XG4gICAgdGhpcy5jYWNoZS5zZXQodW5pdCwgcmVzdWx0KVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgdW5pdCgpIl19